{
  "address": "0xD40C3806BA42b4D5D1082321a6b30f9481b45412",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "Deployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        }
      ],
      "name": "GaugeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "GaugeDecreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "GaugeIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        }
      ],
      "name": "GaugeRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IGaugeReward",
          "name": "gaugeReward",
          "type": "address"
        }
      ],
      "name": "GaugeRewardSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "scale",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldScale",
          "type": "uint256"
        }
      ],
      "name": "GaugeScaleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "ManagerTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipOffered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenWithdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "addGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_scale",
          "type": "uint256"
        }
      ],
      "name": "addGaugeWithScale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "decreaseGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gaugeReward",
      "outputs": [
        {
          "internalType": "contract IGaugeReward",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "getAverageGaugeBalanceBetween",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "getAverageGaugeScaleBetween",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "getGaugeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "getGaugeScaleBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "getScaledAverageGaugeBalanceBetween",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserGaugeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "increaseGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "isGauge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "removeGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IGaugeReward",
          "name": "_gaugeReward",
          "type": "address"
        }
      ],
      "name": "setGaugeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_scale",
          "type": "uint256"
        }
      ],
      "name": "setGaugeScale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newManager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userGaugeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x85a40f659608c4db5acf840b7b294ad07c131b40d3ad51fe98b818286cc23a46",
  "receipt": {
    "to": null,
    "from": "0x3A791e828fDd420fbE16416efDF509E4b9088Dd4",
    "contractAddress": "0xD40C3806BA42b4D5D1082321a6b30f9481b45412",
    "transactionIndex": 15,
    "gasUsed": "2277701",
    "logsBloom": "0x
    "blockHash": "0xfbcfb77b6034f73af353d560fa26abdab33fca1260f02710d4a6342369b3319a",
    "transactionHash": "0x85a40f659608c4db5acf840b7b294ad07c131b40d3ad51fe98b818286cc23a46",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 10807276,
        "transactionHash": "0x85a40f659608c4db5acf840b7b294ad07c131b40d3ad51fe98b818286cc23a46",
        "address": "0xD40C3806BA42b4D5D1082321a6b30f9481b45412",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003a791e828fdd420fbe16416efdf509e4b9088dd4"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xfbcfb77b6034f73af353d560fa26abdab33fca1260f02710d4a6342369b3319a"
      },
      {
        "transactionIndex": 15,
        "blockNumber": 10807276,
        "transactionHash": "0x85a40f659608c4db5acf840b7b294ad07c131b40d3ad51fe98b818286cc23a46",
        "address": "0xD40C3806BA42b4D5D1082321a6b30f9481b45412",
        "topics": [
          "0x09e48df7857bd0c1e0d31bb8a85d42cf1874817895f171c917f6ee2cea73ec20"
        ],
        "data": "0x00000000000000000000000079b00fd40ca5923b982afba53573f9d349d434180000000000000000000000003a791e828fdd420fbe16416efdf509e4b9088dd4",
        "logIndex": 6,
        "blockHash": "0xfbcfb77b6034f73af353d560fa26abdab33fca1260f02710d4a6342369b3319a"
      }
    ],
    "blockNumber": 10807276,
    "cumulativeGasUsed": "3190050",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x79B00FD40Ca5923B982afBa53573F9D349d43418",
    "0x3A791e828fDd420fbE16416efDF509E4b9088Dd4"
  ],
  "numDeployments": 1,
  "solcInputHash": "46a7ec46315ece58f9d4c4ea7316a87f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"GaugeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GaugeDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GaugeIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"GaugeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IGaugeReward\",\"name\":\"gaugeReward\",\"type\":\"address\"}],\"name\":\"GaugeRewardSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scale\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldScale\",\"type\":\"uint256\"}],\"name\":\"GaugeScaleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"addGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_scale\",\"type\":\"uint256\"}],\"name\":\"addGaugeWithScale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"decreaseGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeReward\",\"outputs\":[{\"internalType\":\"contract IGaugeReward\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"getAverageGaugeBalanceBetween\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"getAverageGaugeScaleBetween\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"getGaugeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"getGaugeScaleBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"getScaledAverageGaugeBalanceBetween\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserGaugeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"isGauge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"removeGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGaugeReward\",\"name\":\"_gaugeReward\",\"type\":\"address\"}],\"name\":\"setGaugeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_scale\",\"type\":\"uint256\"}],\"name\":\"setGaugeScale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userGaugeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Deployed(address,address)\":{\"params\":{\"owner\":\"Address of the contract owner\",\"token\":\"Address of the token being staked in the gauge\"}},\"GaugeAdded(address,address)\":{\"params\":{\"gauge\":\"New Gauge address\",\"user\":\"Authorized address\"}},\"GaugeDecreased(address,address,uint256)\":{\"params\":{\"amount\":\"Amount of 'balance' debited from the Gauge and credited to the User\",\"gauge\":\"Existing Gauge address\",\"user\":\"User address\"}},\"GaugeIncreased(address,address,uint256)\":{\"params\":{\"amount\":\"Amount of 'balance' debited from the User and credited to the Gauge\",\"gauge\":\"Existing Gauge address\",\"user\":\"User address\"}},\"GaugeRemoved(address,address)\":{\"params\":{\"gauge\":\"Gauge address\",\"user\":\"Authorized address\"}},\"GaugeRewardSet(address)\":{\"params\":{\"gaugeReward\":\"Address of the newly set GaugeReward contract\"}},\"GaugeScaleSet(address,address,uint256,uint256)\":{\"params\":{\"gauge\":\"Gauge address\",\"oldScale\":\"Old Gauge scale\",\"scale\":\"New Gauge scale\",\"user\":\"Authorized address\"}},\"TokenDeposited(address,uint256)\":{\"params\":{\"amount\":\"Amount of 'token' deposited into the GaugeController\",\"user\":\"Address of the user who deposited 'token' into the GaugeController\"}},\"TokenWithdrawn(address,uint256)\":{\"params\":{\"amount\":\"Amount of 'token' withdrawn from the GaugeController\",\"user\":\"Address of the user who withdrew 'token' from the GaugeController\"}}},\"kind\":\"dev\",\"methods\":{\"addGauge(address)\":{\"params\":{\"_gauge\":\"Address of the Gauge\"}},\"addGaugeWithScale(address,uint256)\":{\"params\":{\"_gauge\":\"Address of new Gauge\",\"_scale\":\"Amount to scale new Gauge by\"}},\"claimOwnership()\":{\"details\":\"This function is only callable by the `_pendingOwner`.\"},\"constructor\":{\"params\":{\"_owner\":\"Address of authorized owner\",\"_token\":\"ERC20 contract address (used to weight gauges)\"}},\"decreaseGauge(address,uint256)\":{\"params\":{\"_amount\":\"Amount of tokens to be debited from the Gauge balance and credited to the Gauge balance\",\"_gauge\":\"Address of the Gauge\"}},\"deposit(address,uint256)\":{\"params\":{\"_amount\":\"Amount of tokens to be deposited\",\"_to\":\"Receivzer of the deposited tokens\"}},\"getAverageGaugeBalanceBetween(address,uint256,uint256)\":{\"params\":{\"_endTime\":\"Unix timestamp to signal END of the Binary search\",\"_gauge\":\"Address of existing Gauge\",\"_startTime\":\"Unix timestamp to signal START of the Binary search\"},\"returns\":{\"_0\":\"uint256 Gauge average staked balance between two timestamps.\"}},\"getAverageGaugeScaleBetween(address,uint256,uint256)\":{\"params\":{\"_endTime\":\"Unix timestamp to signal END of the Binary search\",\"_gauge\":\"Address of existing Gauge\",\"_startTime\":\"Unix timestamp to signal START of the Binary search\"},\"returns\":{\"_0\":\"uint256 Gauge average scaled balance between two timestamps.\"}},\"getGaugeBalance(address)\":{\"params\":{\"_gauge\":\"Address of existing Gauge\"},\"returns\":{\"_0\":\"uint256 GaugeTWAB.details.balance\"}},\"getGaugeScaleBalance(address)\":{\"params\":{\"_gauge\":\"Address of existing Gauge\"},\"returns\":{\"_0\":\"uint256 GaugeScaleTWAB.details.balance\"}},\"getScaledAverageGaugeBalanceBetween(address,uint256,uint256)\":{\"params\":{\"_endTime\":\"Unix timestamp to signal END of the Binary search\",\"_gauge\":\"Address of existing Gauge\",\"_startTime\":\"Unix timestamp to signal START of the Binary search\"},\"returns\":{\"_0\":\"uint256 Weighted(Staked * Scaled) Gauge Balance\"}},\"getUserGaugeBalance(address,address)\":{\"params\":{\"_gauge\":\"Address of the gauge to get stake balance for\",\"_user\":\"Address of the user to get stake balance for\"},\"returns\":{\"_0\":\"The user gauge balance\"}},\"increaseGauge(address,uint256)\":{\"params\":{\"_amount\":\"Amount of tokens to be debited from the User balance and credited to the Gauge balance\",\"_gauge\":\"Address of the Gauge\"}},\"isGauge(address)\":{\"details\":\"Only reliable to check if a Gauge has been created AND also staked on.Uses the TWAB balance to determine \\\"isGauge\\\" status.\",\"params\":{\"_gauge\":\"Gauge address to check.\"},\"returns\":{\"_0\":\"True if gauge is active. False otherwise.\"}},\"manager()\":{\"returns\":{\"_0\":\"Current `_manager` address.\"}},\"pendingOwner()\":{\"returns\":{\"_0\":\"Current `_pendingOwner` address.\"}},\"removeGauge(address)\":{\"params\":{\"_gauge\":\"Address of existing Gauge\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setGaugeReward(address)\":{\"params\":{\"_gaugeReward\":\"Address of the GaugeReward contract\"}},\"setGaugeScale(address,uint256)\":{\"params\":{\"_gauge\":\"Address of existing Gauge\",\"_scale\":\"Amount to scale existing Gauge by\"}},\"setManager(address)\":{\"details\":\"Throws if called by any account other than the owner.\",\"params\":{\"_newManager\":\"New _manager address.\"},\"returns\":{\"_0\":\"Boolean to indicate if the operation was successful or not.\"}},\"transferOwnership(address)\":{\"params\":{\"_newOwner\":\"Address to transfer ownership to.\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"Amount of tokens to be withdrawn\"}}},\"stateVariables\":{\"balances\":{\"details\":\"The balance is updated in deposit, withthdraw, gaugeIncrease and gaugeDecrease. ----------------------------- | Address     | Balance     | | ----------- | ----------- | | 0x111...111 | 0x1000      | | 0x222...222 | 0x100000    | -----------------------------\"},\"rewards\":{\"details\":\"The rewards is updated in ----------------------------- | Address     | Rewards     | | ----------- | ----------- | | 0x111...111 | 0x100000    | | 0x222...222 | 0x500000    | -----------------------------\"},\"userGaugeBalance\":{\"details\":\"The balance is updated in gaugeIncrease and gaugeDecrease. ---------------------------------------------- | User        \\t| Gauge       \\t| Balance \\t| |-------------\\t|-------------\\t|---------\\t| | 0x111...111 \\t| 0x999...999 \\t| 0x10000  \\t| | 0x111...111 \\t| 0x999...999 \\t| 0x30000 \\t| | 0x111...111 \\t| 0x999...999 \\t| 0x50000  \\t| ----------------------------------------------\"}},\"version\":1},\"userdoc\":{\"events\":{\"Deployed(address,address)\":{\"notice\":\"Event emitted when the contract is deployed\"},\"GaugeAdded(address,address)\":{\"notice\":\"Emitted when an Authorized User adds a new Gauge to the GaugeController\"},\"GaugeDecreased(address,address,uint256)\":{\"notice\":\"Emitted when User decrease a Gauge weight.\"},\"GaugeIncreased(address,address,uint256)\":{\"notice\":\"Emitted when User increases a Gauge weight.\"},\"GaugeRemoved(address,address)\":{\"notice\":\"Emitted when an Authorized User removes an existing Gauge from the GaugeController\"},\"GaugeRewardSet(address)\":{\"notice\":\"Emitted when GaugeReward address is set/updated\"},\"GaugeScaleSet(address,address,uint256,uint256)\":{\"notice\":\"Emitted when an Authorized User sets an existing Gauge 'scale' weight.\"},\"TokenDeposited(address,uint256)\":{\"notice\":\"Emitted when User deposits 'token' into the gauge.\"},\"TokenWithdrawn(address,uint256)\":{\"notice\":\"Emitted when User withdraws 'token' from the gauge.\"}},\"kind\":\"user\",\"methods\":{\"addGauge(address)\":{\"notice\":\"Add new gauge with \\\"1e18\\\" scale to the GaugeController.\"},\"addGaugeWithScale(address,uint256)\":{\"notice\":\"Add new gauge and target scale to the GaugeController.\"},\"balances(address)\":{\"notice\":\"Tracks user balance. Balance is used to update target gauge weight balances.\"},\"claimOwnership()\":{\"notice\":\"Allows the `_pendingOwner` address to finalize the transfer.\"},\"constructor\":{\"notice\":\"GaugeController Construction\"},\"decreaseGauge(address,uint256)\":{\"notice\":\"Decrease Gauge balance and increase User staked balance.\"},\"deposit(address,uint256)\":{\"notice\":\"Deposit tokens in GaugeController and increase User balance.\"},\"gaugeReward()\":{\"notice\":\"GaugeReward for stakers rewards/incentives\"},\"getAverageGaugeBalanceBetween(address,uint256,uint256)\":{\"notice\":\"Calculate Gauge average balance between two timestamps.\"},\"getAverageGaugeScaleBetween(address,uint256,uint256)\":{\"notice\":\"Calculate Gauge average scale between two timestamps.\"},\"getGaugeBalance(address)\":{\"notice\":\"Read Gauge balance.\"},\"getGaugeScaleBalance(address)\":{\"notice\":\"Read Gauge scaled balance.\"},\"getScaledAverageGaugeBalanceBetween(address,uint256,uint256)\":{\"notice\":\"Calculate Gauge weighted balance using Staked AND Scaled time-weighted average balances.\"},\"getUserGaugeBalance(address,address)\":{\"notice\":\"Get the user stake balance for a given gauge\"},\"increaseGauge(address,uint256)\":{\"notice\":\"Increase Gauge balance by decreasing User staked balance.\"},\"isGauge(address)\":{\"notice\":\"Checks gauge status by reading the TWAB balance\"},\"manager()\":{\"notice\":\"Gets current `_manager`.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"notice\":\"Gets current `_pendingOwner`.\"},\"removeGauge(address)\":{\"notice\":\"Remove gauge from the GaugeController.\"},\"renounceOwnership()\":{\"notice\":\"Renounce ownership of the contract.\"},\"rewards(address)\":{\"notice\":\"Tracks user rewards for staking.\"},\"setGaugeReward(address)\":{\"notice\":\"Set GaugeReward contract\"},\"setGaugeScale(address,uint256)\":{\"notice\":\"Set Gauge target scale.\"},\"setManager(address)\":{\"notice\":\"Set or change of manager.\"},\"token()\":{\"notice\":\"ERC20 token contract address (used to weight gauges)\"},\"transferOwnership(address)\":{\"notice\":\"Allows current owner to set the `_pendingOwner` address.\"},\"userGaugeBalance(address,address)\":{\"notice\":\"Tracks User => Gauge => balance.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw tokens in GaugeController and increase User balance.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GaugeController.sol\":\"GaugeController\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @title Abstract manageable contract that can be inherited by other contracts\\n * @notice Contract module based on Ownable which provides a basic access control mechanism, where\\n * there is an owner and a manager that can be granted exclusive access to specific functions.\\n *\\n * By default, the owner is the deployer of the contract.\\n *\\n * The owner account is set through a two steps process.\\n *      1. The current `owner` calls {transferOwnership} to set a `pendingOwner`\\n *      2. The `pendingOwner` calls {acceptOwnership} to accept the ownership transfer\\n *\\n * The manager account needs to be set using {setManager}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyManager`, which can be applied to your functions to restrict their use to\\n * the manager.\\n */\\nabstract contract Manageable is Ownable {\\n    address private _manager;\\n\\n    /**\\n     * @dev Emitted when `_manager` has been changed.\\n     * @param previousManager previous `_manager` address.\\n     * @param newManager new `_manager` address.\\n     */\\n    event ManagerTransferred(address indexed previousManager, address indexed newManager);\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @notice Gets current `_manager`.\\n     * @return Current `_manager` address.\\n     */\\n    function manager() public view virtual returns (address) {\\n        return _manager;\\n    }\\n\\n    /**\\n     * @notice Set or change of manager.\\n     * @dev Throws if called by any account other than the owner.\\n     * @param _newManager New _manager address.\\n     * @return Boolean to indicate if the operation was successful or not.\\n     */\\n    function setManager(address _newManager) external onlyOwner returns (bool) {\\n        return _setManager(_newManager);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Set or change of manager.\\n     * @param _newManager New _manager address.\\n     * @return Boolean to indicate if the operation was successful or not.\\n     */\\n    function _setManager(address _newManager) private returns (bool) {\\n        address _previousManager = _manager;\\n\\n        require(_newManager != _previousManager, \\\"Manageable/existing-manager-address\\\");\\n\\n        _manager = _newManager;\\n\\n        emit ManagerTransferred(_previousManager, _newManager);\\n        return true;\\n    }\\n\\n    /* ============ Modifier Functions ============ */\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager.\\n     */\\n    modifier onlyManager() {\\n        require(manager() == msg.sender, \\\"Manageable/caller-not-manager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager or the owner.\\n     */\\n    modifier onlyManagerOrOwner() {\\n        require(manager() == msg.sender || owner() == msg.sender, \\\"Manageable/caller-not-manager-or-owner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xdd8ac008df192c6aa4df83e7037ab090970fda38e1f9fd712bc0ab5e0485fc04\",\"license\":\"GPL-3.0\"},\"@pooltogether/owner-manager-contracts/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Abstract ownable contract that can be inherited by other contracts\\n * @notice Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner is the deployer of the contract.\\n *\\n * The owner account is set through a two steps process.\\n *      1. The current `owner` calls {transferOwnership} to set a `pendingOwner`\\n *      2. The `pendingOwner` calls {acceptOwnership} to accept the ownership transfer\\n *\\n * The manager account needs to be set using {setManager}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    /**\\n     * @dev Emitted when `_pendingOwner` has been changed.\\n     * @param pendingOwner new `_pendingOwner` address.\\n     */\\n    event OwnershipOffered(address indexed pendingOwner);\\n\\n    /**\\n     * @dev Emitted when `_owner` has been changed.\\n     * @param previousOwner previous `_owner` address.\\n     * @param newOwner new `_owner` address.\\n     */\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /* ============ Deploy ============ */\\n\\n    /**\\n     * @notice Initializes the contract setting `_initialOwner` as the initial owner.\\n     * @param _initialOwner Initial owner of the contract.\\n     */\\n    constructor(address _initialOwner) {\\n        _setOwner(_initialOwner);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @notice Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Gets current `_pendingOwner`.\\n     * @return Current `_pendingOwner` address.\\n     */\\n    function pendingOwner() external view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @notice Renounce ownership of the contract.\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n    * @notice Allows current owner to set the `_pendingOwner` address.\\n    * @param _newOwner Address to transfer ownership to.\\n    */\\n    function transferOwnership(address _newOwner) external onlyOwner {\\n        require(_newOwner != address(0), \\\"Ownable/pendingOwner-not-zero-address\\\");\\n\\n        _pendingOwner = _newOwner;\\n\\n        emit OwnershipOffered(_newOwner);\\n    }\\n\\n    /**\\n    * @notice Allows the `_pendingOwner` address to finalize the transfer.\\n    * @dev This function is only callable by the `_pendingOwner`.\\n    */\\n    function claimOwnership() external onlyPendingOwner {\\n        _setOwner(_pendingOwner);\\n        _pendingOwner = address(0);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Internal function to set the `_owner` of the contract.\\n     * @param _newOwner New `_owner` address.\\n     */\\n    function _setOwner(address _newOwner) private {\\n        address _oldOwner = _owner;\\n        _owner = _newOwner;\\n        emit OwnershipTransferred(_oldOwner, _newOwner);\\n    }\\n\\n    /* ============ Modifier Functions ============ */\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable/caller-not-owner\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any account other than the `pendingOwner`.\\n    */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == _pendingOwner, \\\"Ownable/caller-not-pendingOwner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfd0fd374812c8af45f2633cc7cc4811ccb7bad0a3902a43aded35939eb4a00d1\",\"license\":\"GPL-3.0\"},\"contracts/GaugeController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\\\";\\n\\nimport \\\"./interfaces/IGaugeController.sol\\\";\\nimport \\\"./interfaces/IGaugeReward.sol\\\";\\nimport \\\"./libraries/TwabLib.sol\\\";\\nimport \\\"./libraries/ExtendedSafeCastLib.sol\\\";\\n\\ncontract GaugeController is IGaugeController, Manageable {\\n    using ExtendedSafeCastLib for uint256;\\n\\n    struct GaugeInfo {\\n        uint256 weight;\\n    }\\n\\n    /// @notice ERC20 token contract address (used to weight gauges)\\n    IERC20 public token;\\n\\n    /// @notice GaugeReward for stakers rewards/incentives\\n    IGaugeReward public gaugeReward;\\n\\n    /**\\n      * @notice Tracks user balance. Balance is used to update target gauge weight balances.\\n      * @dev    The balance is updated in deposit, withthdraw, gaugeIncrease and gaugeDecrease.\\n    -----------------------------\\n    | Address     | Balance     |\\n    | ----------- | ----------- |\\n    | 0x111...111 | 0x1000      |\\n    | 0x222...222 | 0x100000    |\\n    -----------------------------\\n    */\\n    mapping(address => uint256) public balances;\\n\\n    /**\\n      * @notice Tracks User => Gauge => balance.\\n      * @dev    The balance is updated in gaugeIncrease and gaugeDecrease.\\n    ----------------------------------------------\\n    | User        \\t| Gauge       \\t| Balance \\t|\\n    |-------------\\t|-------------\\t|---------\\t|\\n    | 0x111...111 \\t| 0x999...999 \\t| 0x10000  \\t|\\n    | 0x111...111 \\t| 0x999...999 \\t| 0x30000 \\t|\\n    | 0x111...111 \\t| 0x999...999 \\t| 0x50000  \\t|\\n    ----------------------------------------------\\n    */\\n    mapping(address => mapping(address => uint256)) public userGaugeBalance;\\n\\n    /**\\n      * @notice Tracks user rewards for staking.\\n      * @dev    The rewards is updated in\\n    -----------------------------\\n    | Address     | Rewards     |\\n    | ----------- | ----------- |\\n    | 0x111...111 | 0x100000    |\\n    | 0x222...222 | 0x500000    |\\n    -----------------------------\\n    */\\n    mapping(address => uint256) public rewards;\\n\\n    /// @notice User balances staked in existing Gauge.\\n    mapping(address => TwabLib.Account) internal gaugeTwabs;\\n\\n    /// @notice Governance scale set for existing Gauge.\\n    mapping(address => TwabLib.Account) internal gaugeScaleTwabs;\\n\\n    /**\\n     * @notice Event emitted when the contract is deployed\\n     * @param token Address of the token being staked in the gauge\\n     * @param owner Address of the contract owner\\n     */\\n    event Deployed(IERC20 token, address owner);\\n\\n    /**\\n     * @notice Emitted when GaugeReward address is set/updated\\n     * @param gaugeReward Address of the newly set GaugeReward contract\\n     */\\n    event GaugeRewardSet(IGaugeReward gaugeReward);\\n\\n    /**\\n     * @notice Emitted when User deposits 'token' into the gauge.\\n     * @param user Address of the user who deposited 'token' into the GaugeController\\n     * @param amount Amount of 'token' deposited into the GaugeController\\n     */\\n    event TokenDeposited(address indexed user, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when User withdraws 'token' from the gauge.\\n     * @param user Address of the user who withdrew 'token' from the GaugeController\\n     * @param amount Amount of 'token' withdrawn from the GaugeController\\n     */\\n    event TokenWithdrawn(address indexed user, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when User increases a Gauge weight.\\n     * @param user User address\\n     * @param gauge Existing Gauge address\\n     * @param amount Amount of 'balance' debited from the User and credited to the Gauge\\n     */\\n    event GaugeIncreased(address indexed user, address indexed gauge, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when User decrease a Gauge weight.\\n     * @param user User address\\n     * @param gauge Existing Gauge address\\n     * @param amount Amount of 'balance' debited from the Gauge and credited to the User\\n     */\\n    event GaugeDecreased(address indexed user, address indexed gauge, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when an Authorized User adds a new Gauge to the GaugeController\\n     * @param user Authorized address\\n     * @param gauge New Gauge address\\n     */\\n    event GaugeAdded(address indexed user, address gauge);\\n\\n    /**\\n     * @notice Emitted when an Authorized User removes an existing Gauge from the GaugeController\\n     * @param user Authorized address\\n     * @param gauge Gauge address\\n     */\\n    event GaugeRemoved(address indexed user, address indexed gauge);\\n\\n    /**\\n     * @notice Emitted when an Authorized User sets an existing Gauge 'scale' weight.\\n     * @param user Authorized address\\n     * @param gauge Gauge address\\n     * @param scale New Gauge scale\\n     * @param oldScale Old Gauge scale\\n     */\\n    event GaugeScaleSet(\\n        address indexed user,\\n        address indexed gauge,\\n        uint256 scale,\\n        uint256 oldScale\\n    );\\n\\n    /* ================================================================================ */\\n    /* Constructor & Modifiers                                                          */\\n    /* ================================================================================ */\\n\\n    /**\\n     * @notice GaugeController Construction\\n     * @param _token ERC20 contract address (used to weight gauges)\\n     * @param _owner Address of authorized owner\\n     */\\n    constructor(IERC20 _token, address _owner) Ownable(_owner) {\\n        require(_owner != address(0), \\\"GC/owner-not-zero-address\\\");\\n        require(address(_token) != address(0), \\\"GC/token-not-zero-address\\\");\\n        token = _token;\\n\\n        emit Deployed(_token, _owner);\\n    }\\n\\n    /**\\n     * @notice Modifier to check Gauge status.\\n     * @dev True if gauge is active. False otherwise.\\n     * @dev Modifier is RUN before the inheriting function is executed.\\n     * @param _gauge Gauge address to check.\\n     */\\n    modifier requireGauge(address _gauge) {\\n        require(isGauge(_gauge), \\\"GaugeController:invalid-address\\\");\\n        _;\\n    }\\n\\n    /* ================================================================================ */\\n    /* External Functions                                                               */\\n    /* ================================================================================ */\\n\\n    /**\\n     * @notice Checks gauge status by reading the TWAB balance\\n     * @dev Only reliable to check if a Gauge has been created AND also staked on.\\n     * @dev Uses the TWAB balance to determine \\\"isGauge\\\" status.\\n     * @param _gauge Gauge address to check.\\n     * @return True if gauge is active. False otherwise.\\n     */\\n    function isGauge(address _gauge) public view returns (bool) {\\n        return gaugeScaleTwabs[_gauge].details.balance > 0;\\n    }\\n\\n    /**\\n     * @notice Deposit tokens in GaugeController and increase User balance.\\n     * @param _to  Receivzer of the deposited tokens\\n     * @param _amount  Amount of tokens to be deposited\\n     */\\n    function deposit(address _to, uint256 _amount) external {\\n        balances[_to] += _amount;\\n        token.transferFrom(msg.sender, address(this), _amount);\\n        emit TokenDeposited(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw tokens in GaugeController and increase User balance.\\n     * @param _amount  Amount of tokens to be withdrawn\\n     */\\n    function withdraw(uint256 _amount) external {\\n        balances[msg.sender] -= _amount;\\n        token.transfer(msg.sender, _amount);\\n        emit TokenWithdrawn(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Increase Gauge balance by decreasing User staked balance.\\n     * @param _gauge  Address of the Gauge\\n     * @param _amount Amount of tokens to be debited from the User balance and credited to the Gauge balance\\n     */\\n    function increaseGauge(address _gauge, uint256 _amount) external requireGauge(_gauge) {\\n        balances[msg.sender] -= _amount;\\n        userGaugeBalance[msg.sender][_gauge] += _amount;\\n        TwabLib.Account storage gaugeTwab = gaugeTwabs[_gauge];\\n        (TwabLib.AccountDetails memory twabDetails, , ) = TwabLib.increaseBalance(\\n            gaugeTwab,\\n            _amount.toUint208(),\\n            uint32(block.timestamp)\\n        );\\n        gaugeTwab.details = twabDetails;\\n        gaugeReward.afterIncreaseGauge(_gauge, msg.sender, uint256(twabDetails.balance) - _amount);\\n        emit GaugeIncreased(msg.sender, _gauge, _amount);\\n    }\\n\\n    /**\\n     * @notice Decrease Gauge balance and increase User staked balance.\\n     * @param _gauge  Address of the Gauge\\n     * @param _amount Amount of tokens to be debited from the Gauge balance and credited to the Gauge balance\\n     */\\n    function decreaseGauge(address _gauge, uint256 _amount) external requireGauge(_gauge) {\\n        balances[msg.sender] += _amount;\\n        userGaugeBalance[msg.sender][_gauge] -= _amount;\\n        TwabLib.Account storage gaugeTwab = gaugeTwabs[_gauge];\\n        (TwabLib.AccountDetails memory twabDetails, , ) = TwabLib.decreaseBalance(\\n            gaugeTwab,\\n            _amount.toUint208(),\\n            \\\"insuff\\\",\\n            uint32(block.timestamp)\\n        );\\n        gaugeTwab.details = twabDetails;\\n        gaugeReward.afterDecreaseGauge(_gauge, msg.sender, uint256(twabDetails.balance) + _amount);\\n        emit GaugeDecreased(msg.sender, _gauge, _amount);\\n    }\\n\\n    /**\\n     * @notice Add new gauge with \\\"1e18\\\" scale to the GaugeController.\\n     * @param _gauge Address of the Gauge\\n     */\\n    function addGauge(address _gauge) external onlyOwner {\\n        _addGaugeWithScale(_gauge, 1 ether);\\n    }\\n\\n    /**\\n     * @notice Add new gauge and target scale to the GaugeController.\\n     * @param _gauge Address of new Gauge\\n     * @param _scale Amount to scale new Gauge by\\n     */\\n    function addGaugeWithScale(address _gauge, uint256 _scale) external onlyOwner {\\n        _addGaugeWithScale(_gauge, _scale);\\n    }\\n\\n    /**\\n     * @notice Remove gauge from the GaugeController.\\n     * @param _gauge Address of existing Gauge\\n     */\\n    function removeGauge(address _gauge) external onlyOwner {\\n        TwabLib.Account storage gaugeScaleTwab = gaugeScaleTwabs[_gauge];\\n        TwabLib.AccountDetails memory twabDetails = gaugeScaleTwab.details;\\n        (twabDetails, , ) = TwabLib.decreaseBalance(\\n            gaugeScaleTwab,\\n            twabDetails.balance,\\n            \\\"insuff\\\",\\n            uint32(block.timestamp)\\n        );\\n        gaugeScaleTwab.details = twabDetails;\\n        emit GaugeRemoved(msg.sender, _gauge);\\n    }\\n\\n    /**\\n     * @notice Set GaugeReward contract\\n     * @param _gaugeReward Address of the GaugeReward contract\\n     */\\n    function setGaugeReward(IGaugeReward _gaugeReward) external onlyManagerOrOwner {\\n        require(address(_gaugeReward) != address(0), \\\"GC/GaugeReward-not-zero-address\\\");\\n        gaugeReward = _gaugeReward;\\n        emit GaugeRewardSet(_gaugeReward);\\n    }\\n\\n    /**\\n     * @notice Set Gauge target scale.\\n     * @param _gauge Address of existing Gauge\\n     * @param _scale Amount to scale existing Gauge by\\n     */\\n    function setGaugeScale(address _gauge, uint256 _scale) external onlyManagerOrOwner {\\n        TwabLib.Account storage gaugeScaleTwab = gaugeScaleTwabs[_gauge];\\n        TwabLib.AccountDetails memory twabDetails = gaugeScaleTwab.details;\\n        if (twabDetails.balance > _scale) {\\n            (twabDetails, , ) = TwabLib.decreaseBalance(\\n                gaugeScaleTwab,\\n                twabDetails.balance - _scale.toUint208(),\\n                \\\"insuff\\\",\\n                uint32(block.timestamp)\\n            );\\n        } else {\\n            (twabDetails, , ) = TwabLib.increaseBalance(\\n                gaugeScaleTwab,\\n                _scale.toUint208() - twabDetails.balance,\\n                uint32(block.timestamp)\\n            );\\n        }\\n        gaugeScaleTwab.details = twabDetails;\\n        emit GaugeScaleSet(msg.sender, _gauge, _scale, twabDetails.balance);\\n    }\\n\\n    /// @inheritdoc IGaugeController\\n    function getGaugeBalance(address _gauge) external view override returns (uint256) {\\n        return gaugeTwabs[_gauge].details.balance;\\n    }\\n\\n    /// @inheritdoc IGaugeController\\n    function getGaugeScaleBalance(address _gauge) external view override returns (uint256) {\\n        return gaugeScaleTwabs[_gauge].details.balance;\\n    }\\n\\n    /// @inheritdoc IGaugeController\\n    function getUserGaugeBalance(address _gauge, address _user)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return userGaugeBalance[_user][_gauge];\\n    }\\n\\n    /**\\n     * @notice Calculate Gauge weighted balance using Staked AND Scaled time-weighted average balances.\\n     * @param _gauge Address of existing Gauge\\n     * @param _startTime Unix timestamp to signal START of the Binary search\\n     * @param _endTime Unix timestamp to signal END of the Binary search\\n     * @return uint256 Weighted(Staked * Scaled) Gauge Balance\\n     */\\n    function getScaledAverageGaugeBalanceBetween(\\n        address _gauge,\\n        uint256 _startTime,\\n        uint256 _endTime\\n    ) external view override returns (uint256) {\\n        uint256 gauge = _getAverageGaugeBalanceBetween(_gauge, _startTime, _endTime);\\n        uint256 gaugeScale = _getAverageGaugeScaleBetween(_gauge, _startTime, _endTime);\\n        return (gauge * gaugeScale) / 1 ether;\\n    }\\n\\n    /**\\n     * @notice Calculate Gauge average balance between two timestamps.\\n     * @param _gauge Address of existing Gauge\\n     * @param _startTime Unix timestamp to signal START of the Binary search\\n     * @param _endTime Unix timestamp to signal END of the Binary search\\n     * @return uint256 Gauge average staked balance between two timestamps.\\n     */\\n    function getAverageGaugeBalanceBetween(\\n        address _gauge,\\n        uint256 _startTime,\\n        uint256 _endTime\\n    ) external view returns (uint256) {\\n        return _getAverageGaugeBalanceBetween(_gauge, _startTime, _endTime);\\n    }\\n\\n    /**\\n     * @notice Calculate Gauge average scale between two timestamps.\\n     * @param _gauge Address of existing Gauge\\n     * @param _startTime Unix timestamp to signal START of the Binary search\\n     * @param _endTime Unix timestamp to signal END of the Binary search\\n     * @return uint256 Gauge average scaled balance between two timestamps.\\n     */\\n    function getAverageGaugeScaleBetween(\\n        address _gauge,\\n        uint256 _startTime,\\n        uint256 _endTime\\n    ) external view returns (uint256) {\\n        return _getAverageGaugeScaleBetween(_gauge, _startTime, _endTime);\\n    }\\n\\n    /* ================================================================================ */\\n    /* Internal Functions                                                               */\\n    /* ================================================================================ */\\n\\n    function _addGaugeWithScale(address _gauge, uint256 _scale) internal {\\n        TwabLib.Account storage gaugeScaleTwab = gaugeScaleTwabs[_gauge];\\n        (TwabLib.AccountDetails memory twabDetails, , ) = TwabLib.increaseBalance(\\n            gaugeScaleTwab,\\n            _scale.toUint208(),\\n            uint32(block.timestamp)\\n        );\\n        gaugeScaleTwab.details = twabDetails;\\n        emit GaugeAdded(msg.sender, _gauge);\\n    }\\n\\n    function _getAverageGaugeBalanceBetween(\\n        address _gauge,\\n        uint256 _startTime,\\n        uint256 _endTime\\n    ) internal view returns (uint256) {\\n        TwabLib.AccountDetails memory gaugeDetails = gaugeTwabs[_gauge].details;\\n        return\\n            TwabLib.getAverageBalanceBetween(\\n                gaugeTwabs[_gauge].twabs,\\n                gaugeDetails,\\n                uint32(_startTime),\\n                uint32(_endTime),\\n                uint32(block.timestamp)\\n            );\\n    }\\n\\n    function _getAverageGaugeScaleBetween(\\n        address _gauge,\\n        uint256 _startTime,\\n        uint256 _endTime\\n    ) internal view returns (uint256) {\\n        TwabLib.AccountDetails memory gaugeScaleDetails = gaugeScaleTwabs[_gauge].details;\\n        return\\n            TwabLib.getAverageBalanceBetween(\\n                gaugeScaleTwabs[_gauge].twabs,\\n                gaugeScaleDetails,\\n                uint32(_startTime),\\n                uint32(_endTime),\\n                uint32(block.timestamp)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xddf58b8d6e2d54b3e73eebc211f863d9bac6d771be5d409cefcec0d33812293a\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IGaugeController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\ninterface IGaugeController {\\n    /**\\n     * @notice Get the gauge scaled average balance between two timestamps.\\n     * @param _gauge Address of the gauge to get the average scaled balance for\\n     * @param _startTime Start timestamp at which to get the average scaled balance\\n     * @param _endTime End timestamp at which to get the average scaled balance\\n     * @return The gauge scaled average balance between the two timestamps\\n     */\\n    function getScaledAverageGaugeBalanceBetween(\\n        address _gauge,\\n        uint256 _startTime,\\n        uint256 _endTime\\n    ) external view returns (uint256);\\n    \\n    /**\\n     * @notice Read Gauge balance.\\n     * @param _gauge Address of existing Gauge\\n     * @return uint256 GaugeTWAB.details.balance\\n     */\\n     function getGaugeBalance(address _gauge) external view returns (uint256);\\n\\n     /**\\n      * @notice Read Gauge scaled balance.\\n      * @param _gauge Address of existing Gauge\\n      * @return uint256 GaugeScaleTWAB.details.balance\\n      */\\n     function getGaugeScaleBalance(address _gauge) external view returns (uint256);\\n \\n     /**\\n      * @notice Get the user stake balance for a given gauge\\n      * @param _gauge Address of the gauge to get stake balance for\\n      * @param _user Address of the user to get stake balance for\\n      * @return The user gauge balance\\n      */\\n     function getUserGaugeBalance(address _gauge, address _user) external view returns (uint256);\\n}\",\"keccak256\":\"0xd9963bccaa220e4c3527aaa7cb77b5da7900311a5fb94ab3d7eb26f13288abd8\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IGaugeReward.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\n/**\\n * @title  PoolTogether V4 IGaugeReward\\n * @author PoolTogether Inc Team\\n * @notice The GaugeReward interface.\\n */\\ninterface IGaugeReward {\\n    /**\\n     * @notice Fallback function to call in GaugeController after a user has increased their gauge stake.\\n     * @notice Callback function to call in GaugeController after a user has increased their gauge stake.\\n     * @param gauge Address of the gauge to increase stake for\\n     * @param user Address of the user to increase stake for\\n     * @param oldStakeBalance Old stake balance of the user\\n     */\\n    function afterIncreaseGauge(\\n        address gauge,\\n        address user,\\n        uint256 oldStakeBalance\\n    ) external;\\n\\n    /**\\n     * @notice Callback function to call in GaugeController after a user has decreased his gauge stake.\\n     * @param gauge Address of the gauge to decrease stake for\\n     * @param user Address of the user to decrease stake for\\n     * @param oldStakeBalance Old stake balance of the user\\n     */\\n    function afterDecreaseGauge(\\n        address gauge,\\n        address user,\\n        uint256 oldStakeBalance\\n    ) external;\\n}\\n\",\"keccak256\":\"0x826190a5356dcf82b37edfd14432e297853ec1c5a1923b23d751ef4026cfd9f2\",\"license\":\"GPL-3.0\"},\"contracts/libraries/ExtendedSafeCastLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary ExtendedSafeCastLib {\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 _value) internal pure returns (uint104) {\\n        require(_value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(_value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 _value) internal pure returns (uint208) {\\n        require(_value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(_value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 _value) internal pure returns (uint224) {\\n        require(_value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(_value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x9dae48760b4f78e5418ea8f44abe51fd40570b3159fac80ff17935b6451dcacd\",\"license\":\"GPL-3.0\"},\"contracts/libraries/ObservationLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"./OverflowSafeComparatorLib.sol\\\";\\nimport \\\"./RingBufferLib.sol\\\";\\n\\n/**\\n* @title Observation Library\\n* @notice This library allows one to store an array of timestamped values and efficiently binary search them.\\n* @dev Largely pulled from Uniswap V3 Oracle.sol: https://github.com/Uniswap/v3-core/blob/c05a0e2c8c08c460fb4d05cfdda30b3ad8deeaac/contracts/libraries/Oracle.sol\\n* @author PoolTogether Inc.\\n*/\\nlibrary ObservationLib {\\n    using OverflowSafeComparatorLib for uint32;\\n    using SafeCast for uint256;\\n\\n    /// @notice The maximum number of observations\\n    uint24 public constant MAX_CARDINALITY = 16777215; // 2**24\\n\\n    /**\\n    * @notice Observation, which includes an amount and timestamp.\\n    * @param amount `amount` at `timestamp`.\\n    * @param timestamp Recorded `timestamp`.\\n    */\\n    struct Observation {\\n        uint224 amount;\\n        uint32 timestamp;\\n    }\\n\\n    /**\\n    * @notice Fetches Observations `beforeOrAt` and `atOrAfter` a `_target`, eg: where [`beforeOrAt`, `atOrAfter`] is satisfied.\\n    * The result may be the same Observation, or adjacent Observations.\\n    * @dev The answer must be contained in the array used when the target is located within the stored Observation.\\n    * boundaries: older than the most recent Observation and younger, or the same age as, the oldest Observation.\\n    * @dev  If `_newestObservationIndex` is less than `_oldestObservationIndex`, it means that we've wrapped around the circular buffer.\\n    *       So the most recent observation will be at `_oldestObservationIndex + _cardinality - 1`, at the beginning of the circular buffer.\\n    * @param _observations List of Observations to search through.\\n    * @param _newestObservationIndex Index of the newest Observation. Right side of the circular buffer.\\n    * @param _oldestObservationIndex Index of the oldest Observation. Left side of the circular buffer.\\n    * @param _target Timestamp at which we are searching the Observation.\\n    * @param _cardinality Cardinality of the circular buffer we are searching through.\\n    * @param _time Timestamp at which we perform the binary search.\\n    * @return beforeOrAt Observation recorded before, or at, the target.\\n    * @return atOrAfter Observation recorded at, or after, the target.\\n    */\\n    function binarySearch(\\n        Observation[MAX_CARDINALITY] storage _observations,\\n        uint24 _newestObservationIndex,\\n        uint24 _oldestObservationIndex,\\n        uint32 _target,\\n        uint24 _cardinality,\\n        uint32 _time\\n    ) internal view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n        uint256 leftSide = _oldestObservationIndex;\\n        uint256 rightSide = _newestObservationIndex < leftSide\\n            ? leftSide + _cardinality - 1\\n            : _newestObservationIndex;\\n        uint256 currentIndex;\\n\\n        while (true) {\\n            // We start our search in the middle of the `leftSide` and `rightSide`.\\n            // After each iteration, we narrow down the search to the left or the right side while still starting our search in the middle.\\n            currentIndex = (leftSide + rightSide) / 2;\\n\\n            beforeOrAt = _observations[uint24(RingBufferLib.wrap(currentIndex, _cardinality))];\\n            uint32 beforeOrAtTimestamp = beforeOrAt.timestamp;\\n\\n            // We've landed on an uninitialized timestamp, keep searching higher (more recently).\\n            if (beforeOrAtTimestamp == 0) {\\n                leftSide = currentIndex + 1;\\n                continue;\\n            }\\n\\n            atOrAfter = _observations[uint24(RingBufferLib.nextIndex(currentIndex, _cardinality))];\\n\\n            bool targetAtOrAfter = beforeOrAtTimestamp.lte(_target, _time);\\n\\n            // Check if we've found the corresponding Observation.\\n            if (targetAtOrAfter && _target.lte(atOrAfter.timestamp, _time)) {\\n                break;\\n            }\\n\\n            // If `beforeOrAtTimestamp` is greater than `_target`, then we keep searching lower. To the left of the current index.\\n            if (!targetAtOrAfter) {\\n                rightSide = currentIndex - 1;\\n            } else {\\n                // Otherwise, we keep searching higher. To the left of the current index.\\n                leftSide = currentIndex + 1;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x225592b42013fc0af60822e75bc047d53b42a5fcf15f2173cdc3b50bea334b0a\",\"license\":\"GPL-3.0\"},\"contracts/libraries/OverflowSafeComparatorLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\n/// @title OverflowSafeComparatorLib library to share comparator functions between contracts\\n/// @dev Code taken from Uniswap V3 Oracle.sol: https://github.com/Uniswap/v3-core/blob/3e88af408132fc957e3e406f65a0ce2b1ca06c3d/contracts/libraries/Oracle.sol\\n/// @author PoolTogether Inc.\\nlibrary OverflowSafeComparatorLib {\\n    /// @notice 32-bit timestamps comparator.\\n    /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\\n    /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\\n    /// @param _b Timestamp to compare against `_a`.\\n    /// @param _timestamp A timestamp truncated to 32 bits.\\n    /// @return bool Whether `_a` is chronologically < `_b`.\\n    function lt(\\n        uint32 _a,\\n        uint32 _b,\\n        uint32 _timestamp\\n    ) internal pure returns (bool) {\\n        // No need to adjust if there hasn't been an overflow\\n        if (_a <= _timestamp && _b <= _timestamp) return _a < _b;\\n\\n        uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n        uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n        return aAdjusted < bAdjusted;\\n    }\\n\\n    /// @notice 32-bit timestamps comparator.\\n    /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\\n    /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\\n    /// @param _b Timestamp to compare against `_a`.\\n    /// @param _timestamp A timestamp truncated to 32 bits.\\n    /// @return bool Whether `_a` is chronologically <= `_b`.\\n    function lte(\\n        uint32 _a,\\n        uint32 _b,\\n        uint32 _timestamp\\n    ) internal pure returns (bool) {\\n\\n        // No need to adjust if there hasn't been an overflow\\n        if (_a <= _timestamp && _b <= _timestamp) return _a <= _b;\\n\\n        uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n        uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n        return aAdjusted <= bAdjusted;\\n    }\\n\\n    /// @notice 32-bit timestamp subtractor\\n    /// @dev safe for 0 or 1 overflows, where `_a` and `_b` must be chronologically before or equal to time\\n    /// @param _a The subtraction left operand\\n    /// @param _b The subtraction right operand\\n    /// @param _timestamp The current time.  Expected to be chronologically after both.\\n    /// @return The difference between a and b, adjusted for overflow\\n    function checkedSub(\\n        uint32 _a,\\n        uint32 _b,\\n        uint32 _timestamp\\n    ) internal pure returns (uint32) {\\n        // No need to adjust if there hasn't been an overflow\\n\\n        if (_a <= _timestamp && _b <= _timestamp) return _a - _b;\\n\\n        uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n        uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n        return uint32(aAdjusted - bAdjusted);\\n    }\\n}\\n\",\"keccak256\":\"0x20630cf89e7b92462946defe979fd0e69fa119841d55886121948ad810778c74\",\"license\":\"GPL-3.0\"},\"contracts/libraries/RingBufferLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nlibrary RingBufferLib {\\n    /**\\n    * @notice Returns wrapped TWAB index.\\n    * @dev  In order to navigate the TWAB circular buffer, we need to use the modulo operator.\\n    * @dev  For example, if `_index` is equal to 32 and the TWAB circular buffer is of `_cardinality` 32,\\n    *       it will return 0 and will point to the first element of the array.\\n    * @param _index Index used to navigate through the TWAB circular buffer.\\n    * @param _cardinality TWAB buffer cardinality.\\n    * @return TWAB index.\\n    */\\n    function wrap(uint256 _index, uint256 _cardinality) internal pure returns (uint256) {\\n        return _index % _cardinality;\\n    }\\n\\n    /**\\n    * @notice Computes the negative offset from the given index, wrapped by the cardinality.\\n    * @dev  We add `_cardinality` to `_index` to be able to offset even if `_amount` is superior to `_cardinality`.\\n    * @param _index The index from which to offset\\n    * @param _amount The number of indices to offset.  This is subtracted from the given index.\\n    * @param _cardinality The number of elements in the ring buffer\\n    * @return Offsetted index.\\n     */\\n    function offset(\\n        uint256 _index,\\n        uint256 _amount,\\n        uint256 _cardinality\\n    ) internal pure returns (uint256) {\\n        return wrap(_index + _cardinality - _amount, _cardinality);\\n    }\\n\\n    /// @notice Returns the index of the last recorded TWAB\\n    /// @param _nextIndex The next available twab index.  This will be recorded to next.\\n    /// @param _cardinality The cardinality of the TWAB history.\\n    /// @return The index of the last recorded TWAB\\n    function newestIndex(uint256 _nextIndex, uint256 _cardinality)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_cardinality == 0) {\\n            return 0;\\n        }\\n\\n        return wrap(_nextIndex + _cardinality - 1, _cardinality);\\n    }\\n\\n    /// @notice Computes the ring buffer index that follows the given one, wrapped by cardinality\\n    /// @param _index The index to increment\\n    /// @param _cardinality The number of elements in the Ring Buffer\\n    /// @return The next index relative to the given index.  Will wrap around to 0 if the next index == cardinality\\n    function nextIndex(uint256 _index, uint256 _cardinality)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return wrap(_index + 1, _cardinality);\\n    }\\n}\\n\",\"keccak256\":\"0x052e3bf6bfb30f32950e322c853589a8d153cf34f4b1ee292b17eb46f2ae656c\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TwabLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"./ExtendedSafeCastLib.sol\\\";\\nimport \\\"./OverflowSafeComparatorLib.sol\\\";\\nimport \\\"./RingBufferLib.sol\\\";\\nimport \\\"./ObservationLib.sol\\\";\\n\\n/**\\n  * @title  PoolTogether V4 TwabLib (Library)\\n  * @author PoolTogether Inc Team\\n  * @dev    Time-Weighted Average Balance Library for ERC20 tokens.\\n  * @notice This TwabLib adds on-chain historical lookups to a user(s) time-weighted average balance.\\n            Each user is mapped to an Account struct containing the TWAB history (ring buffer) and\\n            ring buffer parameters. Every token.transfer() creates a new TWAB checkpoint. The new TWAB\\n            checkpoint is stored in the circular ring buffer, as either a new checkpoint or rewriting\\n            a previous checkpoint with new parameters. The TwabLib (using existing blocktimes of 1block/15sec)\\n            guarantees minimum 7.4 years of search history.\\n */\\nlibrary TwabLib {\\n    using OverflowSafeComparatorLib for uint32;\\n    using ExtendedSafeCastLib for uint256;\\n\\n    /**\\n      * @notice Sets max ring buffer length in the Account.twabs Observation list.\\n                As users transfer/mint/burn tickets new Observation checkpoints are\\n                recorded. The current max cardinality guarantees a seven year minimum,\\n                of accurate historical lookups with current estimates of 1 new block\\n                every 15 seconds - assuming each block contains a transfer to trigger an\\n                observation write to storage.\\n      * @dev    The user Account.AccountDetails.cardinality parameter can NOT exceed\\n                the max cardinality variable. Preventing \\\"corrupted\\\" ring buffer lookup\\n                pointers and new observation checkpoints.\\n\\n                The MAX_CARDINALITY in fact guarantees at least 7.4 years of records:\\n                If 14 = block time in seconds\\n                (2**24) * 14 = 234881024 seconds of history\\n                234881024 / (365 * 24 * 60 * 60) ~= 7.44 years\\n    */\\n    uint24 public constant MAX_CARDINALITY = 16777215; // 2**24\\n\\n    /** @notice Struct ring buffer parameters for single user Account\\n      * @param balance       Current balance for an Account\\n      * @param nextTwabIndex Next uninitialized or updatable ring buffer checkpoint storage slot\\n      * @param cardinality   Current total \\\"initialized\\\" ring buffer checkpoints for single user AccountDetails.\\n                             Used to set initial boundary conditions for an efficient binary search.\\n    */\\n    struct AccountDetails {\\n        uint208 balance;\\n        uint24 nextTwabIndex;\\n        uint24 cardinality;\\n    }\\n\\n    /// @notice Combines account details with their twab history\\n    /// @param details The account details\\n    /// @param twabs The history of twabs for this account\\n    struct Account {\\n        AccountDetails details;\\n        ObservationLib.Observation[MAX_CARDINALITY] twabs;\\n    }\\n\\n    /// @notice Increases an account's balance and records a new twab.\\n    /// @param _account The account whose balance will be increased\\n    /// @param _amount The amount to increase the balance by\\n    /// @param _currentTime The current time\\n    /// @return accountDetails The new AccountDetails\\n    /// @return twab The user's latest TWAB\\n    /// @return isNew Whether the TWAB is new\\n    function increaseBalance(\\n        Account storage _account,\\n        uint208 _amount,\\n        uint32 _currentTime\\n    )\\n        internal\\n        returns (\\n            AccountDetails memory accountDetails,\\n            ObservationLib.Observation memory twab,\\n            bool isNew\\n        )\\n    {\\n        AccountDetails memory _accountDetails = _account.details;\\n        (accountDetails, twab, isNew) = _nextTwab(_account.twabs, _accountDetails, _currentTime);\\n        accountDetails.balance = _accountDetails.balance + _amount;\\n    }\\n\\n    /** @notice Calculates the next TWAB checkpoint for an account with a decreasing balance.\\n     * @dev    With Account struct and amount decreasing calculates the next TWAB observable checkpoint.\\n     * @param _account        Account whose balance will be decreased\\n     * @param _amount         Amount to decrease the balance by\\n     * @param _revertMessage  Revert message for insufficient balance\\n     * @return accountDetails Updated Account.details struct\\n     * @return twab           TWAB observation (with decreasing average)\\n     * @return isNew          Whether TWAB is new or calling twice in the same block\\n     */\\n    function decreaseBalance(\\n        Account storage _account,\\n        uint208 _amount,\\n        string memory _revertMessage,\\n        uint32 _currentTime\\n    )\\n        internal\\n        returns (\\n            AccountDetails memory accountDetails,\\n            ObservationLib.Observation memory twab,\\n            bool isNew\\n        )\\n    {\\n        AccountDetails memory _accountDetails = _account.details;\\n\\n        require(_accountDetails.balance >= _amount, _revertMessage);\\n\\n        (accountDetails, twab, isNew) = _nextTwab(_account.twabs, _accountDetails, _currentTime);\\n        unchecked {\\n            accountDetails.balance -= _amount;\\n        }\\n    }\\n\\n    /** @notice Calculates the average balance held by a user for a given time frame.\\n      * @dev    Finds the average balance between start and end timestamp epochs.\\n                Validates the supplied end time is within the range of elapsed time i.e. less then timestamp of now.\\n      * @param _twabs          Individual user Observation recorded checkpoints passed as storage pointer\\n      * @param _accountDetails User AccountDetails struct loaded in memory\\n      * @param _startTime      Start of timestamp range as an epoch\\n      * @param _endTime        End of timestamp range as an epoch\\n      * @param _currentTime    Block.timestamp\\n      * @return Average balance of user held between epoch timestamps start and end\\n    */\\n    function getAverageBalanceBetween(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _startTime,\\n        uint32 _endTime,\\n        uint32 _currentTime\\n    ) internal view returns (uint256) {\\n        uint32 endTime = _endTime > _currentTime ? _currentTime : _endTime;\\n\\n        return\\n            _getAverageBalanceBetween(_twabs, _accountDetails, _startTime, endTime, _currentTime);\\n    }\\n\\n    /// @notice Retrieves the oldest TWAB\\n    /// @param _twabs The storage array of twabs\\n    /// @param _accountDetails The TWAB account details\\n    /// @return index The index of the oldest TWAB in the twabs array\\n    /// @return twab The oldest TWAB\\n    function oldestTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails\\n    ) internal view returns (uint24 index, ObservationLib.Observation memory twab) {\\n        index = _accountDetails.nextTwabIndex;\\n        twab = _twabs[index];\\n\\n        // If the TWAB is not initialized we go to the beginning of the TWAB circular buffer at index 0\\n        if (twab.timestamp == 0) {\\n            index = 0;\\n            twab = _twabs[0];\\n        }\\n    }\\n\\n    /// @notice Retrieves the newest TWAB\\n    /// @param _twabs The storage array of twabs\\n    /// @param _accountDetails The TWAB account details\\n    /// @return index The index of the newest TWAB in the twabs array\\n    /// @return twab The newest TWAB\\n    function newestTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails\\n    ) internal view returns (uint24 index, ObservationLib.Observation memory twab) {\\n        index = uint24(RingBufferLib.newestIndex(_accountDetails.nextTwabIndex, MAX_CARDINALITY));\\n        twab = _twabs[index];\\n    }\\n\\n    /// @notice Retrieves amount at `_targetTime` timestamp\\n    /// @param _twabs List of TWABs to search through.\\n    /// @param _accountDetails Accounts details\\n    /// @param _targetTime Timestamp at which the reserved TWAB should be for.\\n    /// @return uint256 TWAB amount at `_targetTime`.\\n    function getBalanceAt(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _targetTime,\\n        uint32 _currentTime\\n    ) internal view returns (uint256) {\\n        uint32 timeToTarget = _targetTime > _currentTime ? _currentTime : _targetTime;\\n        return _getBalanceAt(_twabs, _accountDetails, timeToTarget, _currentTime);\\n    }\\n\\n    /// @notice Calculates the average balance held by a user for a given time frame.\\n    /// @param _startTime The start time of the time frame.\\n    /// @param _endTime The end time of the time frame.\\n    /// @return The average balance that the user held during the time frame.\\n    function _getAverageBalanceBetween(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _startTime,\\n        uint32 _endTime,\\n        uint32 _currentTime\\n    ) private view returns (uint256) {\\n        (uint24 oldestTwabIndex, ObservationLib.Observation memory oldTwab) = oldestTwab(\\n            _twabs,\\n            _accountDetails\\n        );\\n\\n        (uint24 newestTwabIndex, ObservationLib.Observation memory newTwab) = newestTwab(\\n            _twabs,\\n            _accountDetails\\n        );\\n\\n        ObservationLib.Observation memory startTwab = _calculateTwab(\\n            _twabs,\\n            _accountDetails,\\n            newTwab,\\n            oldTwab,\\n            newestTwabIndex,\\n            oldestTwabIndex,\\n            _startTime,\\n            _currentTime\\n        );\\n\\n        ObservationLib.Observation memory endTwab = _calculateTwab(\\n            _twabs,\\n            _accountDetails,\\n            newTwab,\\n            oldTwab,\\n            newestTwabIndex,\\n            oldestTwabIndex,\\n            _endTime,\\n            _currentTime\\n        );\\n\\n        // Difference in amount / time\\n        return (endTwab.amount - startTwab.amount) / OverflowSafeComparatorLib.checkedSub(endTwab.timestamp, startTwab.timestamp, _currentTime);\\n    }\\n\\n    /** @notice Searches TWAB history and calculate the difference between amount(s)/timestamp(s) to return average balance\\n                between the Observations closes to the supplied targetTime.\\n      * @param _twabs          Individual user Observation recorded checkpoints passed as storage pointer\\n      * @param _accountDetails User AccountDetails struct loaded in memory\\n      * @param _targetTime     Target timestamp to filter Observations in the ring buffer binary search\\n      * @param _currentTime    Block.timestamp\\n      * @return uint256 Time-weighted average amount between two closest observations.\\n    */\\n    function _getBalanceAt(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _targetTime,\\n        uint32 _currentTime\\n    ) private view returns (uint256) {\\n        uint24 newestTwabIndex;\\n        ObservationLib.Observation memory afterOrAt;\\n        ObservationLib.Observation memory beforeOrAt;\\n        (newestTwabIndex, beforeOrAt) = newestTwab(_twabs, _accountDetails);\\n\\n        // If `_targetTime` is chronologically after the newest TWAB, we can simply return the current balance\\n        if (beforeOrAt.timestamp.lte(_targetTime, _currentTime)) {\\n            return _accountDetails.balance;\\n        }\\n\\n        uint24 oldestTwabIndex;\\n        // Now, set before to the oldest TWAB\\n        (oldestTwabIndex, beforeOrAt) = oldestTwab(_twabs, _accountDetails);\\n\\n        // If `_targetTime` is chronologically before the oldest TWAB, we can early return\\n        if (_targetTime.lt(beforeOrAt.timestamp, _currentTime)) {\\n            return 0;\\n        }\\n\\n        // Otherwise, we perform the `binarySearch`\\n        (beforeOrAt, afterOrAt) = ObservationLib.binarySearch(\\n            _twabs,\\n            newestTwabIndex,\\n            oldestTwabIndex,\\n            _targetTime,\\n            _accountDetails.cardinality,\\n            _currentTime\\n        );\\n\\n        // Sum the difference in amounts and divide by the difference in timestamps.\\n        // The time-weighted average balance uses time measured between two epoch timestamps as\\n        // a constaint on the measurement when calculating the time weighted average balance.\\n        return\\n            (afterOrAt.amount - beforeOrAt.amount) / OverflowSafeComparatorLib.checkedSub(afterOrAt.timestamp, beforeOrAt.timestamp, _currentTime);\\n    }\\n\\n    /** @notice Calculates a user TWAB for a target timestamp using the historical TWAB records.\\n                The balance is linearly interpolated: amount differences / timestamp differences\\n                using the simple (after.amount - before.amount / end.timestamp - start.timestamp) formula.\\n    /** @dev    Binary search in _calculateTwab fails when searching out of bounds. Thus, before\\n                searching we exclude target timestamps out of range of newest/oldest TWAB(s).\\n                IF a search is before or after the range we \\\"extrapolate\\\" a Observation from the expected state.\\n      * @param _twabs           Individual user Observation recorded checkpoints passed as storage pointer\\n      * @param _accountDetails  User AccountDetails struct loaded in memory\\n      * @param _newestTwab      Newest TWAB in history (end of ring buffer)\\n      * @param _oldestTwab      Olderst TWAB in history (end of ring buffer)\\n      * @param _newestTwabIndex Pointer in ring buffer to newest TWAB\\n      * @param _oldestTwabIndex Pointer in ring buffer to oldest TWAB\\n      * @param _targetTimestamp Epoch timestamp to calculate for time (T) in the TWAB\\n      * @param _time            Block.timestamp\\n      * @return accountDetails Updated Account.details struct\\n    */\\n    function _calculateTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        ObservationLib.Observation memory _newestTwab,\\n        ObservationLib.Observation memory _oldestTwab,\\n        uint24 _newestTwabIndex,\\n        uint24 _oldestTwabIndex,\\n        uint32 _targetTimestamp,\\n        uint32 _time\\n    ) private view returns (ObservationLib.Observation memory) {\\n        // If `_targetTimestamp` is chronologically after the newest TWAB, we extrapolate a new one\\n        if (_newestTwab.timestamp.lt(_targetTimestamp, _time)) {\\n            return _computeNextTwab(_newestTwab, _accountDetails.balance, _targetTimestamp);\\n        }\\n\\n        if (_newestTwab.timestamp == _targetTimestamp) {\\n            return _newestTwab;\\n        }\\n\\n        if (_oldestTwab.timestamp == _targetTimestamp) {\\n            return _oldestTwab;\\n        }\\n\\n        // If `_targetTimestamp` is chronologically before the oldest TWAB, we create a zero twab\\n        if (_targetTimestamp.lt(_oldestTwab.timestamp, _time)) {\\n            return ObservationLib.Observation({ amount: 0, timestamp: _targetTimestamp });\\n        }\\n\\n        // Otherwise, both timestamps must be surrounded by twabs.\\n        (\\n            ObservationLib.Observation memory beforeOrAtStart,\\n            ObservationLib.Observation memory afterOrAtStart\\n        ) = ObservationLib.binarySearch(\\n                _twabs,\\n                _newestTwabIndex,\\n                _oldestTwabIndex,\\n                _targetTimestamp,\\n                _accountDetails.cardinality,\\n                _time\\n            );\\n\\n        uint224 heldBalance = (afterOrAtStart.amount - beforeOrAtStart.amount) /\\n            OverflowSafeComparatorLib.checkedSub(afterOrAtStart.timestamp, beforeOrAtStart.timestamp, _time);\\n\\n        return _computeNextTwab(beforeOrAtStart, heldBalance, _targetTimestamp);\\n    }\\n\\n    /**\\n     * @notice Calculates the next TWAB using the newestTwab and updated balance.\\n     * @dev    Storage of the TWAB obersation is managed by the calling function and not _computeNextTwab.\\n     * @param _currentTwab    Newest Observation in the Account.twabs list\\n     * @param _currentBalance User balance at time of most recent (newest) checkpoint write\\n     * @param _time           Current block.timestamp\\n     * @return TWAB Observation\\n     */\\n    function _computeNextTwab(\\n        ObservationLib.Observation memory _currentTwab,\\n        uint224 _currentBalance,\\n        uint32 _time\\n    ) private pure returns (ObservationLib.Observation memory) {\\n        // New twab amount = last twab amount (or zero) + (current amount * elapsed seconds)\\n        return\\n            ObservationLib.Observation({\\n                amount: _currentTwab.amount +\\n                    _currentBalance *\\n                    (_time.checkedSub(_currentTwab.timestamp, _time)),\\n                timestamp: _time\\n            });\\n    }\\n\\n    /// @notice Sets a new TWAB Observation at the next available index and returns the new account details.\\n    /// @dev Note that if _currentTime is before the last observation timestamp, it appears as an overflow\\n    /// @param _twabs The twabs array to insert into\\n    /// @param _accountDetails The current account details\\n    /// @param _currentTime The current time\\n    /// @return accountDetails The new account details\\n    /// @return twab The newest twab (may or may not be brand-new)\\n    /// @return isNew Whether the newest twab was created by this call\\n    function _nextTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _currentTime\\n    )\\n        private\\n        returns (\\n            AccountDetails memory accountDetails,\\n            ObservationLib.Observation memory twab,\\n            bool isNew\\n        )\\n    {\\n        (, ObservationLib.Observation memory _newestTwab) = newestTwab(_twabs, _accountDetails);\\n\\n        // if we're in the same block, return\\n        if (_newestTwab.timestamp == _currentTime) {\\n            return (_accountDetails, _newestTwab, false);\\n        }\\n\\n        ObservationLib.Observation memory newTwab = _computeNextTwab(\\n            _newestTwab,\\n            _accountDetails.balance,\\n            _currentTime\\n        );\\n\\n        _twabs[_accountDetails.nextTwabIndex] = newTwab;\\n\\n        AccountDetails memory nextAccountDetails = push(_accountDetails);\\n\\n        return (nextAccountDetails, newTwab, true);\\n    }\\n\\n    /// @notice \\\"Pushes\\\" a new element on the AccountDetails ring buffer, and returns the new AccountDetails\\n    /// @param _accountDetails The account details from which to pull the cardinality and next index\\n    /// @return The new AccountDetails\\n    function push(AccountDetails memory _accountDetails)\\n        internal\\n        pure\\n        returns (AccountDetails memory)\\n    {\\n        _accountDetails.nextTwabIndex = uint24(\\n            RingBufferLib.nextIndex(_accountDetails.nextTwabIndex, MAX_CARDINALITY)\\n        );\\n\\n        // Prevent the Account specific cardinality from exceeding the MAX_CARDINALITY.\\n        // The ring buffer length is limited by MAX_CARDINALITY. IF the account.cardinality\\n        // exceeds the max cardinality, new observations would be incorrectly set or the\\n        // observation would be out of \\\"bounds\\\" of the ring buffer. Once reached the\\n        // AccountDetails.cardinality will continue to be equal to max cardinality.\\n        if (_accountDetails.cardinality < MAX_CARDINALITY) {\\n            _accountDetails.cardinality += 1;\\n        }\\n\\n        return _accountDetails;\\n    }\\n}\\n\",\"keccak256\":\"0x446d8221329601d40464981a50a0e31f3fd48da0ebf0fea646c5a089ccfbdff4\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002962380380620029628339810160408190526200003491620001a6565b80620000408162000156565b506001600160a01b0381166200009d5760405162461bcd60e51b815260206004820152601960248201527f47432f6f776e65722d6e6f742d7a65726f2d616464726573730000000000000060448201526064015b60405180910390fd5b6001600160a01b038216620000f55760405162461bcd60e51b815260206004820152601960248201527f47432f746f6b656e2d6e6f742d7a65726f2d6164647265737300000000000000604482015260640162000094565b600380546001600160a01b0319166001600160a01b038481169182179092556040805191825291831660208201527f09e48df7857bd0c1e0d31bb8a85d42cf1874817895f171c917f6ee2cea73ec20910160405180910390a15050620001fe565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060408385031215620001ba57600080fd5b8251620001c781620001e5565b6020840151909250620001da81620001e5565b809150509250929050565b6001600160a01b0381168114620001fb57600080fd5b50565b612754806200020e6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806372c5921c116100f9578063d77cf90611610097578063ee37d5a011610071578063ee37d5a01461043f578063f2fde38b14610452578063fc0c546a14610465578063fd775c541461047857600080fd5b8063d77cf906146103e9578063dd14d961146103fc578063e30c39781461042e57600080fd5b80639da882ac116100d35780639da882ac1461036c578063aa79979b1461037f578063b14c6986146103c3578063d0ebdbe7146103d657600080fd5b806372c5921c1461033557806378fa672e146103485780638da5cb5b1461035b57600080fd5b806347e7ef24116101665780634e71e0c8116101405780634e71e0c8146102ff57806362b3fdd214610307578063638ca48f1461031a578063715018a61461032d57600080fd5b806347e7ef24146102b4578063481c6a75146102c75780634b0ad1cb146102ec57600080fd5b806327e235e3116101a257806327e235e3146102595780632e1a7d4d146102795780633a0451451461028e5780633c72026e146102a157600080fd5b80630700037d146101c9578063117d37e6146101fc5780632249fd721461022e575b600080fd5b6101e96101d7366004612389565b60076020526000908152604090205481565b6040519081526020015b60405180910390f35b6101e961020a366004612389565b6001600160a01b03166000908152600860205260409020546001600160d01b031690565b6101e961023c3660046123a6565b600660209081526000928352604080842090915290825290205481565b6101e9610267366004612389565b60056020526000908152604090205481565b61028c610287366004612462565b61048b565b005b61028c61029c366004612389565b610585565b6101e96102af36600461240b565b610748565b61028c6102c23660046123df565b61075f565b6002546001600160a01b03165b6040516001600160a01b0390911681526020016101f3565b61028c6102fa3660046123df565b610869565b61028c610b0a565b61028c6103153660046123df565b610b98565b6101e961032836600461240b565b610dc4565b61028c610e0a565b6101e961034336600461240b565b610e7f565b6101e96103563660046123a6565b610e8c565b6000546001600160a01b03166102d4565b61028c61037a366004612389565b610eb9565b6103b361038d366004612389565b6001600160a01b03166000908152600960205260409020546001600160d01b0316151590565b60405190151581526020016101f3565b61028c6103d13660046123df565b610f37565b6103b36103e4366004612389565b610fae565b61028c6103f7366004612389565b611022565b6101e961040a366004612389565b6001600160a01b03166000908152600960205260409020546001600160d01b031690565b6001546001600160a01b03166102d4565b6004546102d4906001600160a01b031681565b61028c610460366004612389565b61118c565b6003546102d4906001600160a01b031681565b61028c6104863660046123df565b6112c8565b33600090815260056020526040812080548392906104aa90849061267f565b90915550506003546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b15801561051457600080fd5b505af1158015610528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054c9190612440565b5060405181815233907fa2bd9fcfcdba69f52bcd9a520846ad4bd685b187483f53efc42d035b2ddebff09060200160405180910390a250565b336105986000546001600160a01b031690565b6001600160a01b0316146105f35760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e6572000000000000000060448201526064015b60405180910390fd5b6001600160a01b038116600090815260096020908152604091829020825160608101845281546001600160d01b03811680835262ffffff600160d01b8304811684870152600160e81b909204909116828601528451808601909552600685527f696e737566660000000000000000000000000000000000000000000000000000938501939093529092909161068b9184919042611522565b50508051835460208301516040808501516001600160d01b039094167fffffff000000000000000000000000000000000000000000000000000000000090931692909217600160d01b62ffffff92831602177cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e81b9190931602919091178455519091506001600160a01b0384169033907fb292ea5ac65065e4436de384d50dcda417525b8af35e31511489f7f72d56845e90600090a3505050565b60006107558484846115e6565b90505b9392505050565b6001600160a01b03821660009081526005602052604081208054839290610787908490612559565b90915550506003546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b1580156107f757600080fd5b505af115801561080b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082f9190612440565b5060405181815233907fbc7c8a4d8049a3f99a02f2a20640c206a2e4d3f2fa54fd20da9f01fda3620cda9060200160405180910390a25050565b81610894816001600160a01b03166000908152600960205260409020546001600160d01b0316151590565b6108e05760405162461bcd60e51b815260206004820152601f60248201527f4761756765436f6e74726f6c6c65723a696e76616c69642d616464726573730060448201526064016105ea565b33600090815260056020526040812080548492906108ff908490612559565b90915550503360009081526006602090815260408083206001600160a01b03871684529091528120805484929061093790849061267f565b90915550506001600160a01b03831660009081526008602052604081209061099e8261096286611659565b6040518060400160405280600681526020017f696e73756666000000000000000000000000000000000000000000000000000081525042611522565b505080518354602083015160408401516001600160d01b039093167fffffff00000000000000000000000000000000000000000000000000000000009092168217600160d01b62ffffff92831602177cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e81b91909316029190911784556004549192506001600160a01b039091169063316619309087903390610a43908990612559565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610aaa57600080fd5b505af1158015610abe573d6000803e3d6000fd5b50506040518681526001600160a01b03881692503391507f987edcc82da553803c4fff2a9b4a36d93b87520c65705d63ac3a25976f89ad53906020015b60405180910390a35050505050565b6001546001600160a01b03163314610b645760405162461bcd60e51b815260206004820152601f60248201527f4f776e61626c652f63616c6c65722d6e6f742d70656e64696e674f776e65720060448201526064016105ea565b600154610b79906001600160a01b03166116dc565b6001805473ffffffffffffffffffffffffffffffffffffffff19169055565b33610bab6002546001600160a01b031690565b6001600160a01b03161480610bd9575033610bce6000546001600160a01b031690565b6001600160a01b0316145b610c4b5760405162461bcd60e51b815260206004820152602660248201527f4d616e61676561626c652f63616c6c65722d6e6f742d6d616e616765722d6f7260448201527f2d6f776e6572000000000000000000000000000000000000000000000000000060648201526084016105ea565b6001600160a01b038216600090815260096020908152604091829020825160608101845281546001600160d01b03811680835262ffffff600160d01b8304811695840195909552600160e81b909104909316938101939093529190831015610cd157610cc682610cba85611659565b83516109629190612637565b50909150610cf99050565b610cf3828260000151610ce386611659565b610ced9190612637565b42611739565b50909150505b805182546020808401516040808601516001600160d01b039095167fffffff00000000000000000000000000000000000000000000000000000000009094168417600160d01b62ffffff93841602177cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e81b92909516919091029390931785558251868152908101919091526001600160a01b0386169133917fb61b951b4b5e3996dc9f57d4087ea13da4090be5c668e01345b9bec393c19f23910160405180910390a350505050565b600080610dd28585856117e2565b90506000610de18686866115e6565b9050670de0b6b3a7640000610df682846125fa565b610e0091906125b7565b9695505050505050565b33610e1d6000546001600160a01b031690565b6001600160a01b031614610e735760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e6572000000000000000060448201526064016105ea565b610e7d60006116dc565b565b60006107558484846117e2565b6001600160a01b038082166000908152600660209081526040808320938616835292905220545b92915050565b33610ecc6000546001600160a01b031690565b6001600160a01b031614610f225760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e6572000000000000000060448201526064016105ea565b610f3481670de0b6b3a764000061184c565b50565b33610f4a6000546001600160a01b031690565b6001600160a01b031614610fa05760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e6572000000000000000060448201526064016105ea565b610faa828261184c565b5050565b600033610fc36000546001600160a01b031690565b6001600160a01b0316146110195760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e6572000000000000000060448201526064016105ea565b610eb382611937565b336110356002546001600160a01b031690565b6001600160a01b031614806110635750336110586000546001600160a01b031690565b6001600160a01b0316145b6110d55760405162461bcd60e51b815260206004820152602660248201527f4d616e61676561626c652f63616c6c65722d6e6f742d6d616e616765722d6f7260448201527f2d6f776e6572000000000000000000000000000000000000000000000000000060648201526084016105ea565b6001600160a01b03811661112b5760405162461bcd60e51b815260206004820152601f60248201527f47432f47617567655265776172642d6e6f742d7a65726f2d616464726573730060448201526064016105ea565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fc9436864b28e4bdede75d52a3d281101b91830fd91f9bc698dfde6048a7726609060200160405180910390a150565b3361119f6000546001600160a01b031690565b6001600160a01b0316146111f55760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e6572000000000000000060448201526064016105ea565b6001600160a01b0381166112715760405162461bcd60e51b815260206004820152602560248201527f4f776e61626c652f70656e64696e674f776e65722d6e6f742d7a65726f2d616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016105ea565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f239a2ddded15777fa246aed5f7e1a9bc69a39d4eb4a397034d1d85766cca7d4c90600090a250565b816112f3816001600160a01b03166000908152600960205260409020546001600160d01b0316151590565b61133f5760405162461bcd60e51b815260206004820152601f60248201527f4761756765436f6e74726f6c6c65723a696e76616c69642d616464726573730060448201526064016105ea565b336000908152600560205260408120805484929061135e90849061267f565b90915550503360009081526006602090815260408083206001600160a01b038716845290915281208054849290611396908490612559565b90915550506001600160a01b0383166000908152600860205260408120906113c182610ced86611659565b505080518354602083015160408401516001600160d01b039093167fffffff00000000000000000000000000000000000000000000000000000000009092168217600160d01b62ffffff92831602177cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e81b91909316029190911784556004549192506001600160a01b03909116906395cebcd4908790339061146690899061267f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b1580156114cd57600080fd5b505af11580156114e1573d6000803e3d6000fd5b50506040518681526001600160a01b03881692503391507fb8e0282e42bb26bb33cd874ef92cc0f28e322eb79622c358f445f8d9863b7f3f90602001610afb565b604080516060810182526000808252602082018190529181019190915260408051808201909152600080825260208201526040805160608101825287546001600160d01b0380821680845262ffffff600160d01b840481166020860152600160e81b90930490921693830193909352600092879190891611156115b85760405162461bcd60e51b81526004016105ea919061247b565b506115c7886001018287611a23565b8251999099036001600160d01b03168252909990985095505050505050565b6001600160a01b0383166000818152600960208181526040808420815160608101835281546001600160d01b038116825262ffffff600160d01b8204811683870152600160e81b909104169281019290925294845291905290916116509060010182868642611b0a565b95945050505050565b60006001600160d01b038211156116d85760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f303820626974730000000000000000000000000000000000000000000000000060648201526084016105ea565b5090565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080516060810182526000808252602082018190529181019190915260408051808201909152600080825260208201526040805160608101825286546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b90910416918101919091526000906117b5600188018287611a23565b835192965090945092506117ca9087906124ee565b6001600160d01b031684525091959094509092509050565b6001600160a01b0383166000818152600860208181526040808420815160608101835281546001600160d01b038116825262ffffff600160d01b8204811683870152600160e81b909104169281019290925294845291905290916116509060010182868642611b0a565b6001600160a01b03821660009081526009602052604081209061187282610ced85611659565b5050805183546020808401516040808601516001600160d01b039095167fffffff000000000000000000000000000000000000000000000000000000000090941693909317600160d01b62ffffff92831602177cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e81b9190941602929092178555516001600160a01b038716815291925033917f30f76c775008e3e7351fdc109cbad6654f319035c83d92e5b0701c563bf15489910160405180910390a250505050565b6002546000906001600160a01b039081169083168114156119c05760405162461bcd60e51b815260206004820152602360248201527f4d616e61676561626c652f6578697374696e672d6d616e616765722d6164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016105ea565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385811691821790925560405190918316907f9cb45c728de594dab506a1f1a8554e24c8eeaf983618d5ec5dd7bc6f3c49feee90600090a350600192915050565b60408051606081018252600080825260208201819052918101919091526040805180820190915260008082526020820152600080611a618787611b42565b9150508463ffffffff16816020015163ffffffff161415611a8a57859350915060009050611b01565b6000611aa48288600001516001600160d01b031688611bc2565b90508088886020015162ffffff1662ffffff8110611ac457611ac46126f3565b825160209093015163ffffffff16600160e01b026001600160e01b03909316929092179101556000611af588611c3d565b95509093506001925050505b93509350939050565b6000808263ffffffff168463ffffffff1611611b265783611b28565b825b9050611b378787878487611ca5565b979650505050505050565b6040805180820190915260008082526020820181905290611b71836020015162ffffff1662ffffff8016611d41565b9150838262ffffff1662ffffff8110611b8c57611b8c6126f3565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff166020820152919491935090915050565b60408051808201909152600080825260208201526040518060400160405280611c008660200151858663ffffffff16611d6f9092919063ffffffff16565b611c109063ffffffff16866125cb565b8651611c1c9190612519565b6001600160e01b031681526020018363ffffffff1681525090509392505050565b60408051606081018252600080825260208083018290529282015290820151611c6d9062ffffff90811690611e39565b62ffffff90811660208401526040830151811610156116d857600182604001818151611c99919061253b565b62ffffff169052505090565b6000806000611cb48888611e49565b91509150600080611cc58a8a611b42565b915091506000611cdb8b8b8487878a8f8e611ec6565b90506000611cef8c8c8588888b8f8f611ec6565b9050611d04816020015183602001518a611d6f565b63ffffffff1682600001518260000151611d1e919061265f565b611d289190612591565b6001600160e01b03169c9b505050505050505050505050565b600081611d5057506000610eb3565b6107586001611d5f8486612559565b611d69919061267f565b83612010565b60008163ffffffff168463ffffffff1611158015611d9957508163ffffffff168363ffffffff1611155b15611daf57611da88385612696565b9050610758565b60008263ffffffff168563ffffffff1611611dde57611dd963ffffffff8616640100000000612571565b611de6565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff1611611e1e57611e1963ffffffff8616640100000000612571565b611e26565b8463ffffffff165b64ffffffffff169050610e00818361267f565b6000610758611d69846001612559565b604080518082019091526000808252602082018190529082602001519150838262ffffff1662ffffff8110611e8057611e806126f3565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff1660208201819052909150611ebf57600091508382611b8c565b9250929050565b6040805180820190915260008082526020820152611ef98383896020015163ffffffff1661201c9092919063ffffffff16565b15611f1d57611f168789600001516001600160d01b031685611bc2565b9050612004565b8263ffffffff16876020015163ffffffff161415611f3c575085612004565b8263ffffffff16866020015163ffffffff161415611f5b575084612004565b611f7a8660200151838563ffffffff1661201c9092919063ffffffff16565b15611f9f5750604080518082019091526000815263ffffffff83166020820152612004565b600080611fb48b8888888e60400151896120eb565b915091506000611fcd8260200151846020015187611d6f565b63ffffffff1683600001518360000151611fe7919061265f565b611ff19190612591565b9050611ffe838288611bc2565b93505050505b98975050505050505050565b600061075882846126b3565b60008163ffffffff168463ffffffff161115801561204657508163ffffffff168363ffffffff1611155b15612061578263ffffffff168463ffffffff16109050610758565b60008263ffffffff168563ffffffff16116120905761208b63ffffffff8616640100000000612571565b612098565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116120d0576120cb63ffffffff8616640100000000612571565b6120d8565b8463ffffffff165b64ffffffffff1690911095945050505050565b6040805180820190915260008082526020820152604080518082019091526000808252602082015260008662ffffff1690506000818962ffffff1610612136578862ffffff16612151565b600161214762ffffff881684612559565b612151919061267f565b905060005b60026121628385612559565b61216c91906125b7565b90508a61217e828962ffffff16612010565b62ffffff1662ffffff8110612195576121956126f3565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff1660208201819052909550806121dd576121d5826001612559565b935050612156565b8b6121ed838a62ffffff16611e39565b62ffffff1662ffffff8110612204576122046126f3565b604080518082019091529101546001600160e01b038116825263ffffffff600160e01b9091048116602083015290955060009061224990838116908c908b906122b816565b905080801561227257506122728660200151898c63ffffffff166122b89092919063ffffffff16565b1561227e5750506122aa565b806122955761228e60018461267f565b93506122a3565b6122a0836001612559565b94505b5050612156565b505050965096945050505050565b60008163ffffffff168463ffffffff16111580156122e257508163ffffffff168363ffffffff1611155b156122fe578263ffffffff168463ffffffff1611159050610758565b60008263ffffffff168563ffffffff161161232d5761232863ffffffff8616640100000000612571565b612335565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff161161236d5761236863ffffffff8616640100000000612571565b612375565b8463ffffffff165b64ffffffffff169091111595945050505050565b60006020828403121561239b57600080fd5b813561075881612709565b600080604083850312156123b957600080fd5b82356123c481612709565b915060208301356123d481612709565b809150509250929050565b600080604083850312156123f257600080fd5b82356123fd81612709565b946020939093013593505050565b60008060006060848603121561242057600080fd5b833561242b81612709565b95602085013595506040909401359392505050565b60006020828403121561245257600080fd5b8151801515811461075857600080fd5b60006020828403121561247457600080fd5b5035919050565b600060208083528351808285015260005b818110156124a85785810183015185820160400152820161248c565b818111156124ba576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60006001600160d01b03808316818516808303821115612510576125106126c7565b01949350505050565b60006001600160e01b03808316818516808303821115612510576125106126c7565b600062ffffff808316818516808303821115612510576125106126c7565b6000821982111561256c5761256c6126c7565b500190565b600064ffffffffff808316818516808303821115612510576125106126c7565b60006001600160e01b03808416806125ab576125ab6126dd565b92169190910492915050565b6000826125c6576125c66126dd565b500490565b60006001600160e01b03808316818516818304811182151516156125f1576125f16126c7565b02949350505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612632576126326126c7565b500290565b60006001600160d01b0383811690831681811015612657576126576126c7565b039392505050565b60006001600160e01b0383811690831681811015612657576126576126c7565b600082821015612691576126916126c7565b500390565b600063ffffffff83811690831681811015612657576126576126c7565b6000826126c2576126c26126dd565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0381168114610f3457600080fdfea2646970667358221220fa88e2021082623c3a8e8e7880cb937a0b51c3683261de9c2335127a41b8e2ea64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c806372c5921c116100f9578063d77cf90611610097578063ee37d5a011610071578063ee37d5a01461043f578063f2fde38b14610452578063fc0c546a14610465578063fd775c541461047857600080fd5b8063d77cf906146103e9578063dd14d961146103fc578063e30c39781461042e57600080fd5b80639da882ac116100d35780639da882ac1461036c578063aa79979b1461037f578063b14c6986146103c3578063d0ebdbe7146103d657600080fd5b806372c5921c1461033557806378fa672e146103485780638da5cb5b1461035b57600080fd5b806347e7ef24116101665780634e71e0c8116101405780634e71e0c8146102ff57806362b3fdd214610307578063638ca48f1461031a578063715018a61461032d57600080fd5b806347e7ef24146102b4578063481c6a75146102c75780634b0ad1cb146102ec57600080fd5b806327e235e3116101a257806327e235e3146102595780632e1a7d4d146102795780633a0451451461028e5780633c72026e146102a157600080fd5b80630700037d146101c9578063117d37e6146101fc5780632249fd721461022e575b600080fd5b6101e96101d7366004612389565b60076020526000908152604090205481565b6040519081526020015b60405180910390f35b6101e961020a366004612389565b6001600160a01b03166000908152600860205260409020546001600160d01b031690565b6101e961023c3660046123a6565b600660209081526000928352604080842090915290825290205481565b6101e9610267366004612389565b60056020526000908152604090205481565b61028c610287366004612462565b61048b565b005b61028c61029c366004612389565b610585565b6101e96102af36600461240b565b610748565b61028c6102c23660046123df565b61075f565b6002546001600160a01b03165b6040516001600160a01b0390911681526020016101f3565b61028c6102fa3660046123df565b610869565b61028c610b0a565b61028c6103153660046123df565b610b98565b6101e961032836600461240b565b610dc4565b61028c610e0a565b6101e961034336600461240b565b610e7f565b6101e96103563660046123a6565b610e8c565b6000546001600160a01b03166102d4565b61028c61037a366004612389565b610eb9565b6103b361038d366004612389565b6001600160a01b03166000908152600960205260409020546001600160d01b0316151590565b60405190151581526020016101f3565b61028c6103d13660046123df565b610f37565b6103b36103e4366004612389565b610fae565b61028c6103f7366004612389565b611022565b6101e961040a366004612389565b6001600160a01b03166000908152600960205260409020546001600160d01b031690565b6001546001600160a01b03166102d4565b6004546102d4906001600160a01b031681565b61028c610460366004612389565b61118c565b6003546102d4906001600160a01b031681565b61028c6104863660046123df565b6112c8565b33600090815260056020526040812080548392906104aa90849061267f565b90915550506003546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b15801561051457600080fd5b505af1158015610528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054c9190612440565b5060405181815233907fa2bd9fcfcdba69f52bcd9a520846ad4bd685b187483f53efc42d035b2ddebff09060200160405180910390a250565b336105986000546001600160a01b031690565b6001600160a01b0316146105f35760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e6572000000000000000060448201526064015b60405180910390fd5b6001600160a01b038116600090815260096020908152604091829020825160608101845281546001600160d01b03811680835262ffffff600160d01b8304811684870152600160e81b909204909116828601528451808601909552600685527f696e737566660000000000000000000000000000000000000000000000000000938501939093529092909161068b9184919042611522565b50508051835460208301516040808501516001600160d01b039094167fffffff000000000000000000000000000000000000000000000000000000000090931692909217600160d01b62ffffff92831602177cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e81b9190931602919091178455519091506001600160a01b0384169033907fb292ea5ac65065e4436de384d50dcda417525b8af35e31511489f7f72d56845e90600090a3505050565b60006107558484846115e6565b90505b9392505050565b6001600160a01b03821660009081526005602052604081208054839290610787908490612559565b90915550506003546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b1580156107f757600080fd5b505af115801561080b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082f9190612440565b5060405181815233907fbc7c8a4d8049a3f99a02f2a20640c206a2e4d3f2fa54fd20da9f01fda3620cda9060200160405180910390a25050565b81610894816001600160a01b03166000908152600960205260409020546001600160d01b0316151590565b6108e05760405162461bcd60e51b815260206004820152601f60248201527f4761756765436f6e74726f6c6c65723a696e76616c69642d616464726573730060448201526064016105ea565b33600090815260056020526040812080548492906108ff908490612559565b90915550503360009081526006602090815260408083206001600160a01b03871684529091528120805484929061093790849061267f565b90915550506001600160a01b03831660009081526008602052604081209061099e8261096286611659565b6040518060400160405280600681526020017f696e73756666000000000000000000000000000000000000000000000000000081525042611522565b505080518354602083015160408401516001600160d01b039093167fffffff00000000000000000000000000000000000000000000000000000000009092168217600160d01b62ffffff92831602177cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e81b91909316029190911784556004549192506001600160a01b039091169063316619309087903390610a43908990612559565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610aaa57600080fd5b505af1158015610abe573d6000803e3d6000fd5b50506040518681526001600160a01b03881692503391507f987edcc82da553803c4fff2a9b4a36d93b87520c65705d63ac3a25976f89ad53906020015b60405180910390a35050505050565b6001546001600160a01b03163314610b645760405162461bcd60e51b815260206004820152601f60248201527f4f776e61626c652f63616c6c65722d6e6f742d70656e64696e674f776e65720060448201526064016105ea565b600154610b79906001600160a01b03166116dc565b6001805473ffffffffffffffffffffffffffffffffffffffff19169055565b33610bab6002546001600160a01b031690565b6001600160a01b03161480610bd9575033610bce6000546001600160a01b031690565b6001600160a01b0316145b610c4b5760405162461bcd60e51b815260206004820152602660248201527f4d616e61676561626c652f63616c6c65722d6e6f742d6d616e616765722d6f7260448201527f2d6f776e6572000000000000000000000000000000000000000000000000000060648201526084016105ea565b6001600160a01b038216600090815260096020908152604091829020825160608101845281546001600160d01b03811680835262ffffff600160d01b8304811695840195909552600160e81b909104909316938101939093529190831015610cd157610cc682610cba85611659565b83516109629190612637565b50909150610cf99050565b610cf3828260000151610ce386611659565b610ced9190612637565b42611739565b50909150505b805182546020808401516040808601516001600160d01b039095167fffffff00000000000000000000000000000000000000000000000000000000009094168417600160d01b62ffffff93841602177cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e81b92909516919091029390931785558251868152908101919091526001600160a01b0386169133917fb61b951b4b5e3996dc9f57d4087ea13da4090be5c668e01345b9bec393c19f23910160405180910390a350505050565b600080610dd28585856117e2565b90506000610de18686866115e6565b9050670de0b6b3a7640000610df682846125fa565b610e0091906125b7565b9695505050505050565b33610e1d6000546001600160a01b031690565b6001600160a01b031614610e735760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e6572000000000000000060448201526064016105ea565b610e7d60006116dc565b565b60006107558484846117e2565b6001600160a01b038082166000908152600660209081526040808320938616835292905220545b92915050565b33610ecc6000546001600160a01b031690565b6001600160a01b031614610f225760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e6572000000000000000060448201526064016105ea565b610f3481670de0b6b3a764000061184c565b50565b33610f4a6000546001600160a01b031690565b6001600160a01b031614610fa05760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e6572000000000000000060448201526064016105ea565b610faa828261184c565b5050565b600033610fc36000546001600160a01b031690565b6001600160a01b0316146110195760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e6572000000000000000060448201526064016105ea565b610eb382611937565b336110356002546001600160a01b031690565b6001600160a01b031614806110635750336110586000546001600160a01b031690565b6001600160a01b0316145b6110d55760405162461bcd60e51b815260206004820152602660248201527f4d616e61676561626c652f63616c6c65722d6e6f742d6d616e616765722d6f7260448201527f2d6f776e6572000000000000000000000000000000000000000000000000000060648201526084016105ea565b6001600160a01b03811661112b5760405162461bcd60e51b815260206004820152601f60248201527f47432f47617567655265776172642d6e6f742d7a65726f2d616464726573730060448201526064016105ea565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fc9436864b28e4bdede75d52a3d281101b91830fd91f9bc698dfde6048a7726609060200160405180910390a150565b3361119f6000546001600160a01b031690565b6001600160a01b0316146111f55760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e6572000000000000000060448201526064016105ea565b6001600160a01b0381166112715760405162461bcd60e51b815260206004820152602560248201527f4f776e61626c652f70656e64696e674f776e65722d6e6f742d7a65726f2d616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016105ea565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f239a2ddded15777fa246aed5f7e1a9bc69a39d4eb4a397034d1d85766cca7d4c90600090a250565b816112f3816001600160a01b03166000908152600960205260409020546001600160d01b0316151590565b61133f5760405162461bcd60e51b815260206004820152601f60248201527f4761756765436f6e74726f6c6c65723a696e76616c69642d616464726573730060448201526064016105ea565b336000908152600560205260408120805484929061135e90849061267f565b90915550503360009081526006602090815260408083206001600160a01b038716845290915281208054849290611396908490612559565b90915550506001600160a01b0383166000908152600860205260408120906113c182610ced86611659565b505080518354602083015160408401516001600160d01b039093167fffffff00000000000000000000000000000000000000000000000000000000009092168217600160d01b62ffffff92831602177cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e81b91909316029190911784556004549192506001600160a01b03909116906395cebcd4908790339061146690899061267f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b1580156114cd57600080fd5b505af11580156114e1573d6000803e3d6000fd5b50506040518681526001600160a01b03881692503391507fb8e0282e42bb26bb33cd874ef92cc0f28e322eb79622c358f445f8d9863b7f3f90602001610afb565b604080516060810182526000808252602082018190529181019190915260408051808201909152600080825260208201526040805160608101825287546001600160d01b0380821680845262ffffff600160d01b840481166020860152600160e81b90930490921693830193909352600092879190891611156115b85760405162461bcd60e51b81526004016105ea919061247b565b506115c7886001018287611a23565b8251999099036001600160d01b03168252909990985095505050505050565b6001600160a01b0383166000818152600960208181526040808420815160608101835281546001600160d01b038116825262ffffff600160d01b8204811683870152600160e81b909104169281019290925294845291905290916116509060010182868642611b0a565b95945050505050565b60006001600160d01b038211156116d85760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f303820626974730000000000000000000000000000000000000000000000000060648201526084016105ea565b5090565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080516060810182526000808252602082018190529181019190915260408051808201909152600080825260208201526040805160608101825286546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b90910416918101919091526000906117b5600188018287611a23565b835192965090945092506117ca9087906124ee565b6001600160d01b031684525091959094509092509050565b6001600160a01b0383166000818152600860208181526040808420815160608101835281546001600160d01b038116825262ffffff600160d01b8204811683870152600160e81b909104169281019290925294845291905290916116509060010182868642611b0a565b6001600160a01b03821660009081526009602052604081209061187282610ced85611659565b5050805183546020808401516040808601516001600160d01b039095167fffffff000000000000000000000000000000000000000000000000000000000090941693909317600160d01b62ffffff92831602177cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e81b9190941602929092178555516001600160a01b038716815291925033917f30f76c775008e3e7351fdc109cbad6654f319035c83d92e5b0701c563bf15489910160405180910390a250505050565b6002546000906001600160a01b039081169083168114156119c05760405162461bcd60e51b815260206004820152602360248201527f4d616e61676561626c652f6578697374696e672d6d616e616765722d6164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016105ea565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385811691821790925560405190918316907f9cb45c728de594dab506a1f1a8554e24c8eeaf983618d5ec5dd7bc6f3c49feee90600090a350600192915050565b60408051606081018252600080825260208201819052918101919091526040805180820190915260008082526020820152600080611a618787611b42565b9150508463ffffffff16816020015163ffffffff161415611a8a57859350915060009050611b01565b6000611aa48288600001516001600160d01b031688611bc2565b90508088886020015162ffffff1662ffffff8110611ac457611ac46126f3565b825160209093015163ffffffff16600160e01b026001600160e01b03909316929092179101556000611af588611c3d565b95509093506001925050505b93509350939050565b6000808263ffffffff168463ffffffff1611611b265783611b28565b825b9050611b378787878487611ca5565b979650505050505050565b6040805180820190915260008082526020820181905290611b71836020015162ffffff1662ffffff8016611d41565b9150838262ffffff1662ffffff8110611b8c57611b8c6126f3565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff166020820152919491935090915050565b60408051808201909152600080825260208201526040518060400160405280611c008660200151858663ffffffff16611d6f9092919063ffffffff16565b611c109063ffffffff16866125cb565b8651611c1c9190612519565b6001600160e01b031681526020018363ffffffff1681525090509392505050565b60408051606081018252600080825260208083018290529282015290820151611c6d9062ffffff90811690611e39565b62ffffff90811660208401526040830151811610156116d857600182604001818151611c99919061253b565b62ffffff169052505090565b6000806000611cb48888611e49565b91509150600080611cc58a8a611b42565b915091506000611cdb8b8b8487878a8f8e611ec6565b90506000611cef8c8c8588888b8f8f611ec6565b9050611d04816020015183602001518a611d6f565b63ffffffff1682600001518260000151611d1e919061265f565b611d289190612591565b6001600160e01b03169c9b505050505050505050505050565b600081611d5057506000610eb3565b6107586001611d5f8486612559565b611d69919061267f565b83612010565b60008163ffffffff168463ffffffff1611158015611d9957508163ffffffff168363ffffffff1611155b15611daf57611da88385612696565b9050610758565b60008263ffffffff168563ffffffff1611611dde57611dd963ffffffff8616640100000000612571565b611de6565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff1611611e1e57611e1963ffffffff8616640100000000612571565b611e26565b8463ffffffff165b64ffffffffff169050610e00818361267f565b6000610758611d69846001612559565b604080518082019091526000808252602082018190529082602001519150838262ffffff1662ffffff8110611e8057611e806126f3565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff1660208201819052909150611ebf57600091508382611b8c565b9250929050565b6040805180820190915260008082526020820152611ef98383896020015163ffffffff1661201c9092919063ffffffff16565b15611f1d57611f168789600001516001600160d01b031685611bc2565b9050612004565b8263ffffffff16876020015163ffffffff161415611f3c575085612004565b8263ffffffff16866020015163ffffffff161415611f5b575084612004565b611f7a8660200151838563ffffffff1661201c9092919063ffffffff16565b15611f9f5750604080518082019091526000815263ffffffff83166020820152612004565b600080611fb48b8888888e60400151896120eb565b915091506000611fcd8260200151846020015187611d6f565b63ffffffff1683600001518360000151611fe7919061265f565b611ff19190612591565b9050611ffe838288611bc2565b93505050505b98975050505050505050565b600061075882846126b3565b60008163ffffffff168463ffffffff161115801561204657508163ffffffff168363ffffffff1611155b15612061578263ffffffff168463ffffffff16109050610758565b60008263ffffffff168563ffffffff16116120905761208b63ffffffff8616640100000000612571565b612098565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116120d0576120cb63ffffffff8616640100000000612571565b6120d8565b8463ffffffff165b64ffffffffff1690911095945050505050565b6040805180820190915260008082526020820152604080518082019091526000808252602082015260008662ffffff1690506000818962ffffff1610612136578862ffffff16612151565b600161214762ffffff881684612559565b612151919061267f565b905060005b60026121628385612559565b61216c91906125b7565b90508a61217e828962ffffff16612010565b62ffffff1662ffffff8110612195576121956126f3565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff1660208201819052909550806121dd576121d5826001612559565b935050612156565b8b6121ed838a62ffffff16611e39565b62ffffff1662ffffff8110612204576122046126f3565b604080518082019091529101546001600160e01b038116825263ffffffff600160e01b9091048116602083015290955060009061224990838116908c908b906122b816565b905080801561227257506122728660200151898c63ffffffff166122b89092919063ffffffff16565b1561227e5750506122aa565b806122955761228e60018461267f565b93506122a3565b6122a0836001612559565b94505b5050612156565b505050965096945050505050565b60008163ffffffff168463ffffffff16111580156122e257508163ffffffff168363ffffffff1611155b156122fe578263ffffffff168463ffffffff1611159050610758565b60008263ffffffff168563ffffffff161161232d5761232863ffffffff8616640100000000612571565b612335565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff161161236d5761236863ffffffff8616640100000000612571565b612375565b8463ffffffff165b64ffffffffff169091111595945050505050565b60006020828403121561239b57600080fd5b813561075881612709565b600080604083850312156123b957600080fd5b82356123c481612709565b915060208301356123d481612709565b809150509250929050565b600080604083850312156123f257600080fd5b82356123fd81612709565b946020939093013593505050565b60008060006060848603121561242057600080fd5b833561242b81612709565b95602085013595506040909401359392505050565b60006020828403121561245257600080fd5b8151801515811461075857600080fd5b60006020828403121561247457600080fd5b5035919050565b600060208083528351808285015260005b818110156124a85785810183015185820160400152820161248c565b818111156124ba576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60006001600160d01b03808316818516808303821115612510576125106126c7565b01949350505050565b60006001600160e01b03808316818516808303821115612510576125106126c7565b600062ffffff808316818516808303821115612510576125106126c7565b6000821982111561256c5761256c6126c7565b500190565b600064ffffffffff808316818516808303821115612510576125106126c7565b60006001600160e01b03808416806125ab576125ab6126dd565b92169190910492915050565b6000826125c6576125c66126dd565b500490565b60006001600160e01b03808316818516818304811182151516156125f1576125f16126c7565b02949350505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612632576126326126c7565b500290565b60006001600160d01b0383811690831681811015612657576126576126c7565b039392505050565b60006001600160e01b0383811690831681811015612657576126576126c7565b600082821015612691576126916126c7565b500390565b600063ffffffff83811690831681811015612657576126576126c7565b6000826126c2576126c26126dd565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0381168114610f3457600080fdfea2646970667358221220fa88e2021082623c3a8e8e7880cb937a0b51c3683261de9c2335127a41b8e2ea64736f6c63430008060033",
  "devdoc": {
    "events": {
      "Deployed(address,address)": {
        "params": {
          "owner": "Address of the contract owner",
          "token": "Address of the token being staked in the gauge"
        }
      },
      "GaugeAdded(address,address)": {
        "params": {
          "gauge": "New Gauge address",
          "user": "Authorized address"
        }
      },
      "GaugeDecreased(address,address,uint256)": {
        "params": {
          "amount": "Amount of 'balance' debited from the Gauge and credited to the User",
          "gauge": "Existing Gauge address",
          "user": "User address"
        }
      },
      "GaugeIncreased(address,address,uint256)": {
        "params": {
          "amount": "Amount of 'balance' debited from the User and credited to the Gauge",
          "gauge": "Existing Gauge address",
          "user": "User address"
        }
      },
      "GaugeRemoved(address,address)": {
        "params": {
          "gauge": "Gauge address",
          "user": "Authorized address"
        }
      },
      "GaugeRewardSet(address)": {
        "params": {
          "gaugeReward": "Address of the newly set GaugeReward contract"
        }
      },
      "GaugeScaleSet(address,address,uint256,uint256)": {
        "params": {
          "gauge": "Gauge address",
          "oldScale": "Old Gauge scale",
          "scale": "New Gauge scale",
          "user": "Authorized address"
        }
      },
      "TokenDeposited(address,uint256)": {
        "params": {
          "amount": "Amount of 'token' deposited into the GaugeController",
          "user": "Address of the user who deposited 'token' into the GaugeController"
        }
      },
      "TokenWithdrawn(address,uint256)": {
        "params": {
          "amount": "Amount of 'token' withdrawn from the GaugeController",
          "user": "Address of the user who withdrew 'token' from the GaugeController"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addGauge(address)": {
        "params": {
          "_gauge": "Address of the Gauge"
        }
      },
      "addGaugeWithScale(address,uint256)": {
        "params": {
          "_gauge": "Address of new Gauge",
          "_scale": "Amount to scale new Gauge by"
        }
      },
      "claimOwnership()": {
        "details": "This function is only callable by the `_pendingOwner`."
      },
      "constructor": {
        "params": {
          "_owner": "Address of authorized owner",
          "_token": "ERC20 contract address (used to weight gauges)"
        }
      },
      "decreaseGauge(address,uint256)": {
        "params": {
          "_amount": "Amount of tokens to be debited from the Gauge balance and credited to the Gauge balance",
          "_gauge": "Address of the Gauge"
        }
      },
      "deposit(address,uint256)": {
        "params": {
          "_amount": "Amount of tokens to be deposited",
          "_to": "Receivzer of the deposited tokens"
        }
      },
      "getAverageGaugeBalanceBetween(address,uint256,uint256)": {
        "params": {
          "_endTime": "Unix timestamp to signal END of the Binary search",
          "_gauge": "Address of existing Gauge",
          "_startTime": "Unix timestamp to signal START of the Binary search"
        },
        "returns": {
          "_0": "uint256 Gauge average staked balance between two timestamps."
        }
      },
      "getAverageGaugeScaleBetween(address,uint256,uint256)": {
        "params": {
          "_endTime": "Unix timestamp to signal END of the Binary search",
          "_gauge": "Address of existing Gauge",
          "_startTime": "Unix timestamp to signal START of the Binary search"
        },
        "returns": {
          "_0": "uint256 Gauge average scaled balance between two timestamps."
        }
      },
      "getGaugeBalance(address)": {
        "params": {
          "_gauge": "Address of existing Gauge"
        },
        "returns": {
          "_0": "uint256 GaugeTWAB.details.balance"
        }
      },
      "getGaugeScaleBalance(address)": {
        "params": {
          "_gauge": "Address of existing Gauge"
        },
        "returns": {
          "_0": "uint256 GaugeScaleTWAB.details.balance"
        }
      },
      "getScaledAverageGaugeBalanceBetween(address,uint256,uint256)": {
        "params": {
          "_endTime": "Unix timestamp to signal END of the Binary search",
          "_gauge": "Address of existing Gauge",
          "_startTime": "Unix timestamp to signal START of the Binary search"
        },
        "returns": {
          "_0": "uint256 Weighted(Staked * Scaled) Gauge Balance"
        }
      },
      "getUserGaugeBalance(address,address)": {
        "params": {
          "_gauge": "Address of the gauge to get stake balance for",
          "_user": "Address of the user to get stake balance for"
        },
        "returns": {
          "_0": "The user gauge balance"
        }
      },
      "increaseGauge(address,uint256)": {
        "params": {
          "_amount": "Amount of tokens to be debited from the User balance and credited to the Gauge balance",
          "_gauge": "Address of the Gauge"
        }
      },
      "isGauge(address)": {
        "details": "Only reliable to check if a Gauge has been created AND also staked on.Uses the TWAB balance to determine \"isGauge\" status.",
        "params": {
          "_gauge": "Gauge address to check."
        },
        "returns": {
          "_0": "True if gauge is active. False otherwise."
        }
      },
      "manager()": {
        "returns": {
          "_0": "Current `_manager` address."
        }
      },
      "pendingOwner()": {
        "returns": {
          "_0": "Current `_pendingOwner` address."
        }
      },
      "removeGauge(address)": {
        "params": {
          "_gauge": "Address of existing Gauge"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setGaugeReward(address)": {
        "params": {
          "_gaugeReward": "Address of the GaugeReward contract"
        }
      },
      "setGaugeScale(address,uint256)": {
        "params": {
          "_gauge": "Address of existing Gauge",
          "_scale": "Amount to scale existing Gauge by"
        }
      },
      "setManager(address)": {
        "details": "Throws if called by any account other than the owner.",
        "params": {
          "_newManager": "New _manager address."
        },
        "returns": {
          "_0": "Boolean to indicate if the operation was successful or not."
        }
      },
      "transferOwnership(address)": {
        "params": {
          "_newOwner": "Address to transfer ownership to."
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "Amount of tokens to be withdrawn"
        }
      }
    },
    "stateVariables": {
      "balances": {
        "details": "The balance is updated in deposit, withthdraw, gaugeIncrease and gaugeDecrease. ----------------------------- | Address     | Balance     | | ----------- | ----------- | | 0x111...111 | 0x1000      | | 0x222...222 | 0x100000    | -----------------------------"
      },
      "rewards": {
        "details": "The rewards is updated in ----------------------------- | Address     | Rewards     | | ----------- | ----------- | | 0x111...111 | 0x100000    | | 0x222...222 | 0x500000    | -----------------------------"
      },
      "userGaugeBalance": {
        "details": "The balance is updated in gaugeIncrease and gaugeDecrease. ---------------------------------------------- | User        \t| Gauge       \t| Balance \t| |-------------\t|-------------\t|---------\t| | 0x111...111 \t| 0x999...999 \t| 0x10000  \t| | 0x111...111 \t| 0x999...999 \t| 0x30000 \t| | 0x111...111 \t| 0x999...999 \t| 0x50000  \t| ----------------------------------------------"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Deployed(address,address)": {
        "notice": "Event emitted when the contract is deployed"
      },
      "GaugeAdded(address,address)": {
        "notice": "Emitted when an Authorized User adds a new Gauge to the GaugeController"
      },
      "GaugeDecreased(address,address,uint256)": {
        "notice": "Emitted when User decrease a Gauge weight."
      },
      "GaugeIncreased(address,address,uint256)": {
        "notice": "Emitted when User increases a Gauge weight."
      },
      "GaugeRemoved(address,address)": {
        "notice": "Emitted when an Authorized User removes an existing Gauge from the GaugeController"
      },
      "GaugeRewardSet(address)": {
        "notice": "Emitted when GaugeReward address is set/updated"
      },
      "GaugeScaleSet(address,address,uint256,uint256)": {
        "notice": "Emitted when an Authorized User sets an existing Gauge 'scale' weight."
      },
      "TokenDeposited(address,uint256)": {
        "notice": "Emitted when User deposits 'token' into the gauge."
      },
      "TokenWithdrawn(address,uint256)": {
        "notice": "Emitted when User withdraws 'token' from the gauge."
      }
    },
    "kind": "user",
    "methods": {
      "addGauge(address)": {
        "notice": "Add new gauge with \"1e18\" scale to the GaugeController."
      },
      "addGaugeWithScale(address,uint256)": {
        "notice": "Add new gauge and target scale to the GaugeController."
      },
      "balances(address)": {
        "notice": "Tracks user balance. Balance is used to update target gauge weight balances."
      },
      "claimOwnership()": {
        "notice": "Allows the `_pendingOwner` address to finalize the transfer."
      },
      "constructor": {
        "notice": "GaugeController Construction"
      },
      "decreaseGauge(address,uint256)": {
        "notice": "Decrease Gauge balance and increase User staked balance."
      },
      "deposit(address,uint256)": {
        "notice": "Deposit tokens in GaugeController and increase User balance."
      },
      "gaugeReward()": {
        "notice": "GaugeReward for stakers rewards/incentives"
      },
      "getAverageGaugeBalanceBetween(address,uint256,uint256)": {
        "notice": "Calculate Gauge average balance between two timestamps."
      },
      "getAverageGaugeScaleBetween(address,uint256,uint256)": {
        "notice": "Calculate Gauge average scale between two timestamps."
      },
      "getGaugeBalance(address)": {
        "notice": "Read Gauge balance."
      },
      "getGaugeScaleBalance(address)": {
        "notice": "Read Gauge scaled balance."
      },
      "getScaledAverageGaugeBalanceBetween(address,uint256,uint256)": {
        "notice": "Calculate Gauge weighted balance using Staked AND Scaled time-weighted average balances."
      },
      "getUserGaugeBalance(address,address)": {
        "notice": "Get the user stake balance for a given gauge"
      },
      "increaseGauge(address,uint256)": {
        "notice": "Increase Gauge balance by decreasing User staked balance."
      },
      "isGauge(address)": {
        "notice": "Checks gauge status by reading the TWAB balance"
      },
      "manager()": {
        "notice": "Gets current `_manager`."
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "notice": "Gets current `_pendingOwner`."
      },
      "removeGauge(address)": {
        "notice": "Remove gauge from the GaugeController."
      },
      "renounceOwnership()": {
        "notice": "Renounce ownership of the contract."
      },
      "rewards(address)": {
        "notice": "Tracks user rewards for staking."
      },
      "setGaugeReward(address)": {
        "notice": "Set GaugeReward contract"
      },
      "setGaugeScale(address,uint256)": {
        "notice": "Set Gauge target scale."
      },
      "setManager(address)": {
        "notice": "Set or change of manager."
      },
      "token()": {
        "notice": "ERC20 token contract address (used to weight gauges)"
      },
      "transferOwnership(address)": {
        "notice": "Allows current owner to set the `_pendingOwner` address."
      },
      "userGaugeBalance(address,address)": {
        "notice": "Tracks User => Gauge => balance."
      },
      "withdraw(uint256)": {
        "notice": "Withdraw tokens in GaugeController and increase User balance."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4303,
        "contract": "contracts/GaugeController.sol:GaugeController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4305,
        "contract": "contracts/GaugeController.sol:GaugeController",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4201,
        "contract": "contracts/GaugeController.sol:GaugeController",
        "label": "_manager",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10212,
        "contract": "contracts/GaugeController.sol:GaugeController",
        "label": "token",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)663"
      },
      {
        "astId": 10216,
        "contract": "contracts/GaugeController.sol:GaugeController",
        "label": "gaugeReward",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IGaugeReward)16479"
      },
      {
        "astId": 10221,
        "contract": "contracts/GaugeController.sol:GaugeController",
        "label": "balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10228,
        "contract": "contracts/GaugeController.sol:GaugeController",
        "label": "userGaugeBalance",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 10233,
        "contract": "contracts/GaugeController.sol:GaugeController",
        "label": "rewards",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10239,
        "contract": "contracts/GaugeController.sol:GaugeController",
        "label": "gaugeTwabs",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(Account)18617_storage)"
      },
      {
        "astId": 10245,
        "contract": "contracts/GaugeController.sol:GaugeController",
        "label": "gaugeScaleTwabs",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(Account)18617_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Observation)18189_storage)16777215_storage": {
        "base": "t_struct(Observation)18189_storage",
        "encoding": "inplace",
        "label": "struct ObservationLib.Observation[16777215]",
        "numberOfBytes": "536870880"
      },
      "t_contract(IERC20)663": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IGaugeReward)16479": {
        "encoding": "inplace",
        "label": "contract IGaugeReward",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Account)18617_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TwabLib.Account)",
        "numberOfBytes": "32",
        "value": "t_struct(Account)18617_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Account)18617_storage": {
        "encoding": "inplace",
        "label": "struct TwabLib.Account",
        "members": [
          {
            "astId": 18611,
            "contract": "contracts/GaugeController.sol:GaugeController",
            "label": "details",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AccountDetails)18608_storage"
          },
          {
            "astId": 18616,
            "contract": "contracts/GaugeController.sol:GaugeController",
            "label": "twabs",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Observation)18189_storage)16777215_storage"
          }
        ],
        "numberOfBytes": "536870912"
      },
      "t_struct(AccountDetails)18608_storage": {
        "encoding": "inplace",
        "label": "struct TwabLib.AccountDetails",
        "members": [
          {
            "astId": 18603,
            "contract": "contracts/GaugeController.sol:GaugeController",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint208"
          },
          {
            "astId": 18605,
            "contract": "contracts/GaugeController.sol:GaugeController",
            "label": "nextTwabIndex",
            "offset": 26,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 18607,
            "contract": "contracts/GaugeController.sol:GaugeController",
            "label": "cardinality",
            "offset": 29,
            "slot": "0",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Observation)18189_storage": {
        "encoding": "inplace",
        "label": "struct ObservationLib.Observation",
        "members": [
          {
            "astId": 18186,
            "contract": "contracts/GaugeController.sol:GaugeController",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          },
          {
            "astId": 18188,
            "contract": "contracts/GaugeController.sol:GaugeController",
            "label": "timestamp",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint208": {
        "encoding": "inplace",
        "label": "uint208",
        "numberOfBytes": "26"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}