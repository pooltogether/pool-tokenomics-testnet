{
  "language": "Solidity",
  "sources": {
    "contracts/ControlledToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\n\nimport \"./interfaces/IControlledToken.sol\";\n\n/**\n * @title  PoolTogether V4 Controlled ERC20 Token\n * @author PoolTogether Inc Team\n * @notice  ERC20 Tokens with a controller for minting & burning\n */\ncontract ControlledToken is ERC20Permit, IControlledToken {\n    /* ============ Global Variables ============ */\n\n    /// @notice Interface to the contract responsible for controlling mint/burn\n    address public override immutable controller;\n\n    /// @notice ERC20 controlled token decimals.\n    uint8 private immutable _decimals;\n\n    /* ============ Events ============ */\n\n    /// @dev Emitted when contract is deployed\n    event Deployed(string name, string symbol, uint8 decimals, address indexed controller);\n\n    /* ============ Modifiers ============ */\n\n    /// @dev Function modifier to ensure that the caller is the controller contract\n    modifier onlyController() {\n        require(msg.sender == address(controller), \"ControlledToken/only-controller\");\n        _;\n    }\n\n    /* ============ Constructor ============ */\n\n    /// @notice Deploy the Controlled Token with Token Details and the Controller\n    /// @param _name The name of the Token\n    /// @param _symbol The symbol for the Token\n    /// @param decimals_ The number of decimals for the Token\n    /// @param _controller Address of the Controller contract for minting & burning\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 decimals_,\n        address _controller\n    ) ERC20Permit(\"PoolTogether ControlledToken\") ERC20(_name, _symbol) {\n        require(address(_controller) != address(0), \"ControlledToken/controller-not-zero-address\");\n        controller = _controller;\n\n        require(decimals_ > 0, \"ControlledToken/decimals-gt-zero\");\n        _decimals = decimals_;\n\n        emit Deployed(_name, _symbol, decimals_, _controller);\n    }\n\n    /* ============ External Functions ============ */\n\n    /// @notice Allows the controller to mint tokens for a user account\n    /// @dev May be overridden to provide more granular control over minting\n    /// @param _user Address of the receiver of the minted tokens\n    /// @param _amount Amount of tokens to mint\n    function controllerMint(address _user, uint256 _amount)\n        external\n        virtual\n        override\n        onlyController\n    {\n        _mint(_user, _amount);\n    }\n\n    /// @notice Allows the controller to burn tokens from a user account\n    /// @dev May be overridden to provide more granular control over burning\n    /// @param _user Address of the holder account to burn tokens from\n    /// @param _amount Amount of tokens to burn\n    function controllerBurn(address _user, uint256 _amount)\n        external\n        virtual\n        override\n        onlyController\n    {\n        _burn(_user, _amount);\n    }\n\n    /// @notice Allows an operator via the controller to burn tokens on behalf of a user account\n    /// @dev May be overridden to provide more granular control over operator-burning\n    /// @param _operator Address of the operator performing the burn action via the controller contract\n    /// @param _user Address of the holder account to burn tokens from\n    /// @param _amount Amount of tokens to burn\n    function controllerBurnFrom(\n        address _operator,\n        address _user,\n        uint256 _amount\n    ) external virtual override onlyController {\n        if (_operator != _user) {\n            _approve(_user, _operator, allowance(_user, _operator) - _amount);\n        }\n\n        _burn(_user, _amount);\n    }\n\n    /// @notice Returns the ERC20 controlled token decimals.\n    /// @dev This value should be equal to the decimals of the token used to deposit into the pool.\n    /// @return uint8 decimals.\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/draft-EIP712.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private immutable _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "contracts/interfaces/IControlledToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/** @title IControlledToken\n  * @author PoolTogether Inc Team\n  * @notice ERC20 Tokens with a controller for minting & burning.\n*/\ninterface IControlledToken is IERC20 {\n\n    /** \n        @notice Interface to the contract responsible for controlling mint/burn\n    */\n    function controller() external view returns (address);\n\n    /** \n      * @notice Allows the controller to mint tokens for a user account\n      * @dev May be overridden to provide more granular control over minting\n      * @param user Address of the receiver of the minted tokens\n      * @param amount Amount of tokens to mint\n    */\n    function controllerMint(address user, uint256 amount) external;\n\n    /** \n      * @notice Allows the controller to burn tokens from a user account\n      * @dev May be overridden to provide more granular control over burning\n      * @param user Address of the holder account to burn tokens from\n      * @param amount Amount of tokens to burn\n    */\n    function controllerBurn(address user, uint256 amount) external;\n\n    /** \n      * @notice Allows an operator via the controller to burn tokens on behalf of a user account\n      * @dev May be overridden to provide more granular control over operator-burning\n      * @param operator Address of the operator performing the burn action via the controller contract\n      * @param user Address of the holder account to burn tokens from\n      * @param amount Amount of tokens to burn\n    */\n    function controllerBurnFrom(\n        address operator,\n        address user,\n        uint256 amount\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Ticket.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./libraries/ExtendedSafeCastLib.sol\";\nimport \"./libraries/TwabLib.sol\";\nimport \"./interfaces/ITicket.sol\";\nimport \"./ControlledToken.sol\";\n\n/**\n  * @title  PoolTogether V4 Ticket\n  * @author PoolTogether Inc Team\n  * @notice The Ticket extends the standard ERC20 and ControlledToken interfaces with time-weighted average balance functionality.\n            The average balance held by a user between two timestamps can be calculated, as well as the historic balance.  The\n            historic total supply is available as well as the average total supply between two timestamps.\n\n            A user may \"delegate\" their balance; increasing another user's historic balance while retaining their tokens.\n*/\ncontract Ticket is ControlledToken, ITicket {\n    using SafeERC20 for IERC20;\n    using ExtendedSafeCastLib for uint256;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private immutable _DELEGATE_TYPEHASH =\n        keccak256(\"Delegate(address user,address delegate,uint256 nonce,uint256 deadline)\");\n\n    /// @notice Record of token holders TWABs for each account.\n    mapping(address => TwabLib.Account) internal userTwabs;\n\n    /// @notice Record of tickets total supply and ring buff parameters used for observation.\n    TwabLib.Account internal totalSupplyTwab;\n\n    /// @notice Mapping of delegates.  Each address can delegate their ticket power to another.\n    mapping(address => address) internal delegates;\n\n    /* ============ Constructor ============ */\n\n    /**\n     * @notice Constructs Ticket with passed parameters.\n     * @param _name ERC20 ticket token name.\n     * @param _symbol ERC20 ticket token symbol.\n     * @param decimals_ ERC20 ticket token decimals.\n     * @param _controller ERC20 ticket controller address (ie: Prize Pool address).\n     */\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 decimals_,\n        address _controller\n    ) ControlledToken(_name, _symbol, decimals_, _controller) {}\n\n    /* ============ External Functions ============ */\n\n    /// @inheritdoc ITicket\n    function getAccountDetails(address _user)\n        external\n        view\n        override\n        returns (TwabLib.AccountDetails memory)\n    {\n        return userTwabs[_user].details;\n    }\n\n    /// @inheritdoc ITicket\n    function getTwab(address _user, uint16 _index)\n        external\n        view\n        override\n        returns (ObservationLib.Observation memory)\n    {\n        return userTwabs[_user].twabs[_index];\n    }\n\n    /// @inheritdoc ITicket\n    function getBalanceAt(address _user, uint64 _target) external view override returns (uint256) {\n        TwabLib.Account storage account = userTwabs[_user];\n\n        return\n            TwabLib.getBalanceAt(\n                account.twabs,\n                account.details,\n                uint32(_target),\n                uint32(block.timestamp)\n            );\n    }\n\n    /// @inheritdoc ITicket\n    function getAverageBalancesBetween(\n        address _user,\n        uint64[] calldata _startTimes,\n        uint64[] calldata _endTimes\n    ) external view override returns (uint256[] memory) {\n        return _getAverageBalancesBetween(userTwabs[_user], _startTimes, _endTimes);\n    }\n\n    /// @inheritdoc ITicket\n    function getAverageTotalSuppliesBetween(\n        uint64[] calldata _startTimes,\n        uint64[] calldata _endTimes\n    ) external view override returns (uint256[] memory) {\n        return _getAverageBalancesBetween(totalSupplyTwab, _startTimes, _endTimes);\n    }\n\n    /// @inheritdoc ITicket\n    function getAverageBalanceBetween(\n        address _user,\n        uint64 _startTime,\n        uint64 _endTime\n    ) external view override returns (uint256) {\n        TwabLib.Account storage account = userTwabs[_user];\n\n        return\n            TwabLib.getAverageBalanceBetween(\n                account.twabs,\n                account.details,\n                uint32(_startTime),\n                uint32(_endTime),\n                uint32(block.timestamp)\n            );\n    }\n\n    /// @inheritdoc ITicket\n    function getBalancesAt(address _user, uint64[] calldata _targets)\n        external\n        view\n        override\n        returns (uint256[] memory)\n    {\n        uint256 length = _targets.length;\n        uint256[] memory _balances = new uint256[](length);\n\n        TwabLib.Account storage twabContext = userTwabs[_user];\n        TwabLib.AccountDetails memory details = twabContext.details;\n\n        for (uint256 i = 0; i < length; i++) {\n            _balances[i] = TwabLib.getBalanceAt(\n                twabContext.twabs,\n                details,\n                uint32(_targets[i]),\n                uint32(block.timestamp)\n            );\n        }\n\n        return _balances;\n    }\n\n    /// @inheritdoc ITicket\n    function getTotalSupplyAt(uint64 _target) external view override returns (uint256) {\n        return\n            TwabLib.getBalanceAt(\n                totalSupplyTwab.twabs,\n                totalSupplyTwab.details,\n                uint32(_target),\n                uint32(block.timestamp)\n            );\n    }\n\n    /// @inheritdoc ITicket\n    function getTotalSuppliesAt(uint64[] calldata _targets)\n        external\n        view\n        override\n        returns (uint256[] memory)\n    {\n        uint256 length = _targets.length;\n        uint256[] memory totalSupplies = new uint256[](length);\n\n        TwabLib.AccountDetails memory details = totalSupplyTwab.details;\n\n        for (uint256 i = 0; i < length; i++) {\n            totalSupplies[i] = TwabLib.getBalanceAt(\n                totalSupplyTwab.twabs,\n                details,\n                uint32(_targets[i]),\n                uint32(block.timestamp)\n            );\n        }\n\n        return totalSupplies;\n    }\n\n    /// @inheritdoc ITicket\n    function delegateOf(address _user) external view override returns (address) {\n        return delegates[_user];\n    }\n\n    /// @inheritdoc ITicket\n    function controllerDelegateFor(address _user, address _to) external override onlyController {\n        _delegate(_user, _to);\n    }\n\n    /// @inheritdoc ITicket\n    function delegateWithSignature(\n        address _user,\n        address _newDelegate,\n        uint256 _deadline,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) external virtual override {\n        require(block.timestamp <= _deadline, \"Ticket/delegate-expired-deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_DELEGATE_TYPEHASH, _user, _newDelegate, _useNonce(_user), _deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, _v, _r, _s);\n        require(signer == _user, \"Ticket/delegate-invalid-signature\");\n\n        _delegate(_user, _newDelegate);\n    }\n\n    /// @inheritdoc ITicket\n    function delegate(address _to) external virtual override {\n        _delegate(msg.sender, _to);\n    }\n\n    /// @notice Delegates a users chance to another\n    /// @param _user The user whose balance should be delegated\n    /// @param _to The delegate\n    function _delegate(address _user, address _to) internal {\n        uint256 balance = balanceOf(_user);\n        address currentDelegate = delegates[_user];\n\n        if (currentDelegate == _to) {\n            return;\n        }\n\n        delegates[_user] = _to;\n\n        _transferTwab(currentDelegate, _to, balance);\n\n        emit Delegated(_user, _to);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * @notice Retrieves the average balances held by a user for a given time frame.\n     * @param _account The user whose balance is checked.\n     * @param _startTimes The start time of the time frame.\n     * @param _endTimes The end time of the time frame.\n     * @return The average balance that the user held during the time frame.\n     */\n    function _getAverageBalancesBetween(\n        TwabLib.Account storage _account,\n        uint64[] calldata _startTimes,\n        uint64[] calldata _endTimes\n    ) internal view returns (uint256[] memory) {\n        uint256 startTimesLength = _startTimes.length;\n        require(startTimesLength == _endTimes.length, \"Ticket/start-end-times-length-match\");\n\n        TwabLib.AccountDetails memory accountDetails = _account.details;\n\n        uint256[] memory averageBalances = new uint256[](startTimesLength);\n        uint32 currentTimestamp = uint32(block.timestamp);\n\n        for (uint256 i = 0; i < startTimesLength; i++) {\n            averageBalances[i] = TwabLib.getAverageBalanceBetween(\n                _account.twabs,\n                accountDetails,\n                uint32(_startTimes[i]),\n                uint32(_endTimes[i]),\n                currentTimestamp\n            );\n        }\n\n        return averageBalances;\n    }\n\n    // @inheritdoc ERC20\n    function _beforeTokenTransfer(address _from, address _to, uint256 _amount) internal override {\n        if (_from == _to) {\n            return;\n        }\n\n        address _fromDelegate;\n        if (_from != address(0)) {\n            _fromDelegate = delegates[_from];\n        }\n\n        address _toDelegate;\n        if (_to != address(0)) {\n            _toDelegate = delegates[_to];\n        }\n\n        _transferTwab(_fromDelegate, _toDelegate, _amount);\n    }\n\n    /// @notice Transfers the given TWAB balance from one user to another\n    /// @param _from The user to transfer the balance from.  May be zero in the event of a mint.\n    /// @param _to The user to transfer the balance to.  May be zero in the event of a burn.\n    /// @param _amount The balance that is being transferred.\n    function _transferTwab(address _from, address _to, uint256 _amount) internal {\n        // If we are transferring tokens from a delegated account to an undelegated account\n        if (_from != address(0)) {\n            _decreaseUserTwab(_from, _amount);\n\n            if (_to == address(0)) {\n                _decreaseTotalSupplyTwab(_amount);\n            }\n        }\n\n        // If we are transferring tokens from an undelegated account to a delegated account\n        if (_to != address(0)) {\n            _increaseUserTwab(_to, _amount);\n\n            if (_from == address(0)) {\n                _increaseTotalSupplyTwab(_amount);\n            }\n        }\n    }\n\n    /**\n     * @notice Increase `_to` TWAB balance.\n     * @param _to Address of the delegate.\n     * @param _amount Amount of tokens to be added to `_to` TWAB balance.\n     */\n    function _increaseUserTwab(\n        address _to,\n        uint256 _amount\n    ) internal {\n        if (_amount == 0) {\n            return;\n        }\n\n        TwabLib.Account storage _account = userTwabs[_to];\n\n        (\n            TwabLib.AccountDetails memory accountDetails,\n            ObservationLib.Observation memory twab,\n            bool isNew\n        ) = TwabLib.increaseBalance(_account, _amount.toUint208(), uint32(block.timestamp));\n\n        _account.details = accountDetails;\n\n        if (isNew) {\n            emit NewUserTwab(_to, twab);\n        }\n    }\n\n    /**\n     * @notice Decrease `_to` TWAB balance.\n     * @param _to Address of the delegate.\n     * @param _amount Amount of tokens to be added to `_to` TWAB balance.\n     */\n    function _decreaseUserTwab(\n        address _to,\n        uint256 _amount\n    ) internal {\n        if (_amount == 0) {\n            return;\n        }\n\n        TwabLib.Account storage _account = userTwabs[_to];\n\n        (\n            TwabLib.AccountDetails memory accountDetails,\n            ObservationLib.Observation memory twab,\n            bool isNew\n        ) = TwabLib.decreaseBalance(\n                _account,\n                _amount.toUint208(),\n                \"Ticket/twab-burn-lt-balance\",\n                uint32(block.timestamp)\n            );\n\n        _account.details = accountDetails;\n\n        if (isNew) {\n            emit NewUserTwab(_to, twab);\n        }\n    }\n\n    /// @notice Decreases the total supply twab.  Should be called anytime a balance moves from delegated to undelegated\n    /// @param _amount The amount to decrease the total by\n    function _decreaseTotalSupplyTwab(uint256 _amount) internal {\n        if (_amount == 0) {\n            return;\n        }\n\n        (\n            TwabLib.AccountDetails memory accountDetails,\n            ObservationLib.Observation memory tsTwab,\n            bool tsIsNew\n        ) = TwabLib.decreaseBalance(\n                totalSupplyTwab,\n                _amount.toUint208(),\n                \"Ticket/burn-amount-exceeds-total-supply-twab\",\n                uint32(block.timestamp)\n            );\n\n        totalSupplyTwab.details = accountDetails;\n\n        if (tsIsNew) {\n            emit NewTotalSupplyTwab(tsTwab);\n        }\n    }\n\n    /// @notice Increases the total supply twab.  Should be called anytime a balance moves from undelegated to delegated\n    /// @param _amount The amount to increase the total by\n    function _increaseTotalSupplyTwab(uint256 _amount) internal {\n        if (_amount == 0) {\n            return;\n        }\n\n        (\n            TwabLib.AccountDetails memory accountDetails,\n            ObservationLib.Observation memory _totalSupply,\n            bool tsIsNew\n        ) = TwabLib.increaseBalance(totalSupplyTwab, _amount.toUint208(), uint32(block.timestamp));\n\n        totalSupplyTwab.details = accountDetails;\n\n        if (tsIsNew) {\n            emit NewTotalSupplyTwab(_totalSupply);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/libraries/ExtendedSafeCastLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary ExtendedSafeCastLib {\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 _value) internal pure returns (uint104) {\n        require(_value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(_value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 _value) internal pure returns (uint208) {\n        require(_value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(_value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 _value) internal pure returns (uint224) {\n        require(_value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(_value);\n    }\n}\n"
    },
    "contracts/libraries/TwabLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"./ExtendedSafeCastLib.sol\";\nimport \"./OverflowSafeComparatorLib.sol\";\nimport \"./RingBufferLib.sol\";\nimport \"./ObservationLib.sol\";\n\n/**\n  * @title  PoolTogether V4 TwabLib (Library)\n  * @author PoolTogether Inc Team\n  * @dev    Time-Weighted Average Balance Library for ERC20 tokens.\n  * @notice This TwabLib adds on-chain historical lookups to a user(s) time-weighted average balance.\n            Each user is mapped to an Account struct containing the TWAB history (ring buffer) and\n            ring buffer parameters. Every token.transfer() creates a new TWAB checkpoint. The new TWAB\n            checkpoint is stored in the circular ring buffer, as either a new checkpoint or rewriting\n            a previous checkpoint with new parameters. The TwabLib (using existing blocktimes of 1block/15sec)\n            guarantees minimum 7.4 years of search history.\n */\nlibrary TwabLib {\n    using OverflowSafeComparatorLib for uint32;\n    using ExtendedSafeCastLib for uint256;\n\n    /**\n      * @notice Sets max ring buffer length in the Account.twabs Observation list.\n                As users transfer/mint/burn tickets new Observation checkpoints are\n                recorded. The current max cardinality guarantees a seven year minimum,\n                of accurate historical lookups with current estimates of 1 new block\n                every 15 seconds - assuming each block contains a transfer to trigger an\n                observation write to storage.\n      * @dev    The user Account.AccountDetails.cardinality parameter can NOT exceed\n                the max cardinality variable. Preventing \"corrupted\" ring buffer lookup\n                pointers and new observation checkpoints.\n\n                The MAX_CARDINALITY in fact guarantees at least 7.4 years of records:\n                If 14 = block time in seconds\n                (2**24) * 14 = 234881024 seconds of history\n                234881024 / (365 * 24 * 60 * 60) ~= 7.44 years\n    */\n    uint24 public constant MAX_CARDINALITY = 16777215; // 2**24\n\n    /** @notice Struct ring buffer parameters for single user Account\n      * @param balance       Current balance for an Account\n      * @param nextTwabIndex Next uninitialized or updatable ring buffer checkpoint storage slot\n      * @param cardinality   Current total \"initialized\" ring buffer checkpoints for single user AccountDetails.\n                             Used to set initial boundary conditions for an efficient binary search.\n    */\n    struct AccountDetails {\n        uint208 balance;\n        uint24 nextTwabIndex;\n        uint24 cardinality;\n    }\n\n    /// @notice Combines account details with their twab history\n    /// @param details The account details\n    /// @param twabs The history of twabs for this account\n    struct Account {\n        AccountDetails details;\n        ObservationLib.Observation[MAX_CARDINALITY] twabs;\n    }\n\n    /// @notice Increases an account's balance and records a new twab.\n    /// @param _account The account whose balance will be increased\n    /// @param _amount The amount to increase the balance by\n    /// @param _currentTime The current time\n    /// @return accountDetails The new AccountDetails\n    /// @return twab The user's latest TWAB\n    /// @return isNew Whether the TWAB is new\n    function increaseBalance(\n        Account storage _account,\n        uint208 _amount,\n        uint32 _currentTime\n    )\n        internal\n        returns (\n            AccountDetails memory accountDetails,\n            ObservationLib.Observation memory twab,\n            bool isNew\n        )\n    {\n        AccountDetails memory _accountDetails = _account.details;\n        (accountDetails, twab, isNew) = _nextTwab(_account.twabs, _accountDetails, _currentTime);\n        accountDetails.balance = _accountDetails.balance + _amount;\n    }\n\n    /** @notice Calculates the next TWAB checkpoint for an account with a decreasing balance.\n     * @dev    With Account struct and amount decreasing calculates the next TWAB observable checkpoint.\n     * @param _account        Account whose balance will be decreased\n     * @param _amount         Amount to decrease the balance by\n     * @param _revertMessage  Revert message for insufficient balance\n     * @return accountDetails Updated Account.details struct\n     * @return twab           TWAB observation (with decreasing average)\n     * @return isNew          Whether TWAB is new or calling twice in the same block\n     */\n    function decreaseBalance(\n        Account storage _account,\n        uint208 _amount,\n        string memory _revertMessage,\n        uint32 _currentTime\n    )\n        internal\n        returns (\n            AccountDetails memory accountDetails,\n            ObservationLib.Observation memory twab,\n            bool isNew\n        )\n    {\n        AccountDetails memory _accountDetails = _account.details;\n\n        require(_accountDetails.balance >= _amount, _revertMessage);\n\n        (accountDetails, twab, isNew) = _nextTwab(_account.twabs, _accountDetails, _currentTime);\n        unchecked {\n            accountDetails.balance -= _amount;\n        }\n    }\n\n    /** @notice Calculates the average balance held by a user for a given time frame.\n      * @dev    Finds the average balance between start and end timestamp epochs.\n                Validates the supplied end time is within the range of elapsed time i.e. less then timestamp of now.\n      * @param _twabs          Individual user Observation recorded checkpoints passed as storage pointer\n      * @param _accountDetails User AccountDetails struct loaded in memory\n      * @param _startTime      Start of timestamp range as an epoch\n      * @param _endTime        End of timestamp range as an epoch\n      * @param _currentTime    Block.timestamp\n      * @return Average balance of user held between epoch timestamps start and end\n    */\n    function getAverageBalanceBetween(\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n        AccountDetails memory _accountDetails,\n        uint32 _startTime,\n        uint32 _endTime,\n        uint32 _currentTime\n    ) internal view returns (uint256) {\n        uint32 endTime = _endTime > _currentTime ? _currentTime : _endTime;\n\n        return\n            _getAverageBalanceBetween(_twabs, _accountDetails, _startTime, endTime, _currentTime);\n    }\n\n    /// @notice Retrieves the oldest TWAB\n    /// @param _twabs The storage array of twabs\n    /// @param _accountDetails The TWAB account details\n    /// @return index The index of the oldest TWAB in the twabs array\n    /// @return twab The oldest TWAB\n    function oldestTwab(\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n        AccountDetails memory _accountDetails\n    ) internal view returns (uint24 index, ObservationLib.Observation memory twab) {\n        index = _accountDetails.nextTwabIndex;\n        twab = _twabs[index];\n\n        // If the TWAB is not initialized we go to the beginning of the TWAB circular buffer at index 0\n        if (twab.timestamp == 0) {\n            index = 0;\n            twab = _twabs[0];\n        }\n    }\n\n    /// @notice Retrieves the newest TWAB\n    /// @param _twabs The storage array of twabs\n    /// @param _accountDetails The TWAB account details\n    /// @return index The index of the newest TWAB in the twabs array\n    /// @return twab The newest TWAB\n    function newestTwab(\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n        AccountDetails memory _accountDetails\n    ) internal view returns (uint24 index, ObservationLib.Observation memory twab) {\n        index = uint24(RingBufferLib.newestIndex(_accountDetails.nextTwabIndex, MAX_CARDINALITY));\n        twab = _twabs[index];\n    }\n\n    /// @notice Retrieves amount at `_targetTime` timestamp\n    /// @param _twabs List of TWABs to search through.\n    /// @param _accountDetails Accounts details\n    /// @param _targetTime Timestamp at which the reserved TWAB should be for.\n    /// @return uint256 TWAB amount at `_targetTime`.\n    function getBalanceAt(\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n        AccountDetails memory _accountDetails,\n        uint32 _targetTime,\n        uint32 _currentTime\n    ) internal view returns (uint256) {\n        uint32 timeToTarget = _targetTime > _currentTime ? _currentTime : _targetTime;\n        return _getBalanceAt(_twabs, _accountDetails, timeToTarget, _currentTime);\n    }\n\n    /// @notice Calculates the average balance held by a user for a given time frame.\n    /// @param _startTime The start time of the time frame.\n    /// @param _endTime The end time of the time frame.\n    /// @return The average balance that the user held during the time frame.\n    function _getAverageBalanceBetween(\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n        AccountDetails memory _accountDetails,\n        uint32 _startTime,\n        uint32 _endTime,\n        uint32 _currentTime\n    ) private view returns (uint256) {\n        (uint24 oldestTwabIndex, ObservationLib.Observation memory oldTwab) = oldestTwab(\n            _twabs,\n            _accountDetails\n        );\n\n        (uint24 newestTwabIndex, ObservationLib.Observation memory newTwab) = newestTwab(\n            _twabs,\n            _accountDetails\n        );\n\n        ObservationLib.Observation memory startTwab = _calculateTwab(\n            _twabs,\n            _accountDetails,\n            newTwab,\n            oldTwab,\n            newestTwabIndex,\n            oldestTwabIndex,\n            _startTime,\n            _currentTime\n        );\n\n        ObservationLib.Observation memory endTwab = _calculateTwab(\n            _twabs,\n            _accountDetails,\n            newTwab,\n            oldTwab,\n            newestTwabIndex,\n            oldestTwabIndex,\n            _endTime,\n            _currentTime\n        );\n\n        // Difference in amount / time\n        return (endTwab.amount - startTwab.amount) / OverflowSafeComparatorLib.checkedSub(endTwab.timestamp, startTwab.timestamp, _currentTime);\n    }\n\n    /** @notice Searches TWAB history and calculate the difference between amount(s)/timestamp(s) to return average balance\n                between the Observations closes to the supplied targetTime.\n      * @param _twabs          Individual user Observation recorded checkpoints passed as storage pointer\n      * @param _accountDetails User AccountDetails struct loaded in memory\n      * @param _targetTime     Target timestamp to filter Observations in the ring buffer binary search\n      * @param _currentTime    Block.timestamp\n      * @return uint256 Time-weighted average amount between two closest observations.\n    */\n    function _getBalanceAt(\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n        AccountDetails memory _accountDetails,\n        uint32 _targetTime,\n        uint32 _currentTime\n    ) private view returns (uint256) {\n        uint24 newestTwabIndex;\n        ObservationLib.Observation memory afterOrAt;\n        ObservationLib.Observation memory beforeOrAt;\n        (newestTwabIndex, beforeOrAt) = newestTwab(_twabs, _accountDetails);\n\n        // If `_targetTime` is chronologically after the newest TWAB, we can simply return the current balance\n        if (beforeOrAt.timestamp.lte(_targetTime, _currentTime)) {\n            return _accountDetails.balance;\n        }\n\n        uint24 oldestTwabIndex;\n        // Now, set before to the oldest TWAB\n        (oldestTwabIndex, beforeOrAt) = oldestTwab(_twabs, _accountDetails);\n\n        // If `_targetTime` is chronologically before the oldest TWAB, we can early return\n        if (_targetTime.lt(beforeOrAt.timestamp, _currentTime)) {\n            return 0;\n        }\n\n        // Otherwise, we perform the `binarySearch`\n        (beforeOrAt, afterOrAt) = ObservationLib.binarySearch(\n            _twabs,\n            newestTwabIndex,\n            oldestTwabIndex,\n            _targetTime,\n            _accountDetails.cardinality,\n            _currentTime\n        );\n\n        // Sum the difference in amounts and divide by the difference in timestamps.\n        // The time-weighted average balance uses time measured between two epoch timestamps as\n        // a constaint on the measurement when calculating the time weighted average balance.\n        return\n            (afterOrAt.amount - beforeOrAt.amount) / OverflowSafeComparatorLib.checkedSub(afterOrAt.timestamp, beforeOrAt.timestamp, _currentTime);\n    }\n\n    /** @notice Calculates a user TWAB for a target timestamp using the historical TWAB records.\n                The balance is linearly interpolated: amount differences / timestamp differences\n                using the simple (after.amount - before.amount / end.timestamp - start.timestamp) formula.\n    /** @dev    Binary search in _calculateTwab fails when searching out of bounds. Thus, before\n                searching we exclude target timestamps out of range of newest/oldest TWAB(s).\n                IF a search is before or after the range we \"extrapolate\" a Observation from the expected state.\n      * @param _twabs           Individual user Observation recorded checkpoints passed as storage pointer\n      * @param _accountDetails  User AccountDetails struct loaded in memory\n      * @param _newestTwab      Newest TWAB in history (end of ring buffer)\n      * @param _oldestTwab      Olderst TWAB in history (end of ring buffer)\n      * @param _newestTwabIndex Pointer in ring buffer to newest TWAB\n      * @param _oldestTwabIndex Pointer in ring buffer to oldest TWAB\n      * @param _targetTimestamp Epoch timestamp to calculate for time (T) in the TWAB\n      * @param _time            Block.timestamp\n      * @return accountDetails Updated Account.details struct\n    */\n    function _calculateTwab(\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n        AccountDetails memory _accountDetails,\n        ObservationLib.Observation memory _newestTwab,\n        ObservationLib.Observation memory _oldestTwab,\n        uint24 _newestTwabIndex,\n        uint24 _oldestTwabIndex,\n        uint32 _targetTimestamp,\n        uint32 _time\n    ) private view returns (ObservationLib.Observation memory) {\n        // If `_targetTimestamp` is chronologically after the newest TWAB, we extrapolate a new one\n        if (_newestTwab.timestamp.lt(_targetTimestamp, _time)) {\n            return _computeNextTwab(_newestTwab, _accountDetails.balance, _targetTimestamp);\n        }\n\n        if (_newestTwab.timestamp == _targetTimestamp) {\n            return _newestTwab;\n        }\n\n        if (_oldestTwab.timestamp == _targetTimestamp) {\n            return _oldestTwab;\n        }\n\n        // If `_targetTimestamp` is chronologically before the oldest TWAB, we create a zero twab\n        if (_targetTimestamp.lt(_oldestTwab.timestamp, _time)) {\n            return ObservationLib.Observation({ amount: 0, timestamp: _targetTimestamp });\n        }\n\n        // Otherwise, both timestamps must be surrounded by twabs.\n        (\n            ObservationLib.Observation memory beforeOrAtStart,\n            ObservationLib.Observation memory afterOrAtStart\n        ) = ObservationLib.binarySearch(\n                _twabs,\n                _newestTwabIndex,\n                _oldestTwabIndex,\n                _targetTimestamp,\n                _accountDetails.cardinality,\n                _time\n            );\n\n        uint224 heldBalance = (afterOrAtStart.amount - beforeOrAtStart.amount) /\n            OverflowSafeComparatorLib.checkedSub(afterOrAtStart.timestamp, beforeOrAtStart.timestamp, _time);\n\n        return _computeNextTwab(beforeOrAtStart, heldBalance, _targetTimestamp);\n    }\n\n    /**\n     * @notice Calculates the next TWAB using the newestTwab and updated balance.\n     * @dev    Storage of the TWAB obersation is managed by the calling function and not _computeNextTwab.\n     * @param _currentTwab    Newest Observation in the Account.twabs list\n     * @param _currentBalance User balance at time of most recent (newest) checkpoint write\n     * @param _time           Current block.timestamp\n     * @return TWAB Observation\n     */\n    function _computeNextTwab(\n        ObservationLib.Observation memory _currentTwab,\n        uint224 _currentBalance,\n        uint32 _time\n    ) private pure returns (ObservationLib.Observation memory) {\n        // New twab amount = last twab amount (or zero) + (current amount * elapsed seconds)\n        return\n            ObservationLib.Observation({\n                amount: _currentTwab.amount +\n                    _currentBalance *\n                    (_time.checkedSub(_currentTwab.timestamp, _time)),\n                timestamp: _time\n            });\n    }\n\n    /// @notice Sets a new TWAB Observation at the next available index and returns the new account details.\n    /// @dev Note that if _currentTime is before the last observation timestamp, it appears as an overflow\n    /// @param _twabs The twabs array to insert into\n    /// @param _accountDetails The current account details\n    /// @param _currentTime The current time\n    /// @return accountDetails The new account details\n    /// @return twab The newest twab (may or may not be brand-new)\n    /// @return isNew Whether the newest twab was created by this call\n    function _nextTwab(\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n        AccountDetails memory _accountDetails,\n        uint32 _currentTime\n    )\n        private\n        returns (\n            AccountDetails memory accountDetails,\n            ObservationLib.Observation memory twab,\n            bool isNew\n        )\n    {\n        (, ObservationLib.Observation memory _newestTwab) = newestTwab(_twabs, _accountDetails);\n\n        // if we're in the same block, return\n        if (_newestTwab.timestamp == _currentTime) {\n            return (_accountDetails, _newestTwab, false);\n        }\n\n        ObservationLib.Observation memory newTwab = _computeNextTwab(\n            _newestTwab,\n            _accountDetails.balance,\n            _currentTime\n        );\n\n        _twabs[_accountDetails.nextTwabIndex] = newTwab;\n\n        AccountDetails memory nextAccountDetails = push(_accountDetails);\n\n        return (nextAccountDetails, newTwab, true);\n    }\n\n    /// @notice \"Pushes\" a new element on the AccountDetails ring buffer, and returns the new AccountDetails\n    /// @param _accountDetails The account details from which to pull the cardinality and next index\n    /// @return The new AccountDetails\n    function push(AccountDetails memory _accountDetails)\n        internal\n        pure\n        returns (AccountDetails memory)\n    {\n        _accountDetails.nextTwabIndex = uint24(\n            RingBufferLib.nextIndex(_accountDetails.nextTwabIndex, MAX_CARDINALITY)\n        );\n\n        // Prevent the Account specific cardinality from exceeding the MAX_CARDINALITY.\n        // The ring buffer length is limited by MAX_CARDINALITY. IF the account.cardinality\n        // exceeds the max cardinality, new observations would be incorrectly set or the\n        // observation would be out of \"bounds\" of the ring buffer. Once reached the\n        // AccountDetails.cardinality will continue to be equal to max cardinality.\n        if (_accountDetails.cardinality < MAX_CARDINALITY) {\n            _accountDetails.cardinality += 1;\n        }\n\n        return _accountDetails;\n    }\n}\n"
    },
    "contracts/interfaces/ITicket.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"../libraries/TwabLib.sol\";\nimport \"./IControlledToken.sol\";\n\ninterface ITicket is IControlledToken {\n    /**\n     * @notice A struct containing details for an Account.\n     * @param balance The current balance for an Account.\n     * @param nextTwabIndex The next available index to store a new twab.\n     * @param cardinality The number of recorded twabs (plus one!).\n     */\n    struct AccountDetails {\n        uint224 balance;\n        uint16 nextTwabIndex;\n        uint16 cardinality;\n    }\n\n    /**\n     * @notice Combines account details with their twab history.\n     * @param details The account details.\n     * @param twabs The history of twabs for this account.\n     */\n    struct Account {\n        AccountDetails details;\n        ObservationLib.Observation[65535] twabs;\n    }\n\n    /**\n     * @notice Emitted when TWAB balance has been delegated to another user.\n     * @param delegator Address of the delegator.\n     * @param delegate Address of the delegate.\n     */\n    event Delegated(address indexed delegator, address indexed delegate);\n\n    /**\n     * @notice Emitted when ticket is initialized.\n     * @param name Ticket name (eg: PoolTogether Dai Ticket (Compound)).\n     * @param symbol Ticket symbol (eg: PcDAI).\n     * @param decimals Ticket decimals.\n     * @param controller Token controller address.\n     */\n    event TicketInitialized(string name, string symbol, uint8 decimals, address indexed controller);\n\n    /**\n     * @notice Emitted when a new TWAB has been recorded.\n     * @param delegate The recipient of the ticket power (may be the same as the user).\n     * @param newTwab Updated TWAB of a ticket holder after a successful TWAB recording.\n     */\n    event NewUserTwab(\n        address indexed delegate,\n        ObservationLib.Observation newTwab\n    );\n\n    /**\n     * @notice Emitted when a new total supply TWAB has been recorded.\n     * @param newTotalSupplyTwab Updated TWAB of tickets total supply after a successful total supply TWAB recording.\n     */\n    event NewTotalSupplyTwab(ObservationLib.Observation newTotalSupplyTwab);\n\n    /**\n     * @notice Retrieves the address of the delegate to whom `user` has delegated their tickets.\n     * @dev Address of the delegate will be the zero address if `user` has not delegated their tickets.\n     * @param user Address of the delegator.\n     * @return Address of the delegate.\n     */\n    function delegateOf(address user) external view returns (address);\n\n    /**\n    * @notice Delegate time-weighted average balances to an alternative address.\n    * @dev    Transfers (including mints) trigger the storage of a TWAB in delegate(s) account, instead of the\n              targetted sender and/or recipient address(s).\n    * @dev    To reset the delegate, pass the zero address (0x000.000) as `to` parameter.\n    * @dev Current delegate address should be different from the new delegate address `to`.\n    * @param  to Recipient of delegated TWAB.\n    */\n    function delegate(address to) external;\n\n    /**\n     * @notice Allows the controller to delegate on a users behalf.\n     * @param user The user for whom to delegate\n     * @param delegate The new delegate\n     */\n    function controllerDelegateFor(address user, address delegate) external;\n\n    /**\n     * @notice Allows a user to delegate via signature\n     * @param user The user who is delegating\n     * @param delegate The new delegate\n     * @param deadline The timestamp by which this must be submitted\n     * @param v The v portion of the ECDSA sig\n     * @param r The r portion of the ECDSA sig\n     * @param s The s portion of the ECDSA sig\n     */\n    function delegateWithSignature(\n        address user,\n        address delegate,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @notice Gets a users twab context.  This is a struct with their balance, next twab index, and cardinality.\n     * @param user The user for whom to fetch the TWAB context.\n     * @return The TWAB context, which includes { balance, nextTwabIndex, cardinality }\n     */\n    function getAccountDetails(address user) external view returns (TwabLib.AccountDetails memory);\n\n    /**\n     * @notice Gets the TWAB at a specific index for a user.\n     * @param user The user for whom to fetch the TWAB.\n     * @param index The index of the TWAB to fetch.\n     * @return The TWAB, which includes the twab amount and the timestamp.\n     */\n    function getTwab(address user, uint16 index)\n        external\n        view\n        returns (ObservationLib.Observation memory);\n\n    /**\n     * @notice Retrieves `user` TWAB balance.\n     * @param user Address of the user whose TWAB is being fetched.\n     * @param timestamp Timestamp at which we want to retrieve the TWAB balance.\n     * @return The TWAB balance at the given timestamp.\n     */\n    function getBalanceAt(address user, uint64 timestamp) external view returns (uint256);\n\n    /**\n     * @notice Retrieves `user` TWAB balances.\n     * @param user Address of the user whose TWABs are being fetched.\n     * @param timestamps Timestamps range at which we want to retrieve the TWAB balances.\n     * @return `user` TWAB balances.\n     */\n    function getBalancesAt(address user, uint64[] calldata timestamps)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @notice Retrieves the average balance held by a user for a given time frame.\n     * @param user The user whose balance is checked.\n     * @param startTime The start time of the time frame.\n     * @param endTime The end time of the time frame.\n     * @return The average balance that the user held during the time frame.\n     */\n    function getAverageBalanceBetween(\n        address user,\n        uint64 startTime,\n        uint64 endTime\n    ) external view returns (uint256);\n\n    /**\n     * @notice Retrieves the average balances held by a user for a given time frame.\n     * @param user The user whose balance is checked.\n     * @param startTimes The start time of the time frame.\n     * @param endTimes The end time of the time frame.\n     * @return The average balance that the user held during the time frame.\n     */\n    function getAverageBalancesBetween(\n        address user,\n        uint64[] calldata startTimes,\n        uint64[] calldata endTimes\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @notice Retrieves the total supply TWAB balance at the given timestamp.\n     * @param timestamp Timestamp at which we want to retrieve the total supply TWAB balance.\n     * @return The total supply TWAB balance at the given timestamp.\n     */\n    function getTotalSupplyAt(uint64 timestamp) external view returns (uint256);\n\n    /**\n     * @notice Retrieves the total supply TWAB balance between the given timestamps range.\n     * @param timestamps Timestamps range at which we want to retrieve the total supply TWAB balance.\n     * @return Total supply TWAB balances.\n     */\n    function getTotalSuppliesAt(uint64[] calldata timestamps)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @notice Retrieves the average total supply balance for a set of given time frames.\n     * @param startTimes Array of start times.\n     * @param endTimes Array of end times.\n     * @return The average total supplies held during the time frame.\n     */\n    function getAverageTotalSuppliesBetween(\n        uint64[] calldata startTimes,\n        uint64[] calldata endTimes\n    ) external view returns (uint256[] memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/libraries/OverflowSafeComparatorLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\n/// @title OverflowSafeComparatorLib library to share comparator functions between contracts\n/// @dev Code taken from Uniswap V3 Oracle.sol: https://github.com/Uniswap/v3-core/blob/3e88af408132fc957e3e406f65a0ce2b1ca06c3d/contracts/libraries/Oracle.sol\n/// @author PoolTogether Inc.\nlibrary OverflowSafeComparatorLib {\n    /// @notice 32-bit timestamps comparator.\n    /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\n    /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\n    /// @param _b Timestamp to compare against `_a`.\n    /// @param _timestamp A timestamp truncated to 32 bits.\n    /// @return bool Whether `_a` is chronologically < `_b`.\n    function lt(\n        uint32 _a,\n        uint32 _b,\n        uint32 _timestamp\n    ) internal pure returns (bool) {\n        // No need to adjust if there hasn't been an overflow\n        if (_a <= _timestamp && _b <= _timestamp) return _a < _b;\n\n        uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\n        uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\n\n        return aAdjusted < bAdjusted;\n    }\n\n    /// @notice 32-bit timestamps comparator.\n    /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\n    /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\n    /// @param _b Timestamp to compare against `_a`.\n    /// @param _timestamp A timestamp truncated to 32 bits.\n    /// @return bool Whether `_a` is chronologically <= `_b`.\n    function lte(\n        uint32 _a,\n        uint32 _b,\n        uint32 _timestamp\n    ) internal pure returns (bool) {\n\n        // No need to adjust if there hasn't been an overflow\n        if (_a <= _timestamp && _b <= _timestamp) return _a <= _b;\n\n        uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\n        uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\n\n        return aAdjusted <= bAdjusted;\n    }\n\n    /// @notice 32-bit timestamp subtractor\n    /// @dev safe for 0 or 1 overflows, where `_a` and `_b` must be chronologically before or equal to time\n    /// @param _a The subtraction left operand\n    /// @param _b The subtraction right operand\n    /// @param _timestamp The current time.  Expected to be chronologically after both.\n    /// @return The difference between a and b, adjusted for overflow\n    function checkedSub(\n        uint32 _a,\n        uint32 _b,\n        uint32 _timestamp\n    ) internal pure returns (uint32) {\n        // No need to adjust if there hasn't been an overflow\n\n        if (_a <= _timestamp && _b <= _timestamp) return _a - _b;\n\n        uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\n        uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\n\n        return uint32(aAdjusted - bAdjusted);\n    }\n}\n"
    },
    "contracts/libraries/RingBufferLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nlibrary RingBufferLib {\n    /**\n    * @notice Returns wrapped TWAB index.\n    * @dev  In order to navigate the TWAB circular buffer, we need to use the modulo operator.\n    * @dev  For example, if `_index` is equal to 32 and the TWAB circular buffer is of `_cardinality` 32,\n    *       it will return 0 and will point to the first element of the array.\n    * @param _index Index used to navigate through the TWAB circular buffer.\n    * @param _cardinality TWAB buffer cardinality.\n    * @return TWAB index.\n    */\n    function wrap(uint256 _index, uint256 _cardinality) internal pure returns (uint256) {\n        return _index % _cardinality;\n    }\n\n    /**\n    * @notice Computes the negative offset from the given index, wrapped by the cardinality.\n    * @dev  We add `_cardinality` to `_index` to be able to offset even if `_amount` is superior to `_cardinality`.\n    * @param _index The index from which to offset\n    * @param _amount The number of indices to offset.  This is subtracted from the given index.\n    * @param _cardinality The number of elements in the ring buffer\n    * @return Offsetted index.\n     */\n    function offset(\n        uint256 _index,\n        uint256 _amount,\n        uint256 _cardinality\n    ) internal pure returns (uint256) {\n        return wrap(_index + _cardinality - _amount, _cardinality);\n    }\n\n    /// @notice Returns the index of the last recorded TWAB\n    /// @param _nextIndex The next available twab index.  This will be recorded to next.\n    /// @param _cardinality The cardinality of the TWAB history.\n    /// @return The index of the last recorded TWAB\n    function newestIndex(uint256 _nextIndex, uint256 _cardinality)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (_cardinality == 0) {\n            return 0;\n        }\n\n        return wrap(_nextIndex + _cardinality - 1, _cardinality);\n    }\n\n    /// @notice Computes the ring buffer index that follows the given one, wrapped by cardinality\n    /// @param _index The index to increment\n    /// @param _cardinality The number of elements in the Ring Buffer\n    /// @return The next index relative to the given index.  Will wrap around to 0 if the next index == cardinality\n    function nextIndex(uint256 _index, uint256 _cardinality)\n        internal\n        pure\n        returns (uint256)\n    {\n        return wrap(_index + 1, _cardinality);\n    }\n}\n"
    },
    "contracts/libraries/ObservationLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\nimport \"./OverflowSafeComparatorLib.sol\";\nimport \"./RingBufferLib.sol\";\n\n/**\n* @title Observation Library\n* @notice This library allows one to store an array of timestamped values and efficiently binary search them.\n* @dev Largely pulled from Uniswap V3 Oracle.sol: https://github.com/Uniswap/v3-core/blob/c05a0e2c8c08c460fb4d05cfdda30b3ad8deeaac/contracts/libraries/Oracle.sol\n* @author PoolTogether Inc.\n*/\nlibrary ObservationLib {\n    using OverflowSafeComparatorLib for uint32;\n    using SafeCast for uint256;\n\n    /// @notice The maximum number of observations\n    uint24 public constant MAX_CARDINALITY = 16777215; // 2**24\n\n    /**\n    * @notice Observation, which includes an amount and timestamp.\n    * @param amount `amount` at `timestamp`.\n    * @param timestamp Recorded `timestamp`.\n    */\n    struct Observation {\n        uint224 amount;\n        uint32 timestamp;\n    }\n\n    /**\n    * @notice Fetches Observations `beforeOrAt` and `atOrAfter` a `_target`, eg: where [`beforeOrAt`, `atOrAfter`] is satisfied.\n    * The result may be the same Observation, or adjacent Observations.\n    * @dev The answer must be contained in the array used when the target is located within the stored Observation.\n    * boundaries: older than the most recent Observation and younger, or the same age as, the oldest Observation.\n    * @dev  If `_newestObservationIndex` is less than `_oldestObservationIndex`, it means that we've wrapped around the circular buffer.\n    *       So the most recent observation will be at `_oldestObservationIndex + _cardinality - 1`, at the beginning of the circular buffer.\n    * @param _observations List of Observations to search through.\n    * @param _newestObservationIndex Index of the newest Observation. Right side of the circular buffer.\n    * @param _oldestObservationIndex Index of the oldest Observation. Left side of the circular buffer.\n    * @param _target Timestamp at which we are searching the Observation.\n    * @param _cardinality Cardinality of the circular buffer we are searching through.\n    * @param _time Timestamp at which we perform the binary search.\n    * @return beforeOrAt Observation recorded before, or at, the target.\n    * @return atOrAfter Observation recorded at, or after, the target.\n    */\n    function binarySearch(\n        Observation[MAX_CARDINALITY] storage _observations,\n        uint24 _newestObservationIndex,\n        uint24 _oldestObservationIndex,\n        uint32 _target,\n        uint24 _cardinality,\n        uint32 _time\n    ) internal view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\n        uint256 leftSide = _oldestObservationIndex;\n        uint256 rightSide = _newestObservationIndex < leftSide\n            ? leftSide + _cardinality - 1\n            : _newestObservationIndex;\n        uint256 currentIndex;\n\n        while (true) {\n            // We start our search in the middle of the `leftSide` and `rightSide`.\n            // After each iteration, we narrow down the search to the left or the right side while still starting our search in the middle.\n            currentIndex = (leftSide + rightSide) / 2;\n\n            beforeOrAt = _observations[uint24(RingBufferLib.wrap(currentIndex, _cardinality))];\n            uint32 beforeOrAtTimestamp = beforeOrAt.timestamp;\n\n            // We've landed on an uninitialized timestamp, keep searching higher (more recently).\n            if (beforeOrAtTimestamp == 0) {\n                leftSide = currentIndex + 1;\n                continue;\n            }\n\n            atOrAfter = _observations[uint24(RingBufferLib.nextIndex(currentIndex, _cardinality))];\n\n            bool targetAtOrAfter = beforeOrAtTimestamp.lte(_target, _time);\n\n            // Check if we've found the corresponding Observation.\n            if (targetAtOrAfter && _target.lte(atOrAfter.timestamp, _time)) {\n                break;\n            }\n\n            // If `beforeOrAtTimestamp` is greater than `_target`, then we keep searching lower. To the left of the current index.\n            if (!targetAtOrAfter) {\n                rightSide = currentIndex - 1;\n            } else {\n                // Otherwise, we keep searching higher. To the left of the current index.\n                leftSide = currentIndex + 1;\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "contracts/prize-pool/PrizePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@pooltogether/owner-manager-contracts/contracts/Ownable.sol\";\n\nimport \"../external/compound/ICompLike.sol\";\nimport \"../interfaces/IPrizePool.sol\";\nimport \"../interfaces/ITicket.sol\";\n\n/**\n  * @title  PoolTogether V4 PrizePool\n  * @author PoolTogether Inc Team\n  * @notice Escrows assets and deposits them into a yield source.  Exposes interest to Prize Strategy.\n            Users deposit and withdraw from this contract to participate in Prize Pool.\n            Accounting is managed using Controlled Tokens, whose mint and burn functions can only be called by this contract.\n            Must be inherited to provide specific yield-bearing asset control, such as Compound cTokens\n*/\nabstract contract PrizePool is IPrizePool, Ownable, ReentrancyGuard, IERC721Receiver {\n    using SafeCast for uint256;\n    using SafeERC20 for IERC20;\n    using ERC165Checker for address;\n\n    /// @notice Semver Version\n    string public constant VERSION = \"4.0.0\";\n\n    /// @notice Prize Pool ticket. Can only be set once by calling `setTicket()`.\n    ITicket internal ticket;\n\n    /// @notice The Prize Strategy that this Prize Pool is bound to.\n    address internal prizeStrategy;\n\n    /// @notice The total amount of tickets a user can hold.\n    uint256 internal balanceCap;\n\n    /// @notice The total amount of funds that the prize pool can hold.\n    uint256 internal liquidityCap;\n\n    /// @notice the The awardable balance\n    uint256 internal _currentAwardBalance;\n\n    /* ============ Modifiers ============ */\n\n    /// @dev Function modifier to ensure caller is the prize-strategy\n    modifier onlyPrizeStrategy() {\n        require(msg.sender == prizeStrategy, \"PrizePool/only-prizeStrategy\");\n        _;\n    }\n\n    /// @dev Function modifier to ensure the deposit amount does not exceed the liquidity cap (if set)\n    modifier canAddLiquidity(uint256 _amount) {\n        require(_canAddLiquidity(_amount), \"PrizePool/exceeds-liquidity-cap\");\n        _;\n    }\n\n    /* ============ Constructor ============ */\n\n    /// @notice Deploy the Prize Pool\n    /// @param _owner Address of the Prize Pool owner\n    constructor(address _owner) Ownable(_owner) ReentrancyGuard() {\n        _setLiquidityCap(type(uint256).max);\n    }\n\n    /* ============ External Functions ============ */\n\n    /// @inheritdoc IPrizePool\n    function balance() external override returns (uint256) {\n        return _balance();\n    }\n\n    /// @inheritdoc IPrizePool\n    function awardBalance() external view override returns (uint256) {\n        return _currentAwardBalance;\n    }\n\n    /// @inheritdoc IPrizePool\n    function canAwardExternal(address _externalToken) external view override returns (bool) {\n        return _canAwardExternal(_externalToken);\n    }\n\n    /// @inheritdoc IPrizePool\n    function isControlled(ITicket _controlledToken) external view override returns (bool) {\n        return _isControlled(_controlledToken);\n    }\n\n    /// @inheritdoc IPrizePool\n    function getAccountedBalance() external view override returns (uint256) {\n        return _ticketTotalSupply();\n    }\n\n    /// @inheritdoc IPrizePool\n    function getBalanceCap() external view override returns (uint256) {\n        return balanceCap;\n    }\n\n    /// @inheritdoc IPrizePool\n    function getLiquidityCap() external view override returns (uint256) {\n        return liquidityCap;\n    }\n\n    /// @inheritdoc IPrizePool\n    function getTicket() external view override returns (ITicket) {\n        return ticket;\n    }\n\n    /// @inheritdoc IPrizePool\n    function getPrizeStrategy() external view override returns (address) {\n        return prizeStrategy;\n    }\n\n    /// @inheritdoc IPrizePool\n    function getToken() external view override returns (address) {\n        return address(_token());\n    }\n\n    /// @inheritdoc IPrizePool\n    function captureAwardBalance() external override nonReentrant returns (uint256) {\n        uint256 ticketTotalSupply = _ticketTotalSupply();\n        uint256 currentAwardBalance = _currentAwardBalance;\n\n        // it's possible for the balance to be slightly less due to rounding errors in the underlying yield source\n        uint256 currentBalance = _balance();\n        uint256 totalInterest = (currentBalance > ticketTotalSupply)\n            ? currentBalance - ticketTotalSupply\n            : 0;\n\n        uint256 unaccountedPrizeBalance = (totalInterest > currentAwardBalance)\n            ? totalInterest - currentAwardBalance\n            : 0;\n\n        if (unaccountedPrizeBalance > 0) {\n            currentAwardBalance = totalInterest;\n            _currentAwardBalance = currentAwardBalance;\n\n            emit AwardCaptured(unaccountedPrizeBalance);\n        }\n\n        return currentAwardBalance;\n    }\n\n    /// @inheritdoc IPrizePool\n    function depositTo(address _to, uint256 _amount)\n        external\n        override\n        nonReentrant\n        canAddLiquidity(_amount)\n    {\n        _depositTo(msg.sender, _to, _amount);\n    }\n\n    /// @inheritdoc IPrizePool\n    function depositToAndDelegate(address _to, uint256 _amount, address _delegate)\n        external\n        override\n        nonReentrant\n        canAddLiquidity(_amount)\n    {\n        _depositTo(msg.sender, _to, _amount);\n        ticket.controllerDelegateFor(msg.sender, _delegate);\n    }\n\n    /// @notice Transfers tokens in from one user and mints tickets to another\n    /// @notice _operator The user to transfer tokens from\n    /// @notice _to The user to mint tickets to\n    /// @notice _amount The amount to transfer and mint\n    function _depositTo(address _operator, address _to, uint256 _amount) internal\n    {\n        require(_canDeposit(_to, _amount), \"PrizePool/exceeds-balance-cap\");\n\n        ITicket _ticket = ticket;\n\n        _token().safeTransferFrom(_operator, address(this), _amount);\n\n        _mint(_to, _amount, _ticket);\n        _supply(_amount);\n\n        emit Deposited(_operator, _to, _ticket, _amount);\n    }\n\n    /// @inheritdoc IPrizePool\n    function withdrawFrom(address _from, uint256 _amount)\n        external\n        override\n        nonReentrant\n        returns (uint256)\n    {\n        ITicket _ticket = ticket;\n\n        // burn the tickets\n        _ticket.controllerBurnFrom(msg.sender, _from, _amount);\n\n        // redeem the tickets\n        uint256 _redeemed = _redeem(_amount);\n\n        _token().safeTransfer(_from, _redeemed);\n\n        emit Withdrawal(msg.sender, _from, _ticket, _amount, _redeemed);\n\n        return _redeemed;\n    }\n\n    /// @inheritdoc IPrizePool\n    function award(address _to, uint256 _amount) external override onlyPrizeStrategy {\n        if (_amount == 0) {\n            return;\n        }\n\n        uint256 currentAwardBalance = _currentAwardBalance;\n\n        require(_amount <= currentAwardBalance, \"PrizePool/award-exceeds-avail\");\n\n        unchecked {\n            _currentAwardBalance = currentAwardBalance - _amount;\n        }\n\n        ITicket _ticket = ticket;\n\n        _mint(_to, _amount, _ticket);\n\n        emit Awarded(_to, _ticket, _amount);\n    }\n\n    /// @inheritdoc IPrizePool\n    function transferExternalERC20(\n        address _to,\n        address _externalToken,\n        uint256 _amount\n    ) external override onlyPrizeStrategy {\n        if (_transferOut(_to, _externalToken, _amount)) {\n            emit TransferredExternalERC20(_to, _externalToken, _amount);\n        }\n    }\n\n    /// @inheritdoc IPrizePool\n    function awardExternalERC20(\n        address _to,\n        address _externalToken,\n        uint256 _amount\n    ) external override onlyPrizeStrategy {\n        if (_transferOut(_to, _externalToken, _amount)) {\n            emit AwardedExternalERC20(_to, _externalToken, _amount);\n        }\n    }\n\n    /// @inheritdoc IPrizePool\n    function awardExternalERC721(\n        address _to,\n        address _externalToken,\n        uint256[] calldata _tokenIds\n    ) external override onlyPrizeStrategy {\n        require(_canAwardExternal(_externalToken), \"PrizePool/invalid-external-token\");\n\n        if (_tokenIds.length == 0) {\n            return;\n        }\n\n        uint256[] memory _awardedTokenIds = new uint256[](_tokenIds.length); \n        bool hasAwardedTokenIds;\n\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            try IERC721(_externalToken).safeTransferFrom(address(this), _to, _tokenIds[i]) {\n                hasAwardedTokenIds = true;\n                _awardedTokenIds[i] = _tokenIds[i];\n            } catch (\n                bytes memory error\n            ) {\n                emit ErrorAwardingExternalERC721(error);\n            }\n        }\n        if (hasAwardedTokenIds) { \n            emit AwardedExternalERC721(_to, _externalToken, _awardedTokenIds);\n        }\n    }\n\n    /// @inheritdoc IPrizePool\n    function setBalanceCap(uint256 _balanceCap) external override onlyOwner returns (bool) {\n        _setBalanceCap(_balanceCap);\n        return true;\n    }\n\n    /// @inheritdoc IPrizePool\n    function setLiquidityCap(uint256 _liquidityCap) external override onlyOwner {\n        _setLiquidityCap(_liquidityCap);\n    }\n\n    /// @inheritdoc IPrizePool\n    function setTicket(ITicket _ticket) external override onlyOwner returns (bool) {\n        require(address(_ticket) != address(0), \"PrizePool/ticket-not-zero-address\");\n        require(address(ticket) == address(0), \"PrizePool/ticket-already-set\");\n\n        ticket = _ticket;\n\n        emit TicketSet(_ticket);\n\n        _setBalanceCap(type(uint256).max);\n\n        return true;\n    }\n\n    /// @inheritdoc IPrizePool\n    function setPrizeStrategy(address _prizeStrategy) external override onlyOwner {\n        _setPrizeStrategy(_prizeStrategy);\n    }\n\n    /// @inheritdoc IPrizePool\n    function compLikeDelegate(ICompLike _compLike, address _to) external override onlyOwner {\n        if (_compLike.balanceOf(address(this)) > 0) {\n            _compLike.delegate(_to);\n        }\n    }\n\n    /// @inheritdoc IERC721Receiver\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return IERC721Receiver.onERC721Received.selector;\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /// @notice Transfer out `amount` of `externalToken` to recipient `to`\n    /// @dev Only awardable `externalToken` can be transferred out\n    /// @param _to Recipient address\n    /// @param _externalToken Address of the external asset token being transferred\n    /// @param _amount Amount of external assets to be transferred\n    /// @return True if transfer is successful\n    function _transferOut(\n        address _to,\n        address _externalToken,\n        uint256 _amount\n    ) internal returns (bool) {\n        require(_canAwardExternal(_externalToken), \"PrizePool/invalid-external-token\");\n\n        if (_amount == 0) {\n            return false;\n        }\n\n        IERC20(_externalToken).safeTransfer(_to, _amount);\n\n        return true;\n    }\n\n    /// @notice Called to mint controlled tokens.  Ensures that token listener callbacks are fired.\n    /// @param _to The user who is receiving the tokens\n    /// @param _amount The amount of tokens they are receiving\n    /// @param _controlledToken The token that is going to be minted\n    function _mint(\n        address _to,\n        uint256 _amount,\n        ITicket _controlledToken\n    ) internal {\n        _controlledToken.controllerMint(_to, _amount);\n    }\n\n    /// @dev Checks if `user` can deposit in the Prize Pool based on the current balance cap.\n    /// @param _user Address of the user depositing.\n    /// @param _amount The amount of tokens to be deposited into the Prize Pool.\n    /// @return True if the Prize Pool can receive the specified `amount` of tokens.\n    function _canDeposit(address _user, uint256 _amount) internal view returns (bool) {\n        uint256 _balanceCap = balanceCap;\n\n        if (_balanceCap == type(uint256).max) return true;\n\n        return (ticket.balanceOf(_user) + _amount <= _balanceCap);\n    }\n\n    /// @dev Checks if the Prize Pool can receive liquidity based on the current cap\n    /// @param _amount The amount of liquidity to be added to the Prize Pool\n    /// @return True if the Prize Pool can receive the specified amount of liquidity\n    function _canAddLiquidity(uint256 _amount) internal view returns (bool) {\n        uint256 _liquidityCap = liquidityCap;\n        if (_liquidityCap == type(uint256).max) return true;\n        return (_ticketTotalSupply() + _amount <= _liquidityCap);\n    }\n\n    /// @dev Checks if a specific token is controlled by the Prize Pool\n    /// @param _controlledToken The address of the token to check\n    /// @return True if the token is a controlled token, false otherwise\n    function _isControlled(ITicket _controlledToken) internal view returns (bool) {\n        return (ticket == _controlledToken);\n    }\n\n    /// @notice Allows the owner to set a balance cap per `token` for the pool.\n    /// @param _balanceCap New balance cap.\n    function _setBalanceCap(uint256 _balanceCap) internal {\n        balanceCap = _balanceCap;\n        emit BalanceCapSet(_balanceCap);\n    }\n\n    /// @notice Allows the owner to set a liquidity cap for the pool\n    /// @param _liquidityCap New liquidity cap\n    function _setLiquidityCap(uint256 _liquidityCap) internal {\n        liquidityCap = _liquidityCap;\n        emit LiquidityCapSet(_liquidityCap);\n    }\n\n    /// @notice Sets the prize strategy of the prize pool.  Only callable by the owner.\n    /// @param _prizeStrategy The new prize strategy\n    function _setPrizeStrategy(address _prizeStrategy) internal {\n        require(_prizeStrategy != address(0), \"PrizePool/prizeStrategy-not-zero\");\n\n        prizeStrategy = _prizeStrategy;\n\n        emit PrizeStrategySet(_prizeStrategy);\n    }\n\n    /// @notice The current total of tickets.\n    /// @return Ticket total supply.\n    function _ticketTotalSupply() internal view returns (uint256) {\n        return ticket.totalSupply();\n    }\n\n    /// @dev Gets the current time as represented by the current block\n    /// @return The timestamp of the current block\n    function _currentTime() internal view virtual returns (uint256) {\n        return block.timestamp;\n    }\n\n    /* ============ Abstract Contract Implementatiton ============ */\n\n    /// @notice Determines whether the passed token can be transferred out as an external award.\n    /// @dev Different yield sources will hold the deposits as another kind of token: such a Compound's cToken.  The\n    /// prize strategy should not be allowed to move those tokens.\n    /// @param _externalToken The address of the token to check\n    /// @return True if the token may be awarded, false otherwise\n    function _canAwardExternal(address _externalToken) internal view virtual returns (bool);\n\n    /// @notice Returns the ERC20 asset token used for deposits.\n    /// @return The ERC20 asset token\n    function _token() internal view virtual returns (IERC20);\n\n    /// @notice Returns the total balance (in asset tokens).  This includes the deposits and interest.\n    /// @return The underlying balance of asset tokens\n    function _balance() internal virtual returns (uint256);\n\n    /// @notice Supplies asset tokens to the yield source.\n    /// @param _mintAmount The amount of asset tokens to be supplied\n    function _supply(uint256 _mintAmount) internal virtual;\n\n    /// @notice Redeems asset tokens from the yield source.\n    /// @param _redeemAmount The amount of yield-bearing tokens to be redeemed\n    /// @return The actual amount of tokens that were redeemed.\n    function _redeem(uint256 _redeemAmount) internal virtual returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface,\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\n        internal\n        view\n        returns (bool[] memory)\n    {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in _interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     * Interface identification is specified in ERC-165.\n     */\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\n        if (result.length < 32) return false;\n        return success && abi.decode(result, (bool));\n    }\n}\n"
    },
    "@pooltogether/owner-manager-contracts/contracts/Ownable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\n/**\n * @title Abstract ownable contract that can be inherited by other contracts\n * @notice Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner is the deployer of the contract.\n *\n * The owner account is set through a two steps process.\n *      1. The current `owner` calls {transferOwnership} to set a `pendingOwner`\n *      2. The `pendingOwner` calls {acceptOwnership} to accept the ownership transfer\n *\n * The manager account needs to be set using {setManager}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable {\n    address private _owner;\n    address private _pendingOwner;\n\n    /**\n     * @dev Emitted when `_pendingOwner` has been changed.\n     * @param pendingOwner new `_pendingOwner` address.\n     */\n    event OwnershipOffered(address indexed pendingOwner);\n\n    /**\n     * @dev Emitted when `_owner` has been changed.\n     * @param previousOwner previous `_owner` address.\n     * @param newOwner new `_owner` address.\n     */\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /* ============ Deploy ============ */\n\n    /**\n     * @notice Initializes the contract setting `_initialOwner` as the initial owner.\n     * @param _initialOwner Initial owner of the contract.\n     */\n    constructor(address _initialOwner) {\n        _setOwner(_initialOwner);\n    }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * @notice Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @notice Gets current `_pendingOwner`.\n     * @return Current `_pendingOwner` address.\n     */\n    function pendingOwner() external view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @notice Renounce ownership of the contract.\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() external virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n    * @notice Allows current owner to set the `_pendingOwner` address.\n    * @param _newOwner Address to transfer ownership to.\n    */\n    function transferOwnership(address _newOwner) external onlyOwner {\n        require(_newOwner != address(0), \"Ownable/pendingOwner-not-zero-address\");\n\n        _pendingOwner = _newOwner;\n\n        emit OwnershipOffered(_newOwner);\n    }\n\n    /**\n    * @notice Allows the `_pendingOwner` address to finalize the transfer.\n    * @dev This function is only callable by the `_pendingOwner`.\n    */\n    function claimOwnership() external onlyPendingOwner {\n        _setOwner(_pendingOwner);\n        _pendingOwner = address(0);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * @notice Internal function to set the `_owner` of the contract.\n     * @param _newOwner New `_owner` address.\n     */\n    function _setOwner(address _newOwner) private {\n        address _oldOwner = _owner;\n        _owner = _newOwner;\n        emit OwnershipTransferred(_oldOwner, _newOwner);\n    }\n\n    /* ============ Modifier Functions ============ */\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable/caller-not-owner\");\n        _;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the `pendingOwner`.\n    */\n    modifier onlyPendingOwner() {\n        require(msg.sender == _pendingOwner, \"Ownable/caller-not-pendingOwner\");\n        _;\n    }\n}\n"
    },
    "contracts/external/compound/ICompLike.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ICompLike is IERC20 {\n    function getCurrentVotes(address account) external view returns (uint96);\n\n    function delegate(address delegate) external;\n}\n"
    },
    "contracts/interfaces/IPrizePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"../external/compound/ICompLike.sol\";\nimport \"../interfaces/ITicket.sol\";\n\ninterface IPrizePool {\n    /// @dev Event emitted when controlled token is added\n    event ControlledTokenAdded(ITicket indexed token);\n\n    event AwardCaptured(uint256 amount);\n\n    /// @dev Event emitted when assets are deposited\n    event Deposited(\n        address indexed operator,\n        address indexed to,\n        ITicket indexed token,\n        uint256 amount\n    );\n\n    /// @dev Event emitted when interest is awarded to a winner\n    event Awarded(address indexed winner, ITicket indexed token, uint256 amount);\n\n    /// @dev Event emitted when external ERC20s are awarded to a winner\n    event AwardedExternalERC20(address indexed winner, address indexed token, uint256 amount);\n\n    /// @dev Event emitted when external ERC20s are transferred out\n    event TransferredExternalERC20(address indexed to, address indexed token, uint256 amount);\n\n    /// @dev Event emitted when external ERC721s are awarded to a winner\n    event AwardedExternalERC721(address indexed winner, address indexed token, uint256[] tokenIds);\n\n    /// @dev Event emitted when assets are withdrawn\n    event Withdrawal(\n        address indexed operator,\n        address indexed from,\n        ITicket indexed token,\n        uint256 amount,\n        uint256 redeemed\n    );\n\n    /// @dev Event emitted when the Balance Cap is set\n    event BalanceCapSet(uint256 balanceCap);\n\n    /// @dev Event emitted when the Liquidity Cap is set\n    event LiquidityCapSet(uint256 liquidityCap);\n\n    /// @dev Event emitted when the Prize Strategy is set\n    event PrizeStrategySet(address indexed prizeStrategy);\n\n    /// @dev Event emitted when the Ticket is set\n    event TicketSet(ITicket indexed ticket);\n\n    /// @dev Emitted when there was an error thrown awarding an External ERC721\n    event ErrorAwardingExternalERC721(bytes error);\n\n    /// @notice Deposit assets into the Prize Pool in exchange for tokens\n    /// @param to The address receiving the newly minted tokens\n    /// @param amount The amount of assets to deposit\n    function depositTo(address to, uint256 amount) external;\n\n    /// @notice Deposit assets into the Prize Pool in exchange for tokens,\n    /// then sets the delegate on behalf of the caller.\n    /// @param to The address receiving the newly minted tokens\n    /// @param amount The amount of assets to deposit\n    /// @param delegate The address to delegate to for the caller\n    function depositToAndDelegate(address to, uint256 amount, address delegate) external;\n\n    /// @notice Withdraw assets from the Prize Pool instantly.\n    /// @param from The address to redeem tokens from.\n    /// @param amount The amount of tokens to redeem for assets.\n    /// @return The actual amount withdrawn\n    function withdrawFrom(address from, uint256 amount) external returns (uint256);\n\n    /// @notice Called by the prize strategy to award prizes.\n    /// @dev The amount awarded must be less than the awardBalance()\n    /// @param to The address of the winner that receives the award\n    /// @param amount The amount of assets to be awarded\n    function award(address to, uint256 amount) external;\n\n    /// @notice Returns the balance that is available to award.\n    /// @dev captureAwardBalance() should be called first\n    /// @return The total amount of assets to be awarded for the current prize\n    function awardBalance() external view returns (uint256);\n\n    /// @notice Captures any available interest as award balance.\n    /// @dev This function also captures the reserve fees.\n    /// @return The total amount of assets to be awarded for the current prize\n    function captureAwardBalance() external returns (uint256);\n\n    /// @dev Checks with the Prize Pool if a specific token type may be awarded as an external prize\n    /// @param externalToken The address of the token to check\n    /// @return True if the token may be awarded, false otherwise\n    function canAwardExternal(address externalToken) external view returns (bool);\n\n    // @dev Returns the total underlying balance of all assets. This includes both principal and interest.\n    /// @return The underlying balance of assets\n    function balance() external returns (uint256);\n\n    /**\n     * @notice Read internal Ticket accounted balance.\n     * @return uint256 accountBalance\n     */\n    function getAccountedBalance() external view returns (uint256);\n\n    /**\n     * @notice Read internal balanceCap variable\n     */\n    function getBalanceCap() external view returns (uint256);\n\n    /**\n     * @notice Read internal liquidityCap variable\n     */\n    function getLiquidityCap() external view returns (uint256);\n\n    /**\n     * @notice Read ticket variable\n     */\n    function getTicket() external view returns (ITicket);\n\n    /**\n     * @notice Read token variable\n     */\n    function getToken() external view returns (address);\n\n    /**\n     * @notice Read prizeStrategy variable\n     */\n    function getPrizeStrategy() external view returns (address);\n\n    /// @dev Checks if a specific token is controlled by the Prize Pool\n    /// @param controlledToken The address of the token to check\n    /// @return True if the token is a controlled token, false otherwise\n    function isControlled(ITicket controlledToken) external view returns (bool);\n\n    /// @notice Called by the Prize-Strategy to transfer out external ERC20 tokens\n    /// @dev Used to transfer out tokens held by the Prize Pool.  Could be liquidated, or anything.\n    /// @param to The address of the winner that receives the award\n    /// @param externalToken The address of the external asset token being awarded\n    /// @param amount The amount of external assets to be awarded\n    function transferExternalERC20(\n        address to,\n        address externalToken,\n        uint256 amount\n    ) external;\n\n    /// @notice Called by the Prize-Strategy to award external ERC20 prizes\n    /// @dev Used to award any arbitrary tokens held by the Prize Pool\n    /// @param to The address of the winner that receives the award\n    /// @param amount The amount of external assets to be awarded\n    /// @param externalToken The address of the external asset token being awarded\n    function awardExternalERC20(\n        address to,\n        address externalToken,\n        uint256 amount\n    ) external;\n\n    /// @notice Called by the prize strategy to award external ERC721 prizes\n    /// @dev Used to award any arbitrary NFTs held by the Prize Pool\n    /// @param to The address of the winner that receives the award\n    /// @param externalToken The address of the external NFT token being awarded\n    /// @param tokenIds An array of NFT Token IDs to be transferred\n    function awardExternalERC721(\n        address to,\n        address externalToken,\n        uint256[] calldata tokenIds\n    ) external;\n\n    /// @notice Allows the owner to set a balance cap per `token` for the pool.\n    /// @dev If a user wins, his balance can go over the cap. He will be able to withdraw the excess but not deposit.\n    /// @dev Needs to be called after deploying a prize pool to be able to deposit into it.\n    /// @param balanceCap New balance cap.\n    /// @return True if new balance cap has been successfully set.\n    function setBalanceCap(uint256 balanceCap) external returns (bool);\n\n    /// @notice Allows the Governor to set a cap on the amount of liquidity that he pool can hold\n    /// @param liquidityCap The new liquidity cap for the prize pool\n    function setLiquidityCap(uint256 liquidityCap) external;\n\n    /// @notice Sets the prize strategy of the prize pool.  Only callable by the owner.\n    /// @param _prizeStrategy The new prize strategy.\n    function setPrizeStrategy(address _prizeStrategy) external;\n\n    /// @notice Set prize pool ticket.\n    /// @param ticket Address of the ticket to set.\n    /// @return True if ticket has been successfully set.\n    function setTicket(ITicket ticket) external returns (bool);\n\n    /// @notice Delegate the votes for a Compound COMP-like token held by the prize pool\n    /// @param compLike The COMP-like token held by the prize pool that should be delegated\n    /// @param to The address to delegate to\n    function compLikeDelegate(ICompLike compLike, address to) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/test/PrizePoolHarness.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"../prize-pool/PrizePool.sol\";\nimport \"./YieldSourceStub.sol\";\n\ncontract PrizePoolHarness is PrizePool {\n    uint256 public currentTime;\n\n    YieldSourceStub public stubYieldSource;\n\n    constructor(address _owner, YieldSourceStub _stubYieldSource) PrizePool(_owner) {\n        stubYieldSource = _stubYieldSource;\n    }\n\n    function mint(\n        address _to,\n        uint256 _amount,\n        ITicket _controlledToken\n    ) external {\n        _mint(_to, _amount, _controlledToken);\n    }\n\n    function supply(uint256 mintAmount) external {\n        _supply(mintAmount);\n    }\n\n    function redeem(uint256 redeemAmount) external {\n        _redeem(redeemAmount);\n    }\n\n    function setCurrentTime(uint256 _nowTime) external {\n        currentTime = _nowTime;\n    }\n\n    function _currentTime() internal view override returns (uint256) {\n        return currentTime;\n    }\n\n    function internalCurrentTime() external view returns (uint256) {\n        return super._currentTime();\n    }\n\n    function _canAwardExternal(address _externalToken) internal view override returns (bool) {\n        return stubYieldSource.canAwardExternal(_externalToken);\n    }\n\n    function _token() internal view override returns (IERC20) {\n        return IERC20(stubYieldSource.depositToken());\n    }\n\n    function _balance() internal override returns (uint256) {\n        return stubYieldSource.balanceOfToken(address(this));\n    }\n\n    function _supply(uint256 mintAmount) internal override {\n        stubYieldSource.supplyTokenTo(mintAmount, address(this));\n    }\n\n    function _redeem(uint256 redeemAmount) internal override returns (uint256) {\n        return stubYieldSource.redeemToken(redeemAmount);\n    }\n\n    function setCurrentAwardBalance(uint256 amount) external {\n        _currentAwardBalance = amount;\n    }\n}\n"
    },
    "contracts/test/YieldSourceStub.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@pooltogether/yield-source-interface/contracts/IYieldSource.sol\";\n\ninterface YieldSourceStub is IYieldSource {\n    function canAwardExternal(address _externalToken) external view returns (bool);\n}\n"
    },
    "@pooltogether/yield-source-interface/contracts/IYieldSource.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.6.0;\n\n/// @title Defines the functions used to interact with a yield source.  The Prize Pool inherits this contract.\n/// @notice Prize Pools subclasses need to implement this interface so that yield can be generated.\ninterface IYieldSource {\n    /// @notice Returns the ERC20 asset token used for deposits.\n    /// @return The ERC20 asset token address.\n    function depositToken() external view returns (address);\n\n    /// @notice Returns the total balance (in asset tokens).  This includes the deposits and interest.\n    /// @return The underlying balance of asset tokens.\n    function balanceOfToken(address addr) external returns (uint256);\n\n    /// @notice Supplies tokens to the yield source.  Allows assets to be supplied on other user's behalf using the `to` param.\n    /// @param amount The amount of asset tokens to be supplied.  Denominated in `depositToken()` as above.\n    /// @param to The user whose balance will receive the tokens\n    function supplyTokenTo(uint256 amount, address to) external;\n\n    /// @notice Redeems tokens from the yield source.\n    /// @param amount The amount of asset tokens to withdraw.  Denominated in `depositToken()` as above.\n    /// @return The actual amount of interst bearing tokens that were redeemed.\n    function redeemToken(uint256 amount) external returns (uint256);\n}\n"
    },
    "contracts/prize-pool/YieldSourcePrizePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@pooltogether/yield-source-interface/contracts/IYieldSource.sol\";\n\nimport \"./PrizePool.sol\";\n\n/**\n * @title  PoolTogether V4 YieldSourcePrizePool\n * @author PoolTogether Inc Team\n * @notice The Yield Source Prize Pool uses a yield source contract to generate prizes.\n *         Funds that are deposited into the prize pool are then deposited into a yield source. (i.e. Aave, Compound, etc...)\n */\ncontract YieldSourcePrizePool is PrizePool {\n    using SafeERC20 for IERC20;\n    using Address for address;\n\n    /// @notice Address of the yield source.\n    IYieldSource public immutable yieldSource;\n\n    /// @dev Emitted when yield source prize pool is deployed.\n    /// @param yieldSource Address of the yield source.\n    event Deployed(address indexed yieldSource);\n\n    /// @notice Emitted when stray deposit token balance in this contract is swept\n    /// @param amount The amount that was swept\n    event Swept(uint256 amount);\n\n    /// @notice Deploy the Prize Pool and Yield Service with the required contract connections\n    /// @param _owner Address of the Yield Source Prize Pool owner\n    /// @param _yieldSource Address of the yield source\n    constructor(address _owner, IYieldSource _yieldSource) PrizePool(_owner) {\n        require(\n            address(_yieldSource) != address(0),\n            \"YieldSourcePrizePool/yield-source-not-zero-address\"\n        );\n\n        yieldSource = _yieldSource;\n\n        // A hack to determine whether it's an actual yield source\n        (bool succeeded, bytes memory data) = address(_yieldSource).staticcall(\n            abi.encodePacked(_yieldSource.depositToken.selector)\n        );\n        address resultingAddress;\n        if (data.length > 0) {\n            resultingAddress = abi.decode(data, (address));\n        }\n        require(succeeded && resultingAddress != address(0), \"YieldSourcePrizePool/invalid-yield-source\");\n\n        emit Deployed(address(_yieldSource));\n    }\n\n    /// @notice Sweeps any stray balance of deposit tokens into the yield source.\n    /// @dev This becomes prize money\n    function sweep() external nonReentrant onlyOwner {\n        uint256 balance = _token().balanceOf(address(this));\n        _supply(balance);\n\n        emit Swept(balance);\n    }\n\n    /// @notice Determines whether the passed token can be transferred out as an external award.\n    /// @dev Different yield sources will hold the deposits as another kind of token: such a Compound's cToken.  The\n    /// prize strategy should not be allowed to move those tokens.\n    /// @param _externalToken The address of the token to check\n    /// @return True if the token may be awarded, false otherwise\n    function _canAwardExternal(address _externalToken) internal view override returns (bool) {\n        IYieldSource _yieldSource = yieldSource;\n        return (\n            _externalToken != address(_yieldSource) &&\n            _externalToken != _yieldSource.depositToken()\n        );\n    }\n\n    /// @notice Returns the total balance (in asset tokens).  This includes the deposits and interest.\n    /// @return The underlying balance of asset tokens\n    function _balance() internal override returns (uint256) {\n        return yieldSource.balanceOfToken(address(this));\n    }\n\n    /// @notice Returns the address of the ERC20 asset token used for deposits.\n    /// @return Address of the ERC20 asset token.\n    function _token() internal view override returns (IERC20) {\n        return IERC20(yieldSource.depositToken());\n    }\n\n    /// @notice Supplies asset tokens to the yield source.\n    /// @param _mintAmount The amount of asset tokens to be supplied\n    function _supply(uint256 _mintAmount) internal override {\n        _token().safeIncreaseAllowance(address(yieldSource), _mintAmount);\n        yieldSource.supplyTokenTo(_mintAmount, address(this));\n    }\n\n    /// @notice Redeems asset tokens from the yield source.\n    /// @param _redeemAmount The amount of yield-bearing tokens to be redeemed\n    /// @return The actual amount of tokens that were redeemed.\n    function _redeem(uint256 _redeemAmount) internal override returns (uint256) {\n        return yieldSource.redeemToken(_redeemAmount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/test/ERC20Mintable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\n * which have permission to mint (create) new tokens as they see fit.\n *\n * At construction, the deployer of the contract is the only minter.\n */\ncontract ERC20Mintable is ERC20 {\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {}\n\n    /**\n     * @dev See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the {MinterRole}.\n     */\n    function mint(address account, uint256 amount) public {\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) public returns (bool) {\n        _burn(account, amount);\n        return true;\n    }\n\n    function masterTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) public {\n        _transfer(from, to, amount);\n    }\n}\n"
    },
    "contracts/test/ReserveHarness.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"../Reserve.sol\";\nimport \"./ERC20Mintable.sol\";\n\ncontract ReserveHarness is Reserve {\n    constructor(address _owner, IERC20 _token) Reserve(_owner, _token) {}\n\n    function setObservationsAt(ObservationLib.Observation[] calldata observations) external {\n        for (uint256 i = 0; i < observations.length; i++) {\n            reserveAccumulators[i] = observations[i];\n        }\n\n        nextIndex = uint24(observations.length);\n        cardinality = uint24(observations.length);\n    }\n\n    function doubleCheckpoint(ERC20Mintable _token, uint256 _amount) external {\n        _checkpoint();\n        _token.mint(address(this), _amount);\n        _checkpoint();\n    }\n}\n"
    },
    "contracts/Reserve.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./interfaces/IReserve.sol\";\nimport \"./libraries/ObservationLib.sol\";\nimport \"./libraries/RingBufferLib.sol\";\n\n/**\n    * @title  PoolTogether V4 Reserve\n    * @author PoolTogether Inc Team\n    * @notice The Reserve contract provides historical lookups of a token balance increase during a target timerange.\n              As the Reserve contract transfers OUT tokens, the withdraw accumulator is increased. When tokens are\n              transfered IN new checkpoint *can* be created if checkpoint() is called after transfering tokens.\n              By using the reserve and withdraw accumulators to create a new checkpoint, any contract or account\n              can lookup the balance increase of the reserve for a target timerange.   \n    * @dev    By calculating the total held tokens in a specific time range, contracts that require knowledge \n              of captured interest during a draw period, can easily call into the Reserve and deterministically\n              determine the newly aqcuired tokens for that time range. \n */\ncontract Reserve is IReserve, Manageable {\n    using SafeERC20 for IERC20;\n\n    /// @notice ERC20 token\n    IERC20 public immutable token;\n\n    /// @notice Total withdraw amount from reserve\n    uint224 public withdrawAccumulator;\n    uint32 private _gap;\n\n    uint24 internal nextIndex;\n    uint24 internal cardinality;\n\n    /// @notice The maximum number of twab entries\n    uint24 internal constant MAX_CARDINALITY = 16777215; // 2**24 - 1\n\n    ObservationLib.Observation[MAX_CARDINALITY] internal reserveAccumulators;\n\n    /* ============ Events ============ */\n\n    event Deployed(IERC20 indexed token);\n\n    /* ============ Constructor ============ */\n\n    /**\n     * @notice Constructs Ticket with passed parameters.\n     * @param _owner Owner address\n     * @param _token ERC20 address\n     */\n    constructor(address _owner, IERC20 _token) Ownable(_owner) {\n        token = _token;\n        emit Deployed(_token);\n    }\n\n    /* ============ External Functions ============ */\n\n    /// @inheritdoc IReserve\n    function checkpoint() external override {\n        _checkpoint();\n    }\n\n    /// @inheritdoc IReserve\n    function getToken() external view override returns (IERC20) {\n        return token;\n    }\n\n    /// @inheritdoc IReserve\n    function getReserveAccumulatedBetween(uint32 _startTimestamp, uint32 _endTimestamp)\n        external\n        view\n        override\n        returns (uint224)\n    {\n        require(_startTimestamp < _endTimestamp, \"Reserve/start-less-then-end\");\n        uint24 _cardinality = cardinality;\n        uint24 _nextIndex = nextIndex;\n\n        (uint24 _newestIndex, ObservationLib.Observation memory _newestObservation) = _getNewestObservation(_nextIndex);\n        (uint24 _oldestIndex, ObservationLib.Observation memory _oldestObservation) = _getOldestObservation(_nextIndex);\n\n        uint224 _start = _getReserveAccumulatedAt(\n            _newestObservation,\n            _oldestObservation,\n            _newestIndex,\n            _oldestIndex,\n            _cardinality,\n            _startTimestamp\n        );\n\n        uint224 _end = _getReserveAccumulatedAt(\n            _newestObservation,\n            _oldestObservation,\n            _newestIndex,\n            _oldestIndex,\n            _cardinality,\n            _endTimestamp\n        );\n\n        return _end - _start;\n    }\n\n    /// @inheritdoc IReserve\n    function withdrawTo(address _recipient, uint256 _amount) external override onlyManagerOrOwner {\n        _checkpoint();\n\n        withdrawAccumulator += uint224(_amount);\n        \n        token.safeTransfer(_recipient, _amount);\n\n        emit Withdrawn(_recipient, _amount);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * @notice Find optimal observation checkpoint using target timestamp\n     * @dev    Uses binary search if target timestamp is within ring buffer range.\n     * @param _newestObservation ObservationLib.Observation\n     * @param _oldestObservation ObservationLib.Observation\n     * @param _newestIndex The index of the newest observation\n     * @param _oldestIndex The index of the oldest observation\n     * @param _cardinality       RingBuffer Range\n     * @param _timestamp          Timestamp target\n     *\n     * @return Optimal reserveAccumlator for timestamp.\n     */\n    function _getReserveAccumulatedAt(\n        ObservationLib.Observation memory _newestObservation,\n        ObservationLib.Observation memory _oldestObservation,\n        uint24 _newestIndex,\n        uint24 _oldestIndex,\n        uint24 _cardinality,\n        uint32 _timestamp\n    ) internal view returns (uint224) {\n        uint32 timeNow = uint32(block.timestamp);\n\n        // IF empty ring buffer exit early.\n        if (_cardinality == 0) return 0;\n\n        /**\n         * Ring Buffer Search Optimization\n         * Before performing binary search on the ring buffer check\n         * to see if timestamp is within range of [o T n] by comparing\n         * the target timestamp to the oldest/newest observation.timestamps\n         * IF the timestamp is out of the ring buffer range avoid starting\n         * a binary search, because we can return NULL or oldestObservation.amount\n         */\n\n        /**\n         * IF oldestObservation.timestamp is after timestamp: T[old ]\n         * the Reserve did NOT have a balance or the ring buffer\n         * no longer contains that timestamp checkpoint.\n         */\n        if (_oldestObservation.timestamp > _timestamp) {\n            return 0;\n        }\n\n        /**\n         * IF newestObservation.timestamp is before timestamp: [ new]T\n         * return _newestObservation.amount since observation\n         * contains the highest checkpointed reserveAccumulator.\n         */\n        if (_newestObservation.timestamp <= _timestamp) {\n            return _newestObservation.amount;\n        }\n\n        // IF the timestamp is witin range of ring buffer start/end: [new T old]\n        // FIND the closest observation to the left(or exact) of timestamp: [OT ]\n        (\n            ObservationLib.Observation memory beforeOrAt,\n            ObservationLib.Observation memory atOrAfter\n        ) = ObservationLib.binarySearch(\n                reserveAccumulators,\n                _newestIndex,\n                _oldestIndex,\n                _timestamp,\n                _cardinality,\n                timeNow\n            );\n\n        // IF target timestamp is EXACT match for atOrAfter.timestamp observation return amount.\n        // NOT having an exact match with atOrAfter means values will contain accumulator value AFTER the searchable range.\n        // ELSE return observation.totalDepositedAccumulator closest to LEFT of target timestamp.\n        if (atOrAfter.timestamp == _timestamp) {\n            return atOrAfter.amount;\n        } else {\n            return beforeOrAt.amount;\n        }\n    }\n\n    /// @notice Records the currently accrued reserve amount.\n    function _checkpoint() internal {\n        uint24 _cardinality = cardinality;\n        uint24 _nextIndex = nextIndex;\n        uint256 _balanceOfReserve = token.balanceOf(address(this));\n        uint224 _withdrawAccumulator = withdrawAccumulator; //sload\n        (uint24 newestIndex, ObservationLib.Observation memory newestObservation) = _getNewestObservation(_nextIndex);\n\n        /**\n         * IF tokens have been deposited into Reserve contract since the last checkpoint\n         * create a new Reserve balance checkpoint. The will will update multiple times in a single block.\n         */\n        if (_balanceOfReserve + _withdrawAccumulator > newestObservation.amount) {\n            uint32 nowTime = uint32(block.timestamp);\n\n            // checkpointAccumulator = currentBalance + totalWithdraws\n            uint224 newReserveAccumulator = uint224(_balanceOfReserve) + _withdrawAccumulator;\n\n            // IF newestObservation IS NOT in the current block.\n            // CREATE observation in the accumulators ring buffer.\n            if (newestObservation.timestamp != nowTime) {\n                reserveAccumulators[_nextIndex] = ObservationLib.Observation({\n                    amount: newReserveAccumulator,\n                    timestamp: nowTime\n                });\n                nextIndex = uint24(RingBufferLib.nextIndex(_nextIndex, MAX_CARDINALITY));\n                if (_cardinality < MAX_CARDINALITY) {\n                    cardinality = _cardinality + 1;\n                }\n            }\n            // ELSE IF newestObservation IS in the current block.\n            // UPDATE the checkpoint previously created in block history.\n            else {\n                reserveAccumulators[newestIndex] = ObservationLib.Observation({\n                    amount: newReserveAccumulator,\n                    timestamp: nowTime\n                });\n            }\n\n            emit Checkpoint(newReserveAccumulator, _withdrawAccumulator);\n        }\n    }\n\n    /// @notice Retrieves the oldest observation\n    /// @param _nextIndex The next index of the Reserve observations\n    function _getOldestObservation(uint24 _nextIndex)\n        internal\n        view\n        returns (uint24 index, ObservationLib.Observation memory observation)\n    {\n        index = _nextIndex;\n        observation = reserveAccumulators[index];\n\n        // If the TWAB is not initialized we go to the beginning of the TWAB circular buffer at index 0\n        if (observation.timestamp == 0) {\n            index = 0;\n            observation = reserveAccumulators[0];\n        }\n    }\n\n    /// @notice Retrieves the newest observation\n    /// @param _nextIndex The next index of the Reserve observations\n    function _getNewestObservation(uint24 _nextIndex)\n        internal\n        view\n        returns (uint24 index, ObservationLib.Observation memory observation)\n    {\n        index = uint24(RingBufferLib.newestIndex(_nextIndex, MAX_CARDINALITY));\n        observation = reserveAccumulators[index];\n    }\n}\n"
    },
    "@pooltogether/owner-manager-contracts/contracts/Manageable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\n\n/**\n * @title Abstract manageable contract that can be inherited by other contracts\n * @notice Contract module based on Ownable which provides a basic access control mechanism, where\n * there is an owner and a manager that can be granted exclusive access to specific functions.\n *\n * By default, the owner is the deployer of the contract.\n *\n * The owner account is set through a two steps process.\n *      1. The current `owner` calls {transferOwnership} to set a `pendingOwner`\n *      2. The `pendingOwner` calls {acceptOwnership} to accept the ownership transfer\n *\n * The manager account needs to be set using {setManager}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyManager`, which can be applied to your functions to restrict their use to\n * the manager.\n */\nabstract contract Manageable is Ownable {\n    address private _manager;\n\n    /**\n     * @dev Emitted when `_manager` has been changed.\n     * @param previousManager previous `_manager` address.\n     * @param newManager new `_manager` address.\n     */\n    event ManagerTransferred(address indexed previousManager, address indexed newManager);\n\n    /* ============ External Functions ============ */\n\n    /**\n     * @notice Gets current `_manager`.\n     * @return Current `_manager` address.\n     */\n    function manager() public view virtual returns (address) {\n        return _manager;\n    }\n\n    /**\n     * @notice Set or change of manager.\n     * @dev Throws if called by any account other than the owner.\n     * @param _newManager New _manager address.\n     * @return Boolean to indicate if the operation was successful or not.\n     */\n    function setManager(address _newManager) external onlyOwner returns (bool) {\n        return _setManager(_newManager);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * @notice Set or change of manager.\n     * @param _newManager New _manager address.\n     * @return Boolean to indicate if the operation was successful or not.\n     */\n    function _setManager(address _newManager) private returns (bool) {\n        address _previousManager = _manager;\n\n        require(_newManager != _previousManager, \"Manageable/existing-manager-address\");\n\n        _manager = _newManager;\n\n        emit ManagerTransferred(_previousManager, _newManager);\n        return true;\n    }\n\n    /* ============ Modifier Functions ============ */\n\n    /**\n     * @dev Throws if called by any account other than the manager.\n     */\n    modifier onlyManager() {\n        require(manager() == msg.sender, \"Manageable/caller-not-manager\");\n        _;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the manager or the owner.\n     */\n    modifier onlyManagerOrOwner() {\n        require(manager() == msg.sender || owner() == msg.sender, \"Manageable/caller-not-manager-or-owner\");\n        _;\n    }\n}\n"
    },
    "contracts/interfaces/IReserve.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IReserve {\n    /**\n     * @notice Emit when checkpoint is created.\n     * @param reserveAccumulated  Total depsosited\n     * @param withdrawAccumulated Total withdrawn\n     */\n\n    event Checkpoint(uint256 reserveAccumulated, uint256 withdrawAccumulated);\n    /**\n     * @notice Emit when the withdrawTo function has executed.\n     * @param recipient Address receiving funds\n     * @param amount    Amount of tokens transfered.\n     */\n    event Withdrawn(address indexed recipient, uint256 amount);\n\n    /**\n     * @notice Create observation checkpoint in ring bufferr.\n     * @dev    Calculates total desposited tokens since last checkpoint and creates new accumulator checkpoint.\n     */\n    function checkpoint() external;\n\n    /**\n     * @notice Read global token value.\n     * @return IERC20\n     */\n    function getToken() external view returns (IERC20);\n\n    /**\n     * @notice Calculate token accumulation beween timestamp range.\n     * @dev    Search the ring buffer for two checkpoint observations and diffs accumulator amount.\n     * @param startTimestamp Account address\n     * @param endTimestamp   Transfer amount\n     */\n    function getReserveAccumulatedBetween(uint32 startTimestamp, uint32 endTimestamp)\n        external\n        returns (uint224);\n\n    /**\n     * @notice Transfer Reserve token balance to recipient address.\n     * @dev    Creates checkpoint before token transfer. Increments withdrawAccumulator with amount.\n     * @param recipient Account address\n     * @param amount    Transfer amount\n     */\n    function withdrawTo(address recipient, uint256 amount) external;\n}\n"
    },
    "contracts/test/TwabLibraryExposed.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"../libraries/TwabLib.sol\";\nimport \"../libraries/RingBufferLib.sol\";\n\n/// @title TwabLibExposed contract to test TwabLib library\n/// @author PoolTogether Inc.\ncontract TwabLibExposed {\n    uint24 public constant MAX_CARDINALITY = 16777215;\n\n    using TwabLib for ObservationLib.Observation[MAX_CARDINALITY];\n\n    TwabLib.Account account;\n\n    event Updated(\n        TwabLib.AccountDetails accountDetails,\n        ObservationLib.Observation twab,\n        bool isNew\n    );\n\n    function details() external view returns (TwabLib.AccountDetails memory) {\n        return account.details;\n    }\n\n    function twabs() external view returns (ObservationLib.Observation[] memory) {\n        ObservationLib.Observation[] memory _twabs = new ObservationLib.Observation[](\n            account.details.cardinality\n        );\n\n        for (uint256 i = 0; i < _twabs.length; i++) {\n            _twabs[i] = account.twabs[i];\n        }\n\n        return _twabs;\n    }\n\n    function increaseBalance(uint256 _amount, uint32 _currentTime)\n        external\n        returns (\n            TwabLib.AccountDetails memory accountDetails,\n            ObservationLib.Observation memory twab,\n            bool isNew\n        )\n    {\n        (accountDetails, twab, isNew) = TwabLib.increaseBalance(account, uint208(_amount), _currentTime);\n        account.details = accountDetails;\n        emit Updated(accountDetails, twab, isNew);\n    }\n\n    function decreaseBalance(\n        uint256 _amount,\n        string memory _revertMessage,\n        uint32 _currentTime\n    )\n        external\n        returns (\n            TwabLib.AccountDetails memory accountDetails,\n            ObservationLib.Observation memory twab,\n            bool isNew\n        )\n    {\n        (accountDetails, twab, isNew) = TwabLib.decreaseBalance(\n            account,\n            uint208(_amount),\n            _revertMessage,\n            _currentTime\n        );\n\n        account.details = accountDetails;\n\n        emit Updated(accountDetails, twab, isNew);\n    }\n\n    function getAverageBalanceBetween(\n        uint32 _startTime,\n        uint32 _endTime,\n        uint32 _currentTime\n    ) external view returns (uint256) {\n        return\n            TwabLib.getAverageBalanceBetween(\n                account.twabs,\n                account.details,\n                _startTime,\n                _endTime,\n                _currentTime\n            );\n    }\n\n    function oldestTwab()\n        external\n        view\n        returns (uint24 index, ObservationLib.Observation memory twab)\n    {\n        return TwabLib.oldestTwab(account.twabs, account.details);\n    }\n\n    function newestTwab()\n        external\n        view\n        returns (uint24 index, ObservationLib.Observation memory twab)\n    {\n        return TwabLib.newestTwab(account.twabs, account.details);\n    }\n\n    function getBalanceAt(uint32 _target, uint32 _currentTime) external view returns (uint256) {\n        return TwabLib.getBalanceAt(account.twabs, account.details, _target, _currentTime);\n    }\n\n    function push(TwabLib.AccountDetails memory _accountDetails) external pure returns (TwabLib.AccountDetails memory) {\n        return TwabLib.push(_accountDetails);\n    }\n}\n"
    },
    "contracts/GaugeController.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@pooltogether/owner-manager-contracts/contracts/Ownable.sol\";\n\nimport \"./interfaces/IGaugeController.sol\";\nimport \"./interfaces/IGaugeReward.sol\";\nimport \"./libraries/TwabLib.sol\";\nimport \"./libraries/ExtendedSafeCastLib.sol\";\n\ncontract GaugeController is IGaugeController, Ownable {\n    using ExtendedSafeCastLib for uint256;\n\n    struct GaugeInfo {\n        uint256 weight;\n    }\n\n    IERC20 public token;\n    IGaugeReward public gaugeReward;\n\n    /**\n     * @notice Tracks user deposit balance\n     * @dev user => balance\n     */\n    mapping(address => uint256) public balances;\n\n    /**\n     * @notice Tracks user balance per gauge\n     * @dev user => gauge => balance\n     */\n    mapping(address => mapping(address => uint256)) public userGaugeBalance;\n\n    /**\n     * @notice Tracks gauge total voting power\n     * @dev gauge => voting power\n     */\n    mapping(address => TwabLib.Account) internal gaugeTwabs;\n\n    /**\n     * @notice Tracks gauge scale total voting power\n     * @dev gauge => scale voting power\n     */\n    mapping(address => TwabLib.Account) internal gaugeScaleTwabs;\n\n    /* ============ Events ============ */\n\n    /**\n     * @notice Event emitted when the GaugeReward contract address is set\n     * @param gaugeReward Address of the newly set GaugeReward contract\n     */\n    event GaugeRewardSet(IGaugeReward gaugeReward);\n\n    /**\n     * @notice Event emitted when the contract is deployed\n     * @param token Address of the token being staked in the gauge\n     */\n    event Deployed(IERC20 token);\n\n    /* ============ Constructor ============ */\n\n    /**\n     * @notice GaugeController constructor\n     * @param _token Address of the token being staked in the gauge\n     * @param _owner Address of the contract owner\n     */\n    constructor(IERC20 _token, address _owner) Ownable(_owner)  {\n        require(_owner != address(0), \"GC/owner-not-zero-address\");\n        require(address(_token) != address(0), \"GC/token-not-zero-address\");\n        token = _token;\n\n        emit Deployed(_token);\n    }\n\n    /* ============ External Functions ============ */\n\n    function deposit(address _to, uint256 _amount) public {\n        balances[_to] += _amount;\n        token.transferFrom(msg.sender, address(this), _amount);\n    }\n\n    function withdraw(uint256 _amount) public {\n        balances[msg.sender] -= _amount;\n        token.transfer(msg.sender, _amount);\n    }\n\n    function increaseGauge(address _gauge, uint256 _amount) public requireGauge(_gauge) {\n        balances[msg.sender] -= _amount;\n        userGaugeBalance[msg.sender][_gauge] += _amount;\n\n        TwabLib.Account storage gaugeTwab = gaugeTwabs[_gauge];\n        (TwabLib.AccountDetails memory twabDetails, , ) = TwabLib.increaseBalance(\n            gaugeTwab,\n            _amount.toUint208(),\n            uint32(block.timestamp)\n        );\n\n        gaugeTwab.details = twabDetails;\n\n        gaugeReward.afterIncreaseGauge(_gauge, msg.sender, uint256(twabDetails.balance) - _amount);\n    }\n\n    function decreaseGauge(address _gauge, uint256 _amount) public requireGauge(_gauge) {\n        balances[msg.sender] += _amount;\n        userGaugeBalance[msg.sender][_gauge] -= _amount;\n\n        TwabLib.Account storage gaugeTwab = gaugeTwabs[_gauge];\n        (TwabLib.AccountDetails memory twabDetails, , ) = TwabLib.decreaseBalance(\n            gaugeTwab,\n            _amount.toUint208(),\n            \"insuff\",\n            uint32(block.timestamp)\n        );\n\n        gaugeTwab.details = twabDetails;\n\n        gaugeReward.afterDecreaseGauge(_gauge, msg.sender, uint256(twabDetails.balance) + _amount);\n    }\n\n    function addGauge(address _gauge) public {\n        _addGaugeWithScale(_gauge, 1 ether);\n    }\n\n    function addGaugeWithScale(address _gauge, uint256 _scale) public {\n        _addGaugeWithScale(_gauge, _scale);\n    }\n\n    function removeGauge(address _gauge) public {\n        TwabLib.Account storage gaugeScaleTwab = gaugeScaleTwabs[_gauge];\n        TwabLib.AccountDetails memory twabDetails = gaugeScaleTwab.details;\n        (twabDetails, , ) = TwabLib.decreaseBalance(\n            gaugeScaleTwab,\n            twabDetails.balance,\n            \"insuff\",\n            uint32(block.timestamp)\n        );\n        gaugeScaleTwab.details = twabDetails;\n    }\n\n    /**\n     * @notice Set GaugeReward contract\n     * @param _gaugeReward Address of the GaugeReward contract\n     */\n    function setGaugeReward(IGaugeReward _gaugeReward) external onlyOwner {\n        require(address(_gaugeReward) != address(0), \"GC/GaugeReward-not-zero-address\");\n        gaugeReward = _gaugeReward;\n\n        emit GaugeRewardSet(_gaugeReward);\n    }\n\n    function setGaugeScale(address _gauge, uint256 _scale) public {\n        TwabLib.Account storage gaugeScaleTwab = gaugeScaleTwabs[_gauge];\n        TwabLib.AccountDetails memory twabDetails = gaugeScaleTwab.details;\n        if (twabDetails.balance > _scale) {\n            (twabDetails, , ) = TwabLib.decreaseBalance(\n                gaugeScaleTwab,\n                twabDetails.balance - _scale.toUint208(),\n                \"insuff\",\n                uint32(block.timestamp)\n            );\n        } else {\n            (twabDetails, , ) = TwabLib.increaseBalance(\n                gaugeScaleTwab,\n                _scale.toUint208() - twabDetails.balance,\n                uint32(block.timestamp)\n            );\n        }\n        gaugeScaleTwab.details = twabDetails;\n    }\n\n    /// @inheritdoc IGaugeController\n    function getGaugeBalance(address _gauge) external view override returns (uint256) {\n        return gaugeTwabs[_gauge].details.balance;\n    }\n\n    /// @inheritdoc IGaugeController\n    function getGaugeScaleBalance(address _gauge) external view override returns (uint256) {\n        return gaugeScaleTwabs[_gauge].details.balance;\n    }\n\n    /// @inheritdoc IGaugeController\n    function getScaledAverageGaugeBetween(\n        address _gauge,\n        uint256 _startTime,\n        uint256 _endTime\n    ) external view override returns (uint256) {\n        uint256 gauge = _getAverageGaugeBetween(_gauge, _startTime, _endTime);\n        uint256 gaugeScale = _getAverageGaugeScaleBetween(_gauge, _startTime, _endTime);\n        return (gauge * gaugeScale) / 1 ether;\n    }\n\n    function getAverageGaugeBetween(\n        address _gauge,\n        uint256 _startTime,\n        uint256 _endTime\n    ) external view returns (uint256) {\n        return _getAverageGaugeBetween(_gauge, _startTime, _endTime);\n    }\n\n    function getAverageGaugeScaleBetween(\n        address _gauge,\n        uint256 _startTime,\n        uint256 _endTime\n    ) external view returns (uint256) {\n        return _getAverageGaugeScaleBetween(_gauge, _startTime, _endTime);\n    }\n\n    /// @inheritdoc IGaugeController\n    function getUserGaugeBalance(address _gauge, address _user)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return userGaugeBalance[_user][_gauge];\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _addGaugeWithScale(address _gauge, uint256 _scale) internal {\n        TwabLib.Account storage gaugeScaleTwab = gaugeScaleTwabs[_gauge];\n        (TwabLib.AccountDetails memory twabDetails, , ) = TwabLib.increaseBalance(\n            gaugeScaleTwab,\n            _scale.toUint208(),\n            uint32(block.timestamp)\n        );\n        gaugeScaleTwab.details = twabDetails;\n    }\n\n    function _getAverageGaugeBetween(\n        address _gauge,\n        uint256 _startTime,\n        uint256 _endTime\n    ) internal view returns (uint256) {\n        TwabLib.AccountDetails memory gaugeDetails = gaugeTwabs[_gauge].details;\n        return\n            TwabLib.getAverageBalanceBetween(\n                gaugeTwabs[_gauge].twabs,\n                gaugeDetails,\n                uint32(_startTime),\n                uint32(_endTime),\n                uint32(block.timestamp)\n            );\n    }\n\n    function _getAverageGaugeScaleBetween(\n        address _gauge,\n        uint256 _startTime,\n        uint256 _endTime\n    ) internal view returns (uint256) {\n        TwabLib.AccountDetails memory gaugeScaleDetails = gaugeScaleTwabs[_gauge].details;\n        return\n            TwabLib.getAverageBalanceBetween(\n                gaugeScaleTwabs[_gauge].twabs,\n                gaugeScaleDetails,\n                uint32(_startTime),\n                uint32(_endTime),\n                uint32(block.timestamp)\n            );\n    }\n\n    function isGauge(address _gauge) public view returns (bool) {\n        return gaugeScaleTwabs[_gauge].details.balance > 0;\n    }\n\n    modifier requireGauge(address _gauge) {\n        require(isGauge(_gauge), \"Gauge does not exist\");\n        _;\n    }\n}\n"
    },
    "contracts/interfaces/IGaugeController.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\ninterface IGaugeController {\n    /**\n     * @notice Get the gauge scaled average balance between two timestamps.\n     * @param _gauge Address of the gauge to get the average scaled balance for\n     * @param _startTime Start timestamp at which to get the average scaled balance\n     * @param _endTime End timestamp at which to get the average scaled balance\n     * @return The gauge scaled average balance between the two timestamps\n     */\n    function getScaledAverageGaugeBetween(\n        address _gauge,\n        uint256 _startTime,\n        uint256 _endTime\n    ) external view returns (uint256);\n\n    /**\n     * @notice Get the gauge balance\n     * @param _gauge Address of the gauge to get balance for\n     * @return The gauge balance\n     */\n    function getGaugeBalance(address _gauge) external view returns (uint256);\n\n    /**\n     * @notice Get the gauge scale balance\n     * @param _gauge Address of the gauge to get scale balance for\n     * @return The gauge scale balance\n     */\n    function getGaugeScaleBalance(address _gauge) external view returns (uint256);\n\n    /**\n     * @notice Get the user stake balance for a given gauge\n     * @param _gauge Address of the gauge to get stake balance for\n     * @param _user Address of the user to get stake balance for\n     * @return The user gauge balance\n     */\n    function getUserGaugeBalance(address _gauge, address _user) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IGaugeReward.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\n/**\n * @title  PoolTogether V4 IGaugeReward\n * @author PoolTogether Inc Team\n * @notice The GaugeReward interface.\n */\ninterface IGaugeReward {\n    /**\n     * @notice Fallback function to call in GaugeController after a user has increased their gauge stake.\n     * @param gauge Address of the gauge to increase stake for\n     * @param user Address of the user to increase stake for\n     * @param oldStakeBalance Old stake balance of the user\n     */\n    function afterIncreaseGauge(\n        address gauge,\n        address user,\n        uint256 oldStakeBalance\n    ) external;\n\n    /**\n     * @notice Fallback function to call in GaugeController after a user has decreased his gauge stake.\n     * @param gauge Address of the gauge to decrease stake for\n     * @param user Address of the user to decrease stake for\n     * @param oldStakeBalance Old stake balance of the user\n     */\n    function afterDecreaseGauge(\n        address gauge,\n        address user,\n        uint256 oldStakeBalance\n    ) external;\n}\n"
    },
    "contracts/test/libraries/ExtendedSafeCastLibHarness.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"../../libraries/ExtendedSafeCastLib.sol\";\n\ncontract ExtendedSafeCastLibHarness {\n    using ExtendedSafeCastLib for uint256;\n\n    function toUint104(uint256 value) external pure returns (uint104) {\n        return value.toUint104();\n    }\n\n    function toUint208(uint256 value) external pure returns (uint208) {\n        return value.toUint208();\n    }\n\n    function toUint224(uint256 value) external pure returns (uint224) {\n        return value.toUint224();\n    }\n}\n"
    },
    "contracts/GaugeReward.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Multicall.sol\";\n\nimport \"./interfaces/IGaugeReward.sol\";\nimport \"./interfaces/IGaugeController.sol\";\nimport \"./interfaces/IPrizePoolLiquidatorListener.sol\";\n\n/**\n  * @title  PoolTogether V4 GaugeReward\n  * @author PoolTogether Inc Team\n  * @notice The GaugeReward contract handles the rewards for users\n            who staked in one or several gauges on the GaugeController contract.\n*/\ncontract GaugeReward is IGaugeReward, IPrizePoolLiquidatorListener, Multicall {\n    using SafeERC20 for IERC20;\n\n    /* ============ Variables ============ */\n\n    /**\n     * @notice Tracks user token reward balances\n     */\n    mapping(address => mapping(IERC20 => uint256)) public userTokenRewardBalances;\n\n    /**\n     * @notice Tracks user token gauge exchange rate\n     * @dev user => token => gauge => exchange rate\n     */\n    mapping(address => mapping(IERC20 => mapping(address => uint256)))\n        public userTokenGaugeExchangeRates;\n\n    /**\n     * @notice Tracks user last claimed timestamp\n     * @dev user => timestamp\n     */\n    mapping(address => uint256) public userLastClaimedTimestamp;\n\n    /**\n     * @notice Tracks token gauge exchange rates\n     * @dev token => gauge => exchange rate\n     */\n    mapping(IERC20 => mapping(address => uint256)) public tokenGaugeExchangeRates;\n\n    /**\n     * @notice RewardToken struct\n     * @param token Address of the reward token\n     * @param timestamp Timestamp at which the reward token was added\n     */\n    struct RewardToken {\n        IERC20 token;\n        uint64 timestamp;\n    }\n\n    /**\n     * @notice Tracks reward tokens per gauge\n     * @dev gauge => reward tokens array\n     */\n    mapping(address => RewardToken[]) public gaugeRewardTokens;\n\n    /// @notice GaugeController contract address\n    IGaugeController public gaugeController;\n\n    /// @notice Vault contract address\n    address public vault;\n\n    /// @notice Address of the liquidator that this contract is listening to\n    address public liquidator;\n\n    /// @notice Percentage of rewards that goes to stakers. Fixed point 9 number this is less than 1.\n    uint32 public stakerCut;\n\n    /* ============ Events ============ */\n\n    /**\n     * @notice Emitted when the contract is deployed\n     * @param gaugeController Address of the GaugeController\n     * @param vault Address of the Vault\n     */\n    event Deployed(\n        IGaugeController indexed gaugeController,\n        address indexed vault,\n        address indexed liquidator,\n        uint32 stakerCut\n    );\n\n    /**\n     * @notice Emitted when rewards token are added to a gauge\n     * @param gauge Address of the gauge for which the rewards are added\n     * @param token Address of the token being added\n     * @param amount Amount of tokens added to the gauge\n     * @param exchangeRate New exchange rate for this `token` in this `gauge`\n     */\n    event RewardsAdded(\n        address indexed gauge,\n        IERC20 indexed token,\n        uint256 amount,\n        uint256 exchangeRate\n    );\n\n    /**\n     * @notice Emitted when a user claimed their rewards for a given gauge and token\n     * @param gauge Address of the gauge for which the user claimed rewards\n     * @param token Address of the token for which the user claimed rewards\n     * @param user Address of the user who claimed rewards\n     * @param amount Total amount of rewards claimed\n     * @param exchangeRate Exchange rate at which the rewards were claimed\n     */\n    event RewardsClaimed(\n        address indexed gauge,\n        IERC20 indexed token,\n        address indexed user,\n        uint256 amount,\n        uint256 exchangeRate\n    );\n\n    /**\n     * @notice Emitted when a new reward token is pushed onto the `gaugeRewardTokens` mapping\n     * @param gauge Address of the gauge for which the reward token is added\n     * @param token Address of the token being pushed\n     * @param timestamp Timestamp at which the reward token was pushed\n     */\n    event RewardTokenPushed(address indexed gauge, IERC20 indexed token, uint256 timestamp);\n\n    /* ============ Constructor ============ */\n\n    /**\n     * @notice GaugeReward constructor\n     * @param _gaugeController Address of the GaugeController\n     * @param _vault Address of the Vault\n     */\n    constructor(\n        IGaugeController _gaugeController,\n        address _vault,\n        address _liquidator,\n        uint32 _stakerCut\n    ) {\n        require(address(_gaugeController) != address(0), \"GReward/GC-not-zero-address\");\n        require(address(_vault) != address(0), \"GReward/Vault-not-zero-address\");\n        require(_stakerCut < 1e9, \"GReward/staker-cut-lt-1e9\");\n        require(_liquidator != address(0), \"GReward/liq-not-zero-address\");\n\n        gaugeController = _gaugeController;\n        vault = _vault;\n        stakerCut = _stakerCut;\n        liquidator = _liquidator;\n\n        emit Deployed(\n            _gaugeController,\n            _vault,\n            _liquidator,\n            _stakerCut\n        );\n    }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * @notice Return the current reward token for the given gauge.\n     * @param _gauge Address of the gauge to get current reward token for\n     * @return Current reward token for the given gauge\n     */\n    function currentRewardToken(address _gauge) external view returns (RewardToken memory) {\n        return _currentRewardToken(_gauge);\n    }\n\n    /**\n     * @notice Add rewards denominated in `token` for the given `gauge`.\n     * @dev Called by the liquidation contract anytime tokens are liquidated.\n     * @dev Will push token to the `gaugeRewardTokens` mapping if different from the current one.\n     * @param ticket The address of the tickets that were sold\n     * @param token The address of the token that the tickets were sold for\n     * @param tokenAmount The amount of tokens that the tickets were sold for\n     */\n    function afterSwap(IPrizePool, ITicket ticket, uint256, IERC20 token, uint256 tokenAmount) external override {\n        require(msg.sender == liquidator, \"GReward/only-liquidator\");\n\n        address gauge = address(ticket);\n        if (token != _currentRewardToken(gauge).token) {\n            _pushRewardToken(gauge, token);\n        }\n\n        uint256 stakerRewards = (tokenAmount * stakerCut) / 1e9;\n\n        // Exchange rate = amount / current staked amount on gauge\n        uint256 _exchangeRate = (stakerRewards * 1e18) / gaugeController.getGaugeBalance(gauge);\n\n        tokenGaugeExchangeRates[token][gauge] += _exchangeRate;\n\n        emit RewardsAdded(gauge, token, stakerRewards, _exchangeRate);\n    }\n\n    /// @inheritdoc IGaugeReward\n    function afterIncreaseGauge(\n        address _gauge,\n        address _user,\n        uint256 _oldStakeBalance\n    ) external override onlyGaugeController {\n        RewardToken memory _rewardToken = _claimPastRewards(_gauge, _user, _oldStakeBalance);\n\n        if (address(_rewardToken.token) != address(0)) {\n            _claim(_gauge, _rewardToken.token, _user, _oldStakeBalance, false);\n        }\n\n        userLastClaimedTimestamp[_user] = block.timestamp;\n    }\n\n    /// @inheritdoc IGaugeReward\n    function afterDecreaseGauge(\n        address _gauge,\n        address _user,\n        uint256 _oldStakeBalance\n    ) external override onlyGaugeController {\n        RewardToken memory _rewardToken = _claimPastRewards(_gauge, _user, _oldStakeBalance);\n        if (_rewardToken.token != IERC20(address(0))) {\n            _claim(_gauge, _rewardToken.token, _user, _oldStakeBalance, false);\n        }\n        userLastClaimedTimestamp[_user] = block.timestamp;\n    }\n\n    /**\n     * @notice Claim user rewards for a given gauge and token.\n     * @param _gauge Address of the gauge to claim rewards for\n     * @param _token Address of the token to claim rewards for\n     * @param _user Address of the user to claim rewards for\n     */\n    function claim(\n        address _gauge,\n        IERC20 _token,\n        address _user\n    ) external {\n        uint256 _stakeBalance = gaugeController.getUserGaugeBalance(_gauge, _user);\n\n        _claimPastRewards(_gauge, _user, _stakeBalance);\n\n        _claim(_gauge, _token, _user, _stakeBalance, false);\n\n        userLastClaimedTimestamp[_user] = block.timestamp;\n    }\n\n    // function isPrizePoolLiquidator(address _prizePoolLiquidator) public view returns (bool) {\n    //     return gaugeScaleTwabs[_prizePoolLiquidator].details.balance > 0;\n    // }\n\n    /* ============ Modifiers ============ */\n\n    // modifier requirePrizePoolLiquidator(address _prizePoolLiquidator) {\n    //     require(isPrizePoolLiquidator(_prizePoolLiquidator), \"GReward/caller-not-liquidator\");\n    //     _;\n    // }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * @notice Return the current reward token for the given gauge\n     * @param _gauge Address of the gauge to get current reward token for\n     * @return Current reward token for the given gauge\n     */\n    function _currentRewardToken(address _gauge) internal view returns (RewardToken memory) {\n        RewardToken[] memory _gaugeRewardTokens = gaugeRewardTokens[_gauge];\n        uint256 _gaugeRewardTokensLength = _gaugeRewardTokens.length;\n\n        if (_gaugeRewardTokensLength > 0) {\n            return _gaugeRewardTokens[_gaugeRewardTokensLength - 1];\n        } else {\n            return RewardToken(IERC20(address(0)), 0);\n        }\n    }\n\n    /**\n     * @notice Claim user rewards for a given gauge and token.\n     * @param _gauge Address of the gauge to claim rewards for\n     * @param _token Address of the token to claim rewards for\n     * @param _user Address of the user to claim rewards for\n     * @param _stakeBalance User stake balance\n     * @param _eligibleForPastRewards Whether this function is called in `_eligibleForPastRewards` or not\n     */\n    function _claim(\n        address _gauge,\n        IERC20 _token,\n        address _user,\n        uint256 _stakeBalance,\n        bool _eligibleForPastRewards\n    ) internal returns (uint256) {\n        uint256 _previousExchangeRate = userTokenGaugeExchangeRates[_user][_token][_gauge];\n        uint256 _currentExchangeRate = tokenGaugeExchangeRates[_token][_gauge];\n\n        if (!_eligibleForPastRewards && _previousExchangeRate == 0) {\n            _previousExchangeRate = _currentExchangeRate;\n        }\n\n        // Rewards = deltaExchangeRate * stakeBalance\n        uint256 _rewards = ((_currentExchangeRate - _previousExchangeRate) * _stakeBalance) / 1e18;\n\n        // Record current exchange rate\n        userTokenGaugeExchangeRates[_user][_token][_gauge] = _currentExchangeRate;\n\n        userTokenRewardBalances[_user][_token] += _rewards;\n\n        emit RewardsClaimed(_gauge, _token, _user, _rewards, _currentExchangeRate);\n\n        return _rewards;\n    }\n\n    function redeem(address _user, IERC20 _token) external returns (uint256) {\n        uint256 rewards = userTokenRewardBalances[_user][_token];\n        userTokenRewardBalances[_user][_token] = 0;\n        _token.safeTransferFrom(address(vault), _user, rewards);\n        return rewards;\n    }\n\n    /**\n     * @notice Claim user past rewards for a given gauge.\n     * @param _gauge Address of the gauge to claim rewards for\n     * @param _user Address of the user to claim rewards for\n     * @param _stakeBalance User stake balance\n     */\n    function _claimPastRewards(\n        address _gauge,\n        address _user,\n        uint256 _stakeBalance\n    ) internal returns (RewardToken memory) {\n        uint256 _userLastClaimedTimestamp = userLastClaimedTimestamp[_user];\n        uint256 _gaugeRewardTokensLength = gaugeRewardTokens[_gauge].length;\n\n        RewardToken memory _rewardToken;\n        RewardToken memory _latestRewardToken;\n\n        if (_gaugeRewardTokensLength > 0) {\n            uint256 i = _gaugeRewardTokensLength;\n\n            while (i > 0) {\n                i = i - 1;\n                _rewardToken = gaugeRewardTokens[_gauge][i];\n\n                if (i == _gaugeRewardTokensLength - 1) {\n                    _latestRewardToken = _rewardToken;\n                }\n\n                if (_userLastClaimedTimestamp > 0 && _rewardToken.timestamp > _userLastClaimedTimestamp) {\n                    _claim(_gauge, _rewardToken.token, _user, _stakeBalance, true);\n                } else {\n                    break;\n                }\n            }\n        }\n\n        return _latestRewardToken;\n    }\n\n    /**\n     * @notice Push a new reward token into the `gaugeRewardTokens` array\n     * @param _gauge Address of the gauge to push reward token for\n     * @param _token Address of the reward token to push\n     */\n    function _pushRewardToken(address _gauge, IERC20 _token) internal {\n        uint256 _currentTimestamp = block.timestamp;\n\n        gaugeRewardTokens[_gauge].push(\n            RewardToken({ token: _token, timestamp: uint64(_currentTimestamp) })\n        );\n\n        emit RewardTokenPushed(_gauge, _token, _currentTimestamp);\n    }\n\n    modifier onlyGaugeController() {\n        require(msg.sender == address(gaugeController), \"GReward/only-gc\");\n        _;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Multicall.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Address.sol\";\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n *\n * _Available since v4.1._\n */\nabstract contract Multicall {\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     */\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\n        }\n        return results;\n    }\n}\n"
    },
    "contracts/interfaces/IPrizePoolLiquidatorListener.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./IPrizePool.sol\";\nimport \"./ITicket.sol\";\n\n/**\n * @author PoolTogether Inc Team\n */\ninterface IPrizePoolLiquidatorListener {\n    function afterSwap(IPrizePool prizePool, ITicket ticket, uint256 ticketAmount, IERC20 token, uint256 tokenAmount) external;\n}\n"
    },
    "contracts/PrizePoolLiquidator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@prb/math/contracts/PRBMath.sol\";\nimport \"@prb/math/contracts/PRBMathSD59x18Typed.sol\";\n\nimport \"./libraries/LiquidatorLib.sol\";\nimport \"./interfaces/IPrizePool.sol\";\nimport \"./interfaces/IPrizePoolLiquidatorListener.sol\";\n\ncontract PrizePoolLiquidator {\n  using SafeMath for uint256;\n  using SafeCast for uint256;\n  using PRBMathSD59x18Typed for PRBMath.SD59x18;\n  using LiquidatorLib for LiquidatorLib.State;\n\n  uint256 time;\n\n  struct Target {\n    address target;\n    IERC20 want;\n  }\n\n  // mapping from prize pool to tokens.\n  mapping(IPrizePool => Target) poolTargets;\n  mapping(IPrizePool => LiquidatorLib.State) poolLiquidatorStates;\n\n  IPrizePoolLiquidatorListener public listener;\n\n  function setPrizePool(\n    IPrizePool pool,\n    address target,\n    IERC20 want,\n    int256 exchangeRate,\n    int256 deltaRatePerSecond,\n    int256 maxSlippage\n  ) external returns (bool) {\n    return setPrizePoolAtTime(pool, target, want, exchangeRate, deltaRatePerSecond, maxSlippage, block.timestamp);\n  }\n\n  function setPrizePoolAtTime(\n    IPrizePool pool,\n    address target,\n    IERC20 want,\n    int256 exchangeRate,\n    int256 deltaRatePerSecond,\n    int256 maxSlippage,\n    uint256 currentTime\n  ) public returns (bool) {\n    poolTargets[pool] = Target({\n        target: target,\n        want: want\n    });\n    poolLiquidatorStates[pool] = LiquidatorLib.State({\n      exchangeRate: PRBMath.SD59x18(exchangeRate),\n      lastSaleTime: currentTime,\n      // positive price range change per second.\n      deltaRatePerSecond: PRBMath.SD59x18(deltaRatePerSecond),\n      // Price impact for purchase of accrued funds\n      // low slippage => higher frequency arbs, but it tracks the market rate slower (slower to change)\n      maxSlippage: PRBMath.SD59x18(maxSlippage)\n    });\n    return true;\n  }\n\n  function setPrizePoolLiquidationState(IPrizePool _prizePool, int256 deltaRatePerSecond, int256 maxSlippage) external {\n    poolLiquidatorStates[_prizePool].deltaRatePerSecond = PRBMath.SD59x18(deltaRatePerSecond);\n    poolLiquidatorStates[_prizePool].maxSlippage = PRBMath.SD59x18(maxSlippage);\n  }\n\n  function availableBalanceOf(IPrizePool _prizePool) external returns (uint256) {\n    return _availableStreamHaveBalance(_prizePool);\n  }\n\n  function _availableStreamHaveBalance(IPrizePool _prizePool) internal returns (uint256) {\n    return _prizePool.captureAwardBalance();\n  }\n\n  function setTime(uint256 _time) external {\n    time = _time;\n  }\n\n  function currentExchangeRate(IPrizePool _prizePool) external view returns (int256) {\n    return poolLiquidatorStates[_prizePool].computeExchangeRate(block.timestamp).toInt();\n  }\n\n  function computeExactAmountIn(IPrizePool _prizePool, uint256 amountOut) external returns (uint256) {\n    return poolLiquidatorStates[_prizePool].computeExactAmountInAtTime(_availableStreamHaveBalance(_prizePool), amountOut, block.timestamp);\n  }\n\n  function computeExactAmountInAtTime(IPrizePool _prizePool, uint256 amountOut, uint256 currentTime) external returns (uint256) {\n    return poolLiquidatorStates[_prizePool].computeExactAmountInAtTime(_availableStreamHaveBalance(_prizePool), amountOut, currentTime);\n  }\n\n  function computeExactAmountOut(IPrizePool _prizePool, uint256 amountIn) external returns (uint256) {\n    return poolLiquidatorStates[_prizePool].computeExactAmountOutAtTime(_availableStreamHaveBalance(_prizePool), amountIn, block.timestamp);\n  }\n\n  function computeExactAmountOutAtTime(IPrizePool _prizePool, uint256 amountIn, uint256 currentTime) external returns (uint256) {\n    return poolLiquidatorStates[_prizePool].computeExactAmountOutAtTime(_availableStreamHaveBalance(_prizePool), amountIn, currentTime);\n  }\n\n  function swapExactAmountIn(IPrizePool _prizePool, uint256 amountIn, uint256 amountOutMin) external returns (uint256) {\n    return _swapExactAmountInAtTime(_prizePool, amountIn, amountOutMin, block.timestamp);\n  }\n\n  function _swapExactAmountInAtTime(IPrizePool _prizePool, uint256 amountIn, uint256 amountOutMin, uint256 currentTime) internal returns (uint256) {\n    uint256 availableBalance = _availableStreamHaveBalance(_prizePool);\n    uint256 amountOut = poolLiquidatorStates[_prizePool].swapExactAmountInAtTime(\n      availableBalance, amountIn, currentTime\n    );\n\n    require(amountOut <= availableBalance, \"Whoops! have exceeds available\");\n    require(amountOut >= amountOutMin, \"trade does not meet min\");\n\n    _swap(_prizePool, msg.sender, amountOut, amountIn);\n\n    return amountOut;\n  }\n\n  function swapExactAmountOut(IPrizePool _prizePool, uint256 amountOut, uint256 amountInMax) external returns (uint256) {\n    return _swapExactAmountOutAtTime(_prizePool, amountOut, amountInMax, block.timestamp);\n  }\n\n  function _swapExactAmountOutAtTime(\n    IPrizePool _prizePool,\n    uint256 amountOut,\n    uint256 amountInMax,\n    uint256 currentTime\n  ) internal returns (uint256) {\n    uint256 availableBalance = _availableStreamHaveBalance(_prizePool);\n    uint256 amountIn = poolLiquidatorStates[_prizePool].swapExactAmountOutAtTime(\n      availableBalance, amountOut, currentTime\n    );\n\n    require(amountIn <= amountInMax, \"trade does not meet min\");\n    require(amountOut <= availableBalance, \"Whoops! have exceeds available\");\n\n    _swap(_prizePool, msg.sender, amountOut, amountIn);\n\n    return amountIn;\n  }\n\n  function _swap(IPrizePool _prizePool, address _account, uint256 _amountOut, uint256 _amountIn) internal {\n    Target storage target = poolTargets[_prizePool];\n    IERC20 want = target.want;\n    _prizePool.award(_account, _amountOut);\n    want.transferFrom(_account, target.target, _amountIn);\n    IPrizePoolLiquidatorListener _listener = listener;\n    if (address(_listener) != address(0)) {\n      _listener.afterSwap(_prizePool, _prizePool.getTicket(), _amountOut, want, _amountIn);\n    }\n  }\n\n  function getLiquidationState(IPrizePool _prizePool) external view returns (\n    int exchangeRate,\n    uint256 lastSaleTime\n  ) {\n    LiquidatorLib.State memory state = poolLiquidatorStates[_prizePool];\n    exchangeRate = state.exchangeRate.value;\n    lastSaleTime = state.lastSaleTime;\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@prb/math/contracts/PRBMath.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.4;\n\n/// @notice Emitted when the result overflows uint256.\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\n\n/// @notice Emitted when the result overflows uint256.\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\n\n/// @notice Emitted when one of the inputs is type(int256).min.\nerror PRBMath__MulDivSignedInputTooSmall();\n\n/// @notice Emitted when the intermediary absolute result overflows int256.\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is MIN_SD59x18.\nerror PRBMathSD59x18__AbsInputTooSmall();\n\n/// @notice Emitted when ceiling a number overflows SD59x18.\nerror PRBMathSD59x18__CeilOverflow(int256 x);\n\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\nerror PRBMathSD59x18__DivInputTooSmall();\n\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is greater than 133.084258667509499441.\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\n\n/// @notice Emitted when the input is greater than 192.\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\n\n/// @notice Emitted when flooring a number underflows SD59x18.\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\n\n/// @notice Emitted when the product of the inputs is negative.\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\n\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\n\n/// @notice Emitted when the input is less than or equal to zero.\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\n\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\nerror PRBMathSD59x18__MulInputTooSmall();\n\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\n\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is negative.\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\n\n/// @notice Emitted when the calculating the square root overflows SD59x18.\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\n\n/// @notice Emitted when addition overflows UD60x18.\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\n\n/// @notice Emitted when ceiling a number overflows UD60x18.\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\n\n/// @notice Emitted when the input is greater than 133.084258667509499441.\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\n\n/// @notice Emitted when the input is greater than 192.\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\n\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\n\n/// @notice Emitted when the input is less than 1.\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\n\n/// @notice Emitted when the calculating the square root overflows UD60x18.\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\n\n/// @notice Emitted when subtraction underflows UD60x18.\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\n\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\nlibrary PRBMath {\n    /// STRUCTS ///\n\n    struct SD59x18 {\n        int256 value;\n    }\n\n    struct UD60x18 {\n        uint256 value;\n    }\n\n    /// STORAGE ///\n\n    /// @dev How many trailing decimals can be represented.\n    uint256 internal constant SCALE = 1e18;\n\n    /// @dev Largest power of two divisor of SCALE.\n    uint256 internal constant SCALE_LPOTD = 262144;\n\n    /// @dev SCALE inverted mod 2^256.\n    uint256 internal constant SCALE_INVERSE =\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\n\n    /// FUNCTIONS ///\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    /// @dev Has to use 192.64-bit fixed-point numbers.\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp2(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            // Start from 0.5 in the 192.64-bit fixed-point format.\n            result = 0x800000000000000000000000000000000000000000000000;\n\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\n            if (x & 0x8000000000000000 > 0) {\n                result = (result * 0x16A09E667F3BCC909) >> 64;\n            }\n            if (x & 0x4000000000000000 > 0) {\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\n            }\n            if (x & 0x2000000000000000 > 0) {\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\n            }\n            if (x & 0x1000000000000000 > 0) {\n                result = (result * 0x10B5586CF9890F62A) >> 64;\n            }\n            if (x & 0x800000000000000 > 0) {\n                result = (result * 0x1059B0D31585743AE) >> 64;\n            }\n            if (x & 0x400000000000000 > 0) {\n                result = (result * 0x102C9A3E778060EE7) >> 64;\n            }\n            if (x & 0x200000000000000 > 0) {\n                result = (result * 0x10163DA9FB33356D8) >> 64;\n            }\n            if (x & 0x100000000000000 > 0) {\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\n            }\n            if (x & 0x80000000000000 > 0) {\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\n            }\n            if (x & 0x40000000000000 > 0) {\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\n            }\n            if (x & 0x20000000000000 > 0) {\n                result = (result * 0x100162F3904051FA1) >> 64;\n            }\n            if (x & 0x10000000000000 > 0) {\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\n            }\n            if (x & 0x8000000000000 > 0) {\n                result = (result * 0x100058BA01FB9F96D) >> 64;\n            }\n            if (x & 0x4000000000000 > 0) {\n                result = (result * 0x10002C5CC37DA9492) >> 64;\n            }\n            if (x & 0x2000000000000 > 0) {\n                result = (result * 0x1000162E525EE0547) >> 64;\n            }\n            if (x & 0x1000000000000 > 0) {\n                result = (result * 0x10000B17255775C04) >> 64;\n            }\n            if (x & 0x800000000000 > 0) {\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\n            }\n            if (x & 0x400000000000 > 0) {\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\n            }\n            if (x & 0x200000000000 > 0) {\n                result = (result * 0x10000162E43F4F831) >> 64;\n            }\n            if (x & 0x100000000000 > 0) {\n                result = (result * 0x100000B1721BCFC9A) >> 64;\n            }\n            if (x & 0x80000000000 > 0) {\n                result = (result * 0x10000058B90CF1E6E) >> 64;\n            }\n            if (x & 0x40000000000 > 0) {\n                result = (result * 0x1000002C5C863B73F) >> 64;\n            }\n            if (x & 0x20000000000 > 0) {\n                result = (result * 0x100000162E430E5A2) >> 64;\n            }\n            if (x & 0x10000000000 > 0) {\n                result = (result * 0x1000000B172183551) >> 64;\n            }\n            if (x & 0x8000000000 > 0) {\n                result = (result * 0x100000058B90C0B49) >> 64;\n            }\n            if (x & 0x4000000000 > 0) {\n                result = (result * 0x10000002C5C8601CC) >> 64;\n            }\n            if (x & 0x2000000000 > 0) {\n                result = (result * 0x1000000162E42FFF0) >> 64;\n            }\n            if (x & 0x1000000000 > 0) {\n                result = (result * 0x10000000B17217FBB) >> 64;\n            }\n            if (x & 0x800000000 > 0) {\n                result = (result * 0x1000000058B90BFCE) >> 64;\n            }\n            if (x & 0x400000000 > 0) {\n                result = (result * 0x100000002C5C85FE3) >> 64;\n            }\n            if (x & 0x200000000 > 0) {\n                result = (result * 0x10000000162E42FF1) >> 64;\n            }\n            if (x & 0x100000000 > 0) {\n                result = (result * 0x100000000B17217F8) >> 64;\n            }\n            if (x & 0x80000000 > 0) {\n                result = (result * 0x10000000058B90BFC) >> 64;\n            }\n            if (x & 0x40000000 > 0) {\n                result = (result * 0x1000000002C5C85FE) >> 64;\n            }\n            if (x & 0x20000000 > 0) {\n                result = (result * 0x100000000162E42FF) >> 64;\n            }\n            if (x & 0x10000000 > 0) {\n                result = (result * 0x1000000000B17217F) >> 64;\n            }\n            if (x & 0x8000000 > 0) {\n                result = (result * 0x100000000058B90C0) >> 64;\n            }\n            if (x & 0x4000000 > 0) {\n                result = (result * 0x10000000002C5C860) >> 64;\n            }\n            if (x & 0x2000000 > 0) {\n                result = (result * 0x1000000000162E430) >> 64;\n            }\n            if (x & 0x1000000 > 0) {\n                result = (result * 0x10000000000B17218) >> 64;\n            }\n            if (x & 0x800000 > 0) {\n                result = (result * 0x1000000000058B90C) >> 64;\n            }\n            if (x & 0x400000 > 0) {\n                result = (result * 0x100000000002C5C86) >> 64;\n            }\n            if (x & 0x200000 > 0) {\n                result = (result * 0x10000000000162E43) >> 64;\n            }\n            if (x & 0x100000 > 0) {\n                result = (result * 0x100000000000B1721) >> 64;\n            }\n            if (x & 0x80000 > 0) {\n                result = (result * 0x10000000000058B91) >> 64;\n            }\n            if (x & 0x40000 > 0) {\n                result = (result * 0x1000000000002C5C8) >> 64;\n            }\n            if (x & 0x20000 > 0) {\n                result = (result * 0x100000000000162E4) >> 64;\n            }\n            if (x & 0x10000 > 0) {\n                result = (result * 0x1000000000000B172) >> 64;\n            }\n            if (x & 0x8000 > 0) {\n                result = (result * 0x100000000000058B9) >> 64;\n            }\n            if (x & 0x4000 > 0) {\n                result = (result * 0x10000000000002C5D) >> 64;\n            }\n            if (x & 0x2000 > 0) {\n                result = (result * 0x1000000000000162E) >> 64;\n            }\n            if (x & 0x1000 > 0) {\n                result = (result * 0x10000000000000B17) >> 64;\n            }\n            if (x & 0x800 > 0) {\n                result = (result * 0x1000000000000058C) >> 64;\n            }\n            if (x & 0x400 > 0) {\n                result = (result * 0x100000000000002C6) >> 64;\n            }\n            if (x & 0x200 > 0) {\n                result = (result * 0x10000000000000163) >> 64;\n            }\n            if (x & 0x100 > 0) {\n                result = (result * 0x100000000000000B1) >> 64;\n            }\n            if (x & 0x80 > 0) {\n                result = (result * 0x10000000000000059) >> 64;\n            }\n            if (x & 0x40 > 0) {\n                result = (result * 0x1000000000000002C) >> 64;\n            }\n            if (x & 0x20 > 0) {\n                result = (result * 0x10000000000000016) >> 64;\n            }\n            if (x & 0x10 > 0) {\n                result = (result * 0x1000000000000000B) >> 64;\n            }\n            if (x & 0x8 > 0) {\n                result = (result * 0x10000000000000006) >> 64;\n            }\n            if (x & 0x4 > 0) {\n                result = (result * 0x10000000000000003) >> 64;\n            }\n            if (x & 0x2 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n            if (x & 0x1 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n\n            // We're doing two things at the same time:\n            //\n            //   1. Multiply the result by 2^n + 1, where \"2^n\" is the integer part and the one is added to account for\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\n            //      rather than 192.\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\n            //\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \"ip\" is the integer part \"2^n\".\n            result *= SCALE;\n            result >>= (191 - (x >> 64));\n        }\n    }\n\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\n    /// @dev See the note on msb in the \"Find First Set\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\n    /// @param x The uint256 number for which to find the index of the most significant bit.\n    /// @return msb The index of the most significant bit as an uint256.\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        if (x >= 2**128) {\n            x >>= 128;\n            msb += 128;\n        }\n        if (x >= 2**64) {\n            x >>= 64;\n            msb += 64;\n        }\n        if (x >= 2**32) {\n            x >>= 32;\n            msb += 32;\n        }\n        if (x >= 2**16) {\n            x >>= 16;\n            msb += 16;\n        }\n        if (x >= 2**8) {\n            x >>= 8;\n            msb += 8;\n        }\n        if (x >= 2**4) {\n            x >>= 4;\n            msb += 4;\n        }\n        if (x >= 2**2) {\n            x >>= 2;\n            msb += 2;\n        }\n        if (x >= 2**1) {\n            // No need to shift x any more.\n            msb += 1;\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\n    ///\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\n    ///\n    /// Requirements:\n    /// - The denominator cannot be zero.\n    /// - The result must fit within uint256.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The multiplicand as an uint256.\n    /// @param y The multiplier as an uint256.\n    /// @param denominator The divisor as an uint256.\n    /// @return result The result as an uint256.\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            unchecked {\n                result = prod0 / denominator;\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        if (prod1 >= denominator) {\n            revert PRBMath__MulDivOverflow(prod1, denominator);\n        }\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        unchecked {\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 lpotdod = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by lpotdod.\n                denominator := div(denominator, lpotdod)\n\n                // Divide [prod1 prod0] by lpotdod.\n                prod0 := div(prod0, lpotdod)\n\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * lpotdod;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷1e18) with full precision.\n    ///\n    /// @dev Variant of \"mulDiv\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\n    /// being rounded to 1e-18.  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717.\n    ///\n    /// Requirements:\n    /// - The result must fit within uint256.\n    ///\n    /// Caveats:\n    /// - The body is purposely left uncommented; see the NatSpec comments in \"PRBMath.mulDiv\" to understand how this works.\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\n    ///     1. x * y = type(uint256).max * SCALE\n    ///     2. (x * y) % SCALE >= SCALE / 2\n    ///\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        uint256 prod0;\n        uint256 prod1;\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        if (prod1 >= SCALE) {\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\n        }\n\n        uint256 remainder;\n        uint256 roundUpUnit;\n        assembly {\n            remainder := mulmod(x, y, SCALE)\n            roundUpUnit := gt(remainder, 499999999999999999)\n        }\n\n        if (prod1 == 0) {\n            unchecked {\n                result = (prod0 / SCALE) + roundUpUnit;\n                return result;\n            }\n        }\n\n        assembly {\n            result := add(\n                mul(\n                    or(\n                        div(sub(prod0, remainder), SCALE_LPOTD),\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\n                    ),\n                    SCALE_INVERSE\n                ),\n                roundUpUnit\n            )\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\n    ///\n    /// @dev An extension of \"mulDiv\" for signed numbers. Works by computing the signs and the absolute values separately.\n    ///\n    /// Requirements:\n    /// - None of the inputs can be type(int256).min.\n    /// - The result must fit within int256.\n    ///\n    /// @param x The multiplicand as an int256.\n    /// @param y The multiplier as an int256.\n    /// @param denominator The divisor as an int256.\n    /// @return result The result as an int256.\n    function mulDivSigned(\n        int256 x,\n        int256 y,\n        int256 denominator\n    ) internal pure returns (int256 result) {\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\n            revert PRBMath__MulDivSignedInputTooSmall();\n        }\n\n        // Get hold of the absolute values of x, y and the denominator.\n        uint256 ax;\n        uint256 ay;\n        uint256 ad;\n        unchecked {\n            ax = x < 0 ? uint256(-x) : uint256(x);\n            ay = y < 0 ? uint256(-y) : uint256(y);\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\n        }\n\n        // Compute the absolute value of (x*y)÷denominator. The result must fit within int256.\n        uint256 rAbs = mulDiv(ax, ay, ad);\n        if (rAbs > uint256(type(int256).max)) {\n            revert PRBMath__MulDivSignedOverflow(rAbs);\n        }\n\n        // Get the signs of x, y and the denominator.\n        uint256 sx;\n        uint256 sy;\n        uint256 sd;\n        assembly {\n            sx := sgt(x, sub(0, 1))\n            sy := sgt(y, sub(0, 1))\n            sd := sgt(denominator, sub(0, 1))\n        }\n\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\n        // If yes, the result should be negative.\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The uint256 number for which to calculate the square root.\n    /// @return result The result as an uint256.\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\n        uint256 xAux = uint256(x);\n        result = 1;\n        if (xAux >= 0x100000000000000000000000000000000) {\n            xAux >>= 128;\n            result <<= 64;\n        }\n        if (xAux >= 0x10000000000000000) {\n            xAux >>= 64;\n            result <<= 32;\n        }\n        if (xAux >= 0x100000000) {\n            xAux >>= 32;\n            result <<= 16;\n        }\n        if (xAux >= 0x10000) {\n            xAux >>= 16;\n            result <<= 8;\n        }\n        if (xAux >= 0x100) {\n            xAux >>= 8;\n            result <<= 4;\n        }\n        if (xAux >= 0x10) {\n            xAux >>= 4;\n            result <<= 2;\n        }\n        if (xAux >= 0x8) {\n            result <<= 1;\n        }\n\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\n        unchecked {\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1; // Seven iterations should be enough\n            uint256 roundedDownResult = x / result;\n            return result >= roundedDownResult ? roundedDownResult : result;\n        }\n    }\n}\n"
    },
    "@prb/math/contracts/PRBMathSD59x18Typed.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.4;\n\nimport \"./PRBMath.sol\";\n\n/// @title PRBMathSD59x18Typed\n/// @author Paul Razvan Berg\n/// @notice Smart contract library for advanced fixed-point math that works with int256 numbers considered to have 18\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\n/// @dev This is the same as PRBMathSD59x18, except that it works with structs instead of raw uint256s.\nlibrary PRBMathSD59x18Typed {\n    /// STORAGE ///\n\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\n    int256 internal constant LOG2_E = 1_442695040888963407;\n\n    /// @dev Half the SCALE number.\n    int256 internal constant HALF_SCALE = 5e17;\n\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\n    int256 internal constant MAX_SD59x18 =\n        57896044618658097711785492504343953926634992332820282019728_792003956564819967;\n\n    /// @dev The maximum whole value a signed 59.18-decimal fixed-point number can have.\n    int256 internal constant MAX_WHOLE_SD59x18 =\n        57896044618658097711785492504343953926634992332820282019728_000000000000000000;\n\n    /// @dev The minimum value a signed 59.18-decimal fixed-point number can have.\n    int256 internal constant MIN_SD59x18 =\n        -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\n\n    /// @dev The minimum whole value a signed 59.18-decimal fixed-point number can have.\n    int256 internal constant MIN_WHOLE_SD59x18 =\n        -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\n\n    /// @dev How many trailing decimals can be represented.\n    int256 internal constant SCALE = 1e18;\n\n    /// INTERNAL FUNCTIONS ///\n\n    /// @notice Calculate the absolute value of x.\n    ///\n    /// @dev Requirements:\n    /// - x must be greater than MIN_SD59x18.\n    ///\n    /// @param x The number to calculate the absolute value for.\n    /// @param result The absolute value of x.\n    function abs(PRBMath.SD59x18 memory x) internal pure returns (PRBMath.SD59x18 memory result) {\n        int256 xValue = x.value;\n        if (xValue == MIN_SD59x18) {\n            revert PRBMathSD59x18__AbsInputTooSmall();\n        }\n        unchecked {\n            result = PRBMath.SD59x18({ value: x.value < 0 ? -xValue : xValue });\n        }\n    }\n\n    /// @notice Adds two signed 59.18-decimal fixed-point numbers together, returning a new signed 59.18-decimal\n    /// fixed-point number.\n    /// @param x The first summand as a signed 59.18-decimal fixed-point number.\n    /// @param y The second summand as a signed 59.18-decimal fixed-point number.\n    /// @param result The sum as a signed 59.18 decimal fixed-point number.\n    function add(PRBMath.SD59x18 memory x, PRBMath.SD59x18 memory y)\n        internal\n        pure\n        returns (PRBMath.SD59x18 memory result)\n    {\n        result = PRBMath.SD59x18({ value: x.value + y.value });\n    }\n\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\n    /// @return result The arithmetic average as a signed 59.18-decimal fixed-point number.\n    function avg(PRBMath.SD59x18 memory x, PRBMath.SD59x18 memory y)\n        internal\n        pure\n        returns (PRBMath.SD59x18 memory result)\n    {\n        // The operations can never overflow.\n        int256 xValue = x.value;\n        int256 yValue = y.value;\n        int256 rValue;\n        unchecked {\n            int256 sum = (xValue >> 1) + (yValue >> 1);\n            if (sum < 0) {\n                // If at least one of x and y is odd, we add 1 to the result. This is because shifting negative numbers to the\n                // right rounds down to infinity.\n                assembly {\n                    rValue := add(sum, and(or(xValue, yValue), 1))\n                }\n            } else {\n                // If both x and y are odd, we add 1 to the result. This is because if both numbers are odd, the 0.5\n                // remainder gets truncated twice.\n                rValue = sum + (xValue & yValue & 1);\n            }\n        }\n        result = PRBMath.SD59x18({ value: rValue });\n    }\n\n    /// @notice Yields the least greatest signed 59.18 decimal fixed-point number greater than or equal to x.\n    ///\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    ///\n    /// Requirements:\n    /// - x must be less than or equal to MAX_WHOLE_SD59x18.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number to ceil.\n    /// @param result The least integer greater than or equal to x, as a signed 58.18-decimal fixed-point number.\n    function ceil(PRBMath.SD59x18 memory x) internal pure returns (PRBMath.SD59x18 memory result) {\n        int256 xValue = x.value;\n        if (xValue > MAX_WHOLE_SD59x18) {\n            revert PRBMathSD59x18__CeilOverflow(xValue);\n        }\n        unchecked {\n            int256 remainder = xValue % SCALE;\n            if (remainder == 0) {\n                result = x;\n            } else {\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\n                int256 rValue = xValue - remainder;\n                if (xValue > 0) {\n                    rValue += SCALE;\n                }\n                result = PRBMath.SD59x18({ value: rValue });\n            }\n        }\n    }\n\n    /// @notice Divides two signed 59.18-decimal fixed-point numbers, returning a new signed 59.18-decimal fixed-point number.\n    ///\n    /// @dev Variant of \"mulDiv\" that works with signed numbers. Works by computing the signs and the absolute values separately.\n    ///\n    /// Requirements:\n    /// - All from \"PRBMath.mulDiv\".\n    /// - None of the inputs can be type(int256).min.\n    /// - The denominator cannot be zero.\n    /// - The result must fit within int256.\n    ///\n    /// Caveats:\n    /// - All from \"PRBMath.mulDiv\".\n    ///\n    /// @param x The numerator as a signed 59.18-decimal fixed-point number.\n    /// @param y The denominator as a signed 59.18-decimal fixed-point number.\n    /// @param result The quotient as a signed 59.18-decimal fixed-point number.\n    function div(PRBMath.SD59x18 memory x, PRBMath.SD59x18 memory y)\n        internal\n        pure\n        returns (PRBMath.SD59x18 memory result)\n    {\n        int256 xValue = x.value;\n        int256 yValue = y.value;\n        if (xValue == MIN_SD59x18 || yValue == MIN_SD59x18) {\n            revert PRBMathSD59x18__DivInputTooSmall();\n        }\n\n        // Get hold of the absolute values of x and y.\n        uint256 ax;\n        uint256 ay;\n        unchecked {\n            ax = xValue < 0 ? uint256(-xValue) : uint256(xValue);\n            ay = yValue < 0 ? uint256(-yValue) : uint256(yValue);\n        }\n\n        // Compute the absolute value of (x*SCALE)÷y. The result must fit within int256.\n        uint256 rAbs = PRBMath.mulDiv(ax, uint256(SCALE), ay);\n        if (rAbs > uint256(MAX_SD59x18)) {\n            revert PRBMathSD59x18__DivOverflow(rAbs);\n        }\n\n        // Get the signs of x and y.\n        uint256 sx;\n        uint256 sy;\n        assembly {\n            sx := sgt(xValue, sub(0, 1))\n            sy := sgt(yValue, sub(0, 1))\n        }\n\n        // XOR over sx and sy. This is basically checking whether the inputs have the same sign. If yes, the result\n        // should be positive. Otherwise, it should be negative.\n        result = PRBMath.SD59x18({ value: sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs) });\n    }\n\n    /// @notice Returns Euler's number as a signed 59.18-decimal fixed-point number.\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\n    function e() internal pure returns (PRBMath.SD59x18 memory result) {\n        result = PRBMath.SD59x18({ value: 2_718281828459045235 });\n    }\n\n    /// @notice Calculates the natural exponent of x.\n    ///\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    /// - x must be less than 133.084258667509499441.\n    ///\n    /// Caveats:\n    /// - All from \"exp2\".\n    /// - For any x less than -41.446531673892822322, the result is zero.\n    ///\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function exp(PRBMath.SD59x18 memory x) internal pure returns (PRBMath.SD59x18 memory result) {\n        int256 xValue = x.value;\n        // Without this check, the value passed to \"exp2\" would be less than -59.794705707972522261.\n        if (xValue < -41_446531673892822322) {\n            return PRBMath.SD59x18({ value: 0 });\n        }\n\n        // Without this check, the value passed to \"exp2\" would be greater than 192.\n        if (xValue >= 133_084258667509499441) {\n            revert PRBMathSD59x18__ExpInputTooBig(xValue);\n        }\n\n        // Do the fixed-point multiplication inline to save gas.\n        unchecked {\n            int256 doubleScaleProduct = xValue * LOG2_E;\n            PRBMath.SD59x18 memory exponent = PRBMath.SD59x18({ value: (doubleScaleProduct + HALF_SCALE) / SCALE });\n            result = exp2(exponent);\n        }\n    }\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    ///\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\n    ///\n    /// Requirements:\n    /// - x must be 192 or less.\n    /// - The result must fit within MAX_SD59x18.\n    ///\n    /// Caveats:\n    /// - For any x less than -59.794705707972522261, the result is zero.\n    ///\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function exp2(PRBMath.SD59x18 memory x) internal pure returns (PRBMath.SD59x18 memory result) {\n        int256 xValue = x.value;\n\n        // This works because 2^(-x) = 1/2^x.\n        if (xValue < 0) {\n            // 2^59.794705707972522262 is the maximum number whose inverse does not truncate down to zero.\n            if (xValue < -59_794705707972522261) {\n                return PRBMath.SD59x18({ value: 0 });\n            }\n\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\n            unchecked {\n                PRBMath.SD59x18 memory exponent = PRBMath.SD59x18({ value: -xValue });\n                result = PRBMath.SD59x18({ value: 1e36 / exp2(exponent).value });\n            }\n        } else {\n            // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\n            if (xValue >= 192e18) {\n                revert PRBMathSD59x18__Exp2InputTooBig(xValue);\n            }\n\n            unchecked {\n                // Convert x to the 192-64-bit fixed-point format.\n                uint256 x192x64 = (uint256(xValue) << 64) / uint256(SCALE);\n\n                // Safe to convert the result to int256 directly because the maximum input allowed is 192.\n                result = PRBMath.SD59x18({ value: int256(PRBMath.exp2(x192x64)) });\n            }\n        }\n    }\n\n    /// @notice Yields the greatest signed 59.18 decimal fixed-point number less than or equal to x.\n    ///\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    ///\n    /// Requirements:\n    /// - x must be greater than or equal to MIN_WHOLE_SD59x18.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number to floor.\n    /// @param result The greatest integer less than or equal to x, as a signed 58.18-decimal fixed-point number.\n    function floor(PRBMath.SD59x18 memory x) internal pure returns (PRBMath.SD59x18 memory result) {\n        int256 xValue = x.value;\n        if (xValue < MIN_WHOLE_SD59x18) {\n            revert PRBMathSD59x18__FloorUnderflow(xValue);\n        }\n        unchecked {\n            int256 remainder = xValue % SCALE;\n            if (remainder == 0) {\n                result = x;\n            } else {\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\n                int256 rValue = xValue - remainder;\n                if (xValue < 0) {\n                    rValue -= SCALE;\n                }\n                result = PRBMath.SD59x18({ value: rValue });\n            }\n        }\n    }\n\n    /// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right\n    /// of the radix point for negative numbers.\n    /// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\n    /// @param x The signed 59.18-decimal fixed-point number to get the fractional part of.\n    /// @param result The fractional part of x as a signed 59.18-decimal fixed-point number.\n    function frac(PRBMath.SD59x18 memory x) internal pure returns (PRBMath.SD59x18 memory result) {\n        unchecked {\n            result = PRBMath.SD59x18({ value: x.value % SCALE });\n        }\n    }\n\n    /// @notice Converts a number from basic integer form to signed 59.18-decimal fixed-point representation.\n    ///\n    /// @dev Requirements:\n    /// - x must be greater than or equal to MIN_SD59x18 divided by SCALE.\n    /// - x must be less than or equal to MAX_SD59x18 divided by SCALE.\n    ///\n    /// @param x The basic integer to convert.\n    /// @param result The same number in signed 59.18-decimal fixed-point representation.\n    function fromInt(int256 x) internal pure returns (PRBMath.SD59x18 memory result) {\n        unchecked {\n            if (x < MIN_SD59x18 / SCALE) {\n                revert PRBMathSD59x18__FromIntUnderflow(x);\n            }\n            if (x > MAX_SD59x18 / SCALE) {\n                revert PRBMathSD59x18__FromIntOverflow(x);\n            }\n            result = PRBMath.SD59x18({ value: x * SCALE });\n        }\n    }\n\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\n    ///\n    /// @dev Requirements:\n    /// - x * y must fit within MAX_SD59x18, lest it overflows.\n    /// - x * y cannot be negative.\n    ///\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function gm(PRBMath.SD59x18 memory x, PRBMath.SD59x18 memory y)\n        internal\n        pure\n        returns (PRBMath.SD59x18 memory result)\n    {\n        if (x.value == 0) {\n            return PRBMath.SD59x18({ value: 0 });\n        }\n\n        unchecked {\n            // Checking for overflow this way is faster than letting Solidity do it.\n            int256 xy = x.value * y.value;\n            if (xy / x.value != y.value) {\n                revert PRBMathSD59x18__GmOverflow(x.value, y.value);\n            }\n\n            // The product cannot be negative.\n            if (xy < 0) {\n                revert PRBMathSD59x18__GmNegativeProduct(x.value, y.value);\n            }\n\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\n            // during multiplication. See the comments within the \"sqrt\" function.\n            result = PRBMath.SD59x18({ value: int256(PRBMath.sqrt(uint256(xy))) });\n        }\n    }\n\n    /// @notice Calculates 1 / x, rounding toward zero.\n    ///\n    /// @dev Requirements:\n    /// - x cannot be zero.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the inverse.\n    /// @return result The inverse as a signed 59.18-decimal fixed-point number.\n    function inv(PRBMath.SD59x18 memory x) internal pure returns (PRBMath.SD59x18 memory result) {\n        unchecked {\n            // 1e36 is SCALE * SCALE.\n            result = PRBMath.SD59x18({ value: 1e36 / x.value });\n        }\n    }\n\n    /// @notice Calculates the natural logarithm of x.\n    ///\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    /// - This doesn't return exactly 1 for 2718281828459045235, for that we would need more fine-grained precision.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the natural logarithm.\n    /// @return result The natural logarithm as a signed 59.18-decimal fixed-point number.\n    function ln(PRBMath.SD59x18 memory x) internal pure returns (PRBMath.SD59x18 memory result) {\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\n        // can return is 195205294292027477728.\n        unchecked {\n            int256 rValue = (log2(x).value * SCALE) / LOG2_E;\n            result = PRBMath.SD59x18({ value: rValue });\n        }\n    }\n\n    /// @notice Calculates the common logarithm of x.\n    ///\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the common logarithm.\n    /// @return result The common logarithm as a signed 59.18-decimal fixed-point number.\n    function log10(PRBMath.SD59x18 memory x) internal pure returns (PRBMath.SD59x18 memory result) {\n        int256 xValue = x.value;\n        if (xValue <= 0) {\n            revert PRBMathSD59x18__LogInputTooSmall(xValue);\n        }\n\n        // Note that the \"mul\" in this block is the assembly mul operation, not the \"mul\" function defined in this\n        // contract.\n        int256 rValue;\n\n        // prettier-ignore\n        assembly {\n            switch xValue\n            case 1 { rValue := mul(SCALE, sub(0, 18)) }\n            case 10 { rValue := mul(SCALE, sub(1, 18)) }\n            case 100 { rValue := mul(SCALE, sub(2, 18)) }\n            case 1000 { rValue := mul(SCALE, sub(3, 18)) }\n            case 10000 { rValue := mul(SCALE, sub(4, 18)) }\n            case 100000 { rValue := mul(SCALE, sub(5, 18)) }\n            case 1000000 { rValue := mul(SCALE, sub(6, 18)) }\n            case 10000000 { rValue := mul(SCALE, sub(7, 18)) }\n            case 100000000 { rValue := mul(SCALE, sub(8, 18)) }\n            case 1000000000 { rValue := mul(SCALE, sub(9, 18)) }\n            case 10000000000 { rValue := mul(SCALE, sub(10, 18)) }\n            case 100000000000 { rValue := mul(SCALE, sub(11, 18)) }\n            case 1000000000000 { rValue := mul(SCALE, sub(12, 18)) }\n            case 10000000000000 { rValue := mul(SCALE, sub(13, 18)) }\n            case 100000000000000 { rValue := mul(SCALE, sub(14, 18)) }\n            case 1000000000000000 { rValue := mul(SCALE, sub(15, 18)) }\n            case 10000000000000000 { rValue := mul(SCALE, sub(16, 18)) }\n            case 100000000000000000 { rValue := mul(SCALE, sub(17, 18)) }\n            case 1000000000000000000 { rValue := 0 }\n            case 10000000000000000000 { rValue := SCALE }\n            case 100000000000000000000 { rValue := mul(SCALE, 2) }\n            case 1000000000000000000000 { rValue := mul(SCALE, 3) }\n            case 10000000000000000000000 { rValue := mul(SCALE, 4) }\n            case 100000000000000000000000 { rValue := mul(SCALE, 5) }\n            case 1000000000000000000000000 { rValue := mul(SCALE, 6) }\n            case 10000000000000000000000000 { rValue := mul(SCALE, 7) }\n            case 100000000000000000000000000 { rValue := mul(SCALE, 8) }\n            case 1000000000000000000000000000 { rValue := mul(SCALE, 9) }\n            case 10000000000000000000000000000 { rValue := mul(SCALE, 10) }\n            case 100000000000000000000000000000 { rValue := mul(SCALE, 11) }\n            case 1000000000000000000000000000000 { rValue := mul(SCALE, 12) }\n            case 10000000000000000000000000000000 { rValue := mul(SCALE, 13) }\n            case 100000000000000000000000000000000 { rValue := mul(SCALE, 14) }\n            case 1000000000000000000000000000000000 { rValue := mul(SCALE, 15) }\n            case 10000000000000000000000000000000000 { rValue := mul(SCALE, 16) }\n            case 100000000000000000000000000000000000 { rValue := mul(SCALE, 17) }\n            case 1000000000000000000000000000000000000 { rValue := mul(SCALE, 18) }\n            case 10000000000000000000000000000000000000 { rValue := mul(SCALE, 19) }\n            case 100000000000000000000000000000000000000 { rValue := mul(SCALE, 20) }\n            case 1000000000000000000000000000000000000000 { rValue := mul(SCALE, 21) }\n            case 10000000000000000000000000000000000000000 { rValue := mul(SCALE, 22) }\n            case 100000000000000000000000000000000000000000 { rValue := mul(SCALE, 23) }\n            case 1000000000000000000000000000000000000000000 { rValue := mul(SCALE, 24) }\n            case 10000000000000000000000000000000000000000000 { rValue := mul(SCALE, 25) }\n            case 100000000000000000000000000000000000000000000 { rValue := mul(SCALE, 26) }\n            case 1000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 27) }\n            case 10000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 28) }\n            case 100000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 29) }\n            case 1000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 30) }\n            case 10000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 31) }\n            case 100000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 32) }\n            case 1000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 33) }\n            case 10000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 34) }\n            case 100000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 35) }\n            case 1000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 36) }\n            case 10000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 37) }\n            case 100000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 38) }\n            case 1000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 39) }\n            case 10000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 40) }\n            case 100000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 41) }\n            case 1000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 42) }\n            case 10000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 43) }\n            case 100000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 44) }\n            case 1000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 45) }\n            case 10000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 46) }\n            case 100000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 47) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 48) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 49) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 50) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 51) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 52) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 53) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 54) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 55) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 56) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 57) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { rValue := mul(SCALE, 58) }\n            default {\n                rValue := MAX_SD59x18\n            }\n        }\n\n        if (rValue != MAX_SD59x18) {\n            result = PRBMath.SD59x18({ value: rValue });\n        } else {\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\n            unchecked {\n                rValue = (log2(x).value * SCALE) / 3_321928094887362347;\n                result = PRBMath.SD59x18({ value: rValue });\n            }\n        }\n    }\n\n    /// @notice Calculates the binary logarithm of x.\n    ///\n    /// @dev Based on the iterative approximation algorithm.\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\n    ///\n    /// Requirements:\n    /// - x must be greater than zero.\n    ///\n    /// Caveats:\n    /// - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the binary logarithm.\n    /// @return result The binary logarithm as a signed 59.18-decimal fixed-point number.\n    function log2(PRBMath.SD59x18 memory x) internal pure returns (PRBMath.SD59x18 memory result) {\n        int256 xValue = x.value;\n        if (xValue <= 0) {\n            revert PRBMathSD59x18__LogInputTooSmall(xValue);\n        }\n\n        unchecked {\n            // This works because log2(x) = -log2(1/x).\n            int256 sign;\n            if (xValue >= SCALE) {\n                sign = 1;\n            } else {\n                sign = -1;\n                // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\n                assembly {\n                    xValue := div(1000000000000000000000000000000000000, xValue)\n                }\n            }\n\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\n            uint256 n = PRBMath.mostSignificantBit(uint256(xValue / SCALE));\n\n            // The integer part of the logarithm as a signed 59.18-decimal fixed-point number. The operation can't overflow\n            // because n is maximum 255, SCALE is 1e18 and sign is either 1 or -1.\n            int256 rValue = int256(n) * SCALE;\n\n            // This is y = x * 2^(-n).\n            int256 y = xValue >> n;\n\n            // If y = 1, the fractional part is zero.\n            if (y == SCALE) {\n                return PRBMath.SD59x18({ value: rValue * sign });\n            }\n\n            // Calculate the fractional part via the iterative approximation.\n            // The \"delta >>= 1\" part is equivalent to \"delta /= 2\", but shifting bits is faster.\n            for (int256 delta = int256(HALF_SCALE); delta > 0; delta >>= 1) {\n                y = (y * y) / SCALE;\n\n                // Is y^2 > 2 and so in the range [2,4)?\n                if (y >= 2 * SCALE) {\n                    // Add the 2^(-m) factor to the logarithm.\n                    rValue += delta;\n\n                    // Corresponds to z/2 on Wikipedia.\n                    y >>= 1;\n                }\n            }\n            result = PRBMath.SD59x18({ value: rValue * sign });\n        }\n    }\n\n    /// @notice Multiplies two signed 59.18-decimal fixed-point numbers together, returning a new signed 59.18-decimal\n    /// fixed-point number.\n    ///\n    /// @dev Variant of \"mulDiv\" that works with signed numbers and employs constant folding, i.e. the denominator is\n    /// always 1e18.\n    ///\n    /// Requirements:\n    /// - All from \"PRBMath.mulDivFixedPoint\".\n    /// - None of the inputs can be MIN_SD59x18\n    /// - The result must fit within MAX_SD59x18.\n    ///\n    /// Caveats:\n    /// - The body is purposely left uncommented; see the NatSpec comments in \"PRBMath.mulDiv\" to understand how this works.\n    ///\n    /// @param x The multiplicand as a signed 59.18-decimal fixed-point number.\n    /// @param y The multiplier as a signed 59.18-decimal fixed-point number.\n    /// @return result The product as a signed 59.18-decimal fixed-point number.\n    function mul(PRBMath.SD59x18 memory x, PRBMath.SD59x18 memory y)\n        internal\n        pure\n        returns (PRBMath.SD59x18 memory result)\n    {\n        int256 xValue = x.value;\n        int256 yValue = y.value;\n        if (xValue == MIN_SD59x18 || yValue == MIN_SD59x18) {\n            revert PRBMathSD59x18__MulInputTooSmall();\n        }\n\n        unchecked {\n            uint256 ax;\n            uint256 ay;\n            ax = xValue < 0 ? uint256(-xValue) : uint256(xValue);\n            ay = yValue < 0 ? uint256(-yValue) : uint256(yValue);\n\n            uint256 rAbs = PRBMath.mulDivFixedPoint(ax, ay);\n            if (rAbs > uint256(MAX_SD59x18)) {\n                revert PRBMathSD59x18__MulOverflow(rAbs);\n            }\n\n            uint256 sx;\n            uint256 sy;\n            assembly {\n                sx := sgt(xValue, sub(0, 1))\n                sy := sgt(yValue, sub(0, 1))\n            }\n            result = PRBMath.SD59x18({ value: sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs) });\n        }\n    }\n\n    /// @notice Returns PI as a signed 59.18-decimal fixed-point number.\n    function pi() internal pure returns (PRBMath.SD59x18 memory result) {\n        result = PRBMath.SD59x18({ value: 3_141592653589793238 });\n    }\n\n    /// @notice Raises x to the power of y.\n    ///\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\n    ///\n    /// Requirements:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    /// - z cannot be zero.\n    ///\n    /// Caveats:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x Number to raise to given power y, as a signed 59.18-decimal fixed-point number.\n    /// @param y Exponent to raise x to, as a signed 59.18-decimal fixed-point number.\n    /// @return result x raised to power y, as a signed 59.18-decimal fixed-point number.\n    function pow(PRBMath.SD59x18 memory x, PRBMath.SD59x18 memory y)\n        internal\n        pure\n        returns (PRBMath.SD59x18 memory result)\n    {\n        if (x.value == 0) {\n            return PRBMath.SD59x18({ value: y.value == 0 ? SCALE : int256(0) });\n        } else {\n            result = exp2(mul(log2(x), y));\n        }\n    }\n\n    /// @notice Raises x (signed 59.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\n    /// famous algorithm \"exponentiation by squaring\".\n    ///\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    ///\n    /// Requirements:\n    /// - All from \"abs\" and \"PRBMath.mulDivFixedPoint\".\n    /// - The result must fit within MAX_SD59x18.\n    ///\n    /// Caveats:\n    /// - All from \"PRBMath.mulDivFixedPoint\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x The base as a signed 59.18-decimal fixed-point number.\n    /// @param y The exponent as an uint256.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function powu(PRBMath.SD59x18 memory x, uint256 y) internal pure returns (PRBMath.SD59x18 memory result) {\n        uint256 xAbs = uint256(abs(x).value);\n\n        // Calculate the first iteration of the loop in advance.\n        uint256 rAbs = y & 1 > 0 ? xAbs : uint256(SCALE);\n\n        // Equivalent to \"for(y /= 2; y > 0; y /= 2)\" but faster.\n        uint256 yAux = y;\n        for (yAux >>= 1; yAux > 0; yAux >>= 1) {\n            xAbs = PRBMath.mulDivFixedPoint(xAbs, xAbs);\n\n            // Equivalent to \"y % 2 == 1\" but faster.\n            if (yAux & 1 > 0) {\n                rAbs = PRBMath.mulDivFixedPoint(rAbs, xAbs);\n            }\n        }\n\n        // The result must fit within the 59.18-decimal fixed-point representation.\n        if (rAbs > uint256(MAX_SD59x18)) {\n            revert PRBMathSD59x18__PowuOverflow(rAbs);\n        }\n\n        // Is the base negative and the exponent an odd number?\n        bool isNegative = x.value < 0 && y & 1 == 1;\n        result = PRBMath.SD59x18({ value: isNegative ? -int256(rAbs) : int256(rAbs) });\n    }\n\n    /// @notice Returns 1 as a signed 59.18-decimal fixed-point number.\n    function scale() internal pure returns (PRBMath.SD59x18 memory result) {\n        result = PRBMath.SD59x18({ value: SCALE });\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Requirements:\n    /// - x cannot be negative.\n    /// - x must be less than MAX_SD59x18 / SCALE.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the square root.\n    /// @return result The result as a signed 59.18-decimal fixed-point .\n    function sqrt(PRBMath.SD59x18 memory x) internal pure returns (PRBMath.SD59x18 memory result) {\n        int256 xValue = x.value;\n        unchecked {\n            if (xValue < 0) {\n                revert PRBMathSD59x18__SqrtNegativeInput(xValue);\n            }\n            if (xValue > MAX_SD59x18 / SCALE) {\n                revert PRBMathSD59x18__SqrtOverflow(xValue);\n            }\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two signed\n            // 59.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\n            int256 rValue = int256(PRBMath.sqrt(uint256(xValue * SCALE)));\n            result = PRBMath.SD59x18({ value: rValue });\n        }\n    }\n\n    /// @notice Subtracts one signed 59.18-decimal fixed-point number from another one, returning a new signed 59.18-decimal\n    /// fixed-point number.\n    /// @param x The minuend as a signed 59.18-decimal fixed-point number.\n    /// @param y The subtrahend as a signed 59.18-decimal fixed-point number.\n    /// @param result The difference as a signed 59.18 decimal fixed-point number.\n    function sub(PRBMath.SD59x18 memory x, PRBMath.SD59x18 memory y)\n        internal\n        pure\n        returns (PRBMath.SD59x18 memory result)\n    {\n        result = PRBMath.SD59x18({ value: x.value - y.value });\n    }\n\n    /// @notice Converts a signed 59.18-decimal fixed-point number to basic integer form, rounding down in the process.\n    /// @param x The signed 59.18-decimal fixed-point number to convert.\n    /// @return result The same number in basic integer form.\n    function toInt(PRBMath.SD59x18 memory x) internal pure returns (int256 result) {\n        unchecked {\n            result = x.value / SCALE;\n        }\n    }\n}\n"
    },
    "contracts/libraries/LiquidatorLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@prb/math/contracts/PRBMath.sol\";\nimport \"@prb/math/contracts/PRBMathSD59x18Typed.sol\";\n\nimport \"./VirtualCpmmLib.sol\";\n\nlibrary LiquidatorLib {\n    using SafeMath for uint256;\n    using SafeCast for uint256;\n    using PRBMathSD59x18Typed for PRBMath.SD59x18;\n\n    struct State {\n        PRBMath.SD59x18 exchangeRate;\n        uint256 lastSaleTime;\n        // positive price range change per second.\n        PRBMath.SD59x18 deltaRatePerSecond;\n        // Price impact for purchase of accrued funds\n        // low slippage => higher frequency arbs, but it tracks the market rate slower (slower to change)\n        PRBMath.SD59x18 maxSlippage;\n    }\n\n    function _increaseExchangeRateByDeltaTime(\n        PRBMath.SD59x18 memory exchangeRate,\n        PRBMath.SD59x18 memory deltaRatePerSecond,\n        uint256 lastSaleTime,\n        uint256 currentTime\n    ) internal pure returns (PRBMath.SD59x18 memory) {\n        // over time, buying power of POOL goes up.\n        PRBMath.SD59x18 memory dt = PRBMathSD59x18Typed.fromInt(\n            (currentTime - lastSaleTime).toInt256()\n        );\n        return exchangeRate.add(exchangeRate.mul(dt.mul(deltaRatePerSecond)));\n    }\n\n    function computeExchangeRate(State storage _liquidationState, uint256 _currentTime)\n        internal\n        view\n        returns (PRBMath.SD59x18 memory)\n    {\n        return\n            _increaseExchangeRateByDeltaTime(\n                _liquidationState.exchangeRate,\n                _liquidationState.deltaRatePerSecond,\n                _liquidationState.lastSaleTime,\n                _currentTime\n            );\n    }\n\n    function computeExactAmountInAtTime(\n        State storage _liquidationState,\n        uint256 availableBalance,\n        uint256 amountOut,\n        uint256 currentTime\n    ) internal pure returns (uint256) {\n        if (availableBalance == 0) {\n            return 0;\n        }\n        VirtualCpmmLib.Cpmm memory cpmm = _computeCpmm(\n            _liquidationState,\n            availableBalance,\n            currentTime\n        );\n        return VirtualCpmmLib.getAmountIn(amountOut, cpmm.want, cpmm.have);\n    }\n\n    function computeExactAmountOutAtTime(\n        State storage _liquidationState,\n        uint256 availableBalance,\n        uint256 amountIn,\n        uint256 currentTime\n    ) internal pure returns (uint256) {\n        if (availableBalance == 0) {\n            return 0;\n        }\n        VirtualCpmmLib.Cpmm memory cpmm = _computeCpmm(\n            _liquidationState,\n            availableBalance,\n            currentTime\n        );\n        return VirtualCpmmLib.getAmountOut(amountIn, cpmm.want, cpmm.have);\n    }\n\n    function _computeCpmm(\n        State storage _liquidationState,\n        uint256 availableBalance,\n        uint256 currentTime\n    ) internal pure returns (VirtualCpmmLib.Cpmm memory) {\n        State memory liquidationState = _liquidationState;\n        PRBMath.SD59x18 memory newExchangeRate = _increaseExchangeRateByDeltaTime(\n            liquidationState.exchangeRate,\n            liquidationState.deltaRatePerSecond,\n            liquidationState.lastSaleTime,\n            currentTime\n        );\n        return\n            VirtualCpmmLib.newCpmm(\n                liquidationState.maxSlippage,\n                newExchangeRate,\n                PRBMathSD59x18Typed.fromInt(availableBalance.toInt256())\n            );\n    }\n\n    function swapExactAmountInAtTime(\n        State storage liquidationState,\n        uint256 availableBalance,\n        uint256 amountIn,\n        uint256 currentTime\n    ) internal returns (uint256) {\n        require(availableBalance > 0, \"Whoops! no funds available\");\n        VirtualCpmmLib.Cpmm memory cpmm = _computeCpmm(\n            liquidationState,\n            availableBalance,\n            currentTime\n        );\n\n        uint256 amountOut = VirtualCpmmLib.getAmountOut(amountIn, cpmm.want, cpmm.have);\n        cpmm.want += amountIn;\n        cpmm.have -= amountOut;\n\n        require(amountOut <= availableBalance, \"Whoops! have exceeds available\");\n\n        liquidationState.lastSaleTime = currentTime;\n        liquidationState.exchangeRate = _cpmmToExchangeRate(cpmm);\n\n        return amountOut;\n    }\n\n    function swapExactAmountOutAtTime(\n        State storage liquidationState,\n        uint256 availableBalance,\n        uint256 amountOut,\n        uint256 currentTime\n    ) internal returns (uint256) {\n        require(availableBalance > 0, \"Whoops! no funds available\");\n        VirtualCpmmLib.Cpmm memory cpmm = _computeCpmm(\n            liquidationState,\n            availableBalance,\n            currentTime\n        );\n\n        uint256 amountIn = VirtualCpmmLib.getAmountIn(amountOut, cpmm.want, cpmm.have);\n        cpmm.want += amountIn;\n        cpmm.have -= amountOut;\n\n        require(amountOut <= availableBalance, \"Whoops! have exceeds available\");\n\n        liquidationState.lastSaleTime = currentTime;\n        liquidationState.exchangeRate = _cpmmToExchangeRate(cpmm);\n\n        return amountIn;\n    }\n\n    function _cpmmToExchangeRate(VirtualCpmmLib.Cpmm memory cpmm)\n        internal\n        pure\n        returns (PRBMath.SD59x18 memory)\n    {\n        return\n            PRBMathSD59x18Typed.fromInt(int256(cpmm.have)).div(\n                PRBMathSD59x18Typed.fromInt(int256(cpmm.want))\n            );\n    }\n}\n"
    },
    "contracts/libraries/VirtualCpmmLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@prb/math/contracts/PRBMathSD59x18Typed.sol\";\n\nlibrary VirtualCpmmLib {\n  using SafeCast for uint256;\n  using SafeMath for uint256;\n  using PRBMathSD59x18Typed for PRBMath.SD59x18;\n\n  struct Cpmm {\n    uint256 have;\n    uint256 want;\n  }\n\n  function newCpmm(\n    PRBMath.SD59x18 memory maxSlippage,\n    PRBMath.SD59x18 memory exchangeRate,\n    PRBMath.SD59x18 memory haveAmount\n  ) internal pure returns (Cpmm memory) {\n    // x = (b / (0.99 * ex)) / (b*ex/(b*0.99*ex) - 1)\n    PRBMath.SD59x18 memory one = PRBMath.SD59x18(1 ether);\n    PRBMath.SD59x18 memory slipEx = one.sub(maxSlippage).mul(exchangeRate);\n    PRBMath.SD59x18 memory want = haveAmount.div(slipEx).div(\n      haveAmount.mul(exchangeRate).div(haveAmount.mul(slipEx)).sub(one)\n    );\n    PRBMath.SD59x18 memory have = want.mul(exchangeRate);\n    return Cpmm({\n        have: uint256(have.toInt()),\n        want: uint256(want.toInt())\n    });\n  }\n\n  // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n  function getAmountOut(uint amountIn, uint x, uint y) internal pure returns (uint amountOut) {\n      // require(amountIn > 0, \"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\");\n      require(x > 0 && y > 0, \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\");\n      uint numerator = amountIn.mul(y);\n      uint denominator = x.add(amountIn);\n      return numerator / denominator;\n  }\n\n  // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n  function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n      // require(amountOut > 0, \"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\");\n      require(reserveIn > 0 && reserveOut > 0, \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\");\n      uint numerator = reserveIn.mul(amountOut);\n      uint denominator = reserveOut.sub(amountOut);\n      amountIn = (numerator / denominator);\n  }\n\n}\n"
    },
    "contracts/test/PrizePoolLiquidatorHarness.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"../PrizePoolLiquidator.sol\";\n\ncontract PrizePoolLiquidatorHarness is PrizePoolLiquidator {\n\n  function swapExactAmountInAtTime(IPrizePool _prizePool, uint256 amountIn, uint256 amountOutMin, uint256 currentTime) external returns (uint256) {\n    return _swapExactAmountInAtTime(_prizePool, amountIn, amountOutMin, currentTime);\n  }\n\n  function swapExactAmountOutAtTime(\n    IPrizePool _prizePool,\n    uint256 amountOut,\n    uint256 amountInMax,\n    uint256 currentTime\n  ) external returns (uint256) {\n    return _swapExactAmountOutAtTime(_prizePool, amountOut, amountInMax, currentTime);\n  }\n}\n"
    },
    "contracts/prize-strategy/PrizeSplitStrategy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"./PrizeSplit.sol\";\nimport \"../interfaces/IStrategy.sol\";\nimport \"../interfaces/IPrizePool.sol\";\n\n/**\n  * @title  PoolTogether V4 PrizeSplitStrategy\n  * @author PoolTogether Inc Team\n  * @notice Captures PrizePool interest for PrizeReserve and additional PrizeSplit recipients.\n            The PrizeSplitStrategy will have at minimum a single PrizeSplit with 100% of the captured\n            interest transfered to the PrizeReserve. Additional PrizeSplits can be added, depending on\n            the deployers requirements (i.e. percentage to charity). In contrast to previous PoolTogether\n            iterations, interest can be captured independent of a new Draw. Ideally (to save gas) interest\n            is only captured when also distributing the captured prize(s) to applicable Prize Distributor(s).\n*/\ncontract PrizeSplitStrategy is PrizeSplit, IStrategy {\n    /**\n     * @notice PrizePool address\n     */\n    IPrizePool internal immutable prizePool;\n\n    /**\n     * @notice Deployed Event\n     * @param owner Contract owner\n     * @param prizePool Linked PrizePool contract\n     */\n    event Deployed(address indexed owner, IPrizePool prizePool);\n\n    /* ============ Constructor ============ */\n\n    /**\n     * @notice Deploy the PrizeSplitStrategy smart contract.\n     * @param _owner     Owner address\n     * @param _prizePool PrizePool address\n     */\n    constructor(address _owner, IPrizePool _prizePool) Ownable(_owner) {\n        require(\n            address(_prizePool) != address(0),\n            \"PrizeSplitStrategy/prize-pool-not-zero-address\"\n        );\n        prizePool = _prizePool;\n        emit Deployed(_owner, _prizePool);\n    }\n\n    /* ============ External Functions ============ */\n\n    /// @inheritdoc IStrategy\n    function distribute() external override returns (uint256) {\n        uint256 prize = prizePool.captureAwardBalance();\n\n        if (prize == 0) return 0;\n\n        uint256 prizeRemaining = _distributePrizeSplits(prize);\n\n        emit Distributed(prize - prizeRemaining);\n\n        return prize;\n    }\n\n    /// @inheritdoc IPrizeSplit\n    function getPrizePool() external view override returns (IPrizePool) {\n        return prizePool;\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * @notice Award ticket tokens to prize split recipient.\n     * @dev Award ticket tokens to prize split recipient via the linked PrizePool contract.\n     * @param _to Recipient of minted tokens.\n     * @param _amount Amount of minted tokens.\n     */\n    function _awardPrizeSplitAmount(address _to, uint256 _amount) internal override {\n        IControlledToken _ticket = prizePool.getTicket();\n        prizePool.award(_to, _amount);\n        emit PrizeSplitAwarded(_to, _amount, _ticket);\n    }\n}\n"
    },
    "contracts/prize-strategy/PrizeSplit.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@pooltogether/owner-manager-contracts/contracts/Ownable.sol\";\n\nimport \"../interfaces/IPrizeSplit.sol\";\n\n/**\n * @title PrizeSplit Interface\n * @author PoolTogether Inc Team\n */\nabstract contract PrizeSplit is IPrizeSplit, Ownable {\n    /* ============ Global Variables ============ */\n    PrizeSplitConfig[] internal _prizeSplits;\n\n    uint16 public constant ONE_AS_FIXED_POINT_3 = 1000;\n\n    /* ============ External Functions ============ */\n\n    /// @inheritdoc IPrizeSplit\n    function getPrizeSplit(uint256 _prizeSplitIndex)\n        external\n        view\n        override\n        returns (PrizeSplitConfig memory)\n    {\n        return _prizeSplits[_prizeSplitIndex];\n    }\n\n    /// @inheritdoc IPrizeSplit\n    function getPrizeSplits() external view override returns (PrizeSplitConfig[] memory) {\n        return _prizeSplits;\n    }\n\n    /// @inheritdoc IPrizeSplit\n    function setPrizeSplits(PrizeSplitConfig[] calldata _newPrizeSplits)\n        external\n        override\n        onlyOwner\n    {\n        uint256 newPrizeSplitsLength = _newPrizeSplits.length;\n        require(newPrizeSplitsLength <= type(uint8).max, \"PrizeSplit/invalid-prizesplits-length\");\n\n        // Add and/or update prize split configs using _newPrizeSplits PrizeSplitConfig structs array.\n        for (uint256 index = 0; index < newPrizeSplitsLength; index++) {\n            PrizeSplitConfig memory split = _newPrizeSplits[index];\n\n            // REVERT when setting the canonical burn address.\n            require(split.target != address(0), \"PrizeSplit/invalid-prizesplit-target\");\n\n            // IF the CURRENT prizeSplits length is below the NEW prizeSplits\n            // PUSH the PrizeSplit struct to end of the list.\n            if (_prizeSplits.length <= index) {\n                _prizeSplits.push(split);\n            } else {\n                // ELSE update an existing PrizeSplit struct with new parameters\n                PrizeSplitConfig memory currentSplit = _prizeSplits[index];\n\n                // IF new PrizeSplit DOES NOT match the current PrizeSplit\n                // WRITE to STORAGE with the new PrizeSplit\n                if (\n                    split.target != currentSplit.target ||\n                    split.percentage != currentSplit.percentage\n                ) {\n                    _prizeSplits[index] = split;\n                } else {\n                    continue;\n                }\n            }\n\n            // Emit the added/updated prize split config.\n            emit PrizeSplitSet(split.target, split.percentage, index);\n        }\n\n        // Remove old prize splits configs. Match storage _prizesSplits.length with the passed newPrizeSplits.length\n        while (_prizeSplits.length > newPrizeSplitsLength) {\n            uint256 _index;\n            unchecked {\n                _index = _prizeSplits.length - 1;\n            }\n            _prizeSplits.pop();\n            emit PrizeSplitRemoved(_index);\n        }\n\n        // Total prize split do not exceed 100%\n        uint256 totalPercentage = _totalPrizeSplitPercentageAmount();\n        require(totalPercentage <= ONE_AS_FIXED_POINT_3, \"PrizeSplit/invalid-prizesplit-percentage-total\");\n    }\n\n    /// @inheritdoc IPrizeSplit\n    function setPrizeSplit(PrizeSplitConfig memory _prizeSplit, uint8 _prizeSplitIndex)\n        external\n        override\n        onlyOwner\n    {\n        require(_prizeSplitIndex < _prizeSplits.length, \"PrizeSplit/nonexistent-prizesplit\");\n        require(_prizeSplit.target != address(0), \"PrizeSplit/invalid-prizesplit-target\");\n\n        // Update the prize split config\n        _prizeSplits[_prizeSplitIndex] = _prizeSplit;\n\n        // Total prize split do not exceed 100%\n        uint256 totalPercentage = _totalPrizeSplitPercentageAmount();\n        require(totalPercentage <= ONE_AS_FIXED_POINT_3, \"PrizeSplit/invalid-prizesplit-percentage-total\");\n\n        // Emit updated prize split config\n        emit PrizeSplitSet(\n            _prizeSplit.target,\n            _prizeSplit.percentage,\n            _prizeSplitIndex\n        );\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * @notice Calculates total prize split percentage amount.\n     * @dev Calculates total PrizeSplitConfig percentage(s) amount. Used to check the total does not exceed 100% of award distribution.\n     * @return Total prize split(s) percentage amount\n     */\n    function _totalPrizeSplitPercentageAmount() internal view returns (uint256) {\n        uint256 _tempTotalPercentage;\n        uint256 prizeSplitsLength = _prizeSplits.length;\n\n        for (uint256 index = 0; index < prizeSplitsLength; index++) {\n            _tempTotalPercentage += _prizeSplits[index].percentage;\n        }\n\n        return _tempTotalPercentage;\n    }\n\n    /**\n     * @notice Distributes prize split(s).\n     * @dev Distributes prize split(s) by awarding ticket or sponsorship tokens.\n     * @param _prize Starting prize award amount\n     * @return The remainder after splits are taken\n     */\n    function _distributePrizeSplits(uint256 _prize) internal returns (uint256) {\n        uint256 _prizeTemp = _prize;\n        uint256 prizeSplitsLength = _prizeSplits.length;\n\n        for (uint256 index = 0; index < prizeSplitsLength; index++) {\n            PrizeSplitConfig memory split = _prizeSplits[index];\n            uint256 _splitAmount = (_prize * split.percentage) / 1000;\n\n            // Award the prize split distribution amount.\n            _awardPrizeSplitAmount(split.target, _splitAmount);\n\n            // Update the remaining prize amount after distributing the prize split percentage.\n            _prizeTemp -= _splitAmount;\n        }\n\n        return _prizeTemp;\n    }\n\n    /**\n     * @notice Mints ticket or sponsorship tokens to prize split recipient.\n     * @dev Mints ticket or sponsorship tokens to prize split recipient via the linked PrizePool contract.\n     * @param _target Recipient of minted tokens\n     * @param _amount Amount of minted tokens\n     */\n    function _awardPrizeSplitAmount(address _target, uint256 _amount) internal virtual;\n}\n"
    },
    "contracts/interfaces/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\ninterface IStrategy {\n    /**\n     * @notice Emit when a strategy captures award amount from PrizePool.\n     * @param totalPrizeCaptured  Total prize captured from the PrizePool\n     */\n    event Distributed(uint256 totalPrizeCaptured);\n\n    /**\n     * @notice Capture the award balance and distribute to prize splits.\n     * @dev    Permissionless function to initialize distribution of interst\n     * @return Prize captured from PrizePool\n     */\n    function distribute() external returns (uint256);\n}\n"
    },
    "contracts/interfaces/IPrizeSplit.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"./IControlledToken.sol\";\nimport \"./IPrizePool.sol\";\n\n/**\n * @title Abstract prize split contract for adding unique award distribution to static addresses.\n * @author PoolTogether Inc Team\n */\ninterface IPrizeSplit {\n    /**\n     * @notice Emit when an individual prize split is awarded.\n     * @param user          User address being awarded\n     * @param prizeAwarded  Awarded prize amount\n     * @param token         Token address\n     */\n    event PrizeSplitAwarded(\n        address indexed user,\n        uint256 prizeAwarded,\n        IControlledToken indexed token\n    );\n\n    /**\n     * @notice The prize split configuration struct.\n     * @dev    The prize split configuration struct used to award prize splits during distribution.\n     * @param target     Address of recipient receiving the prize split distribution\n     * @param percentage Percentage of prize split using a 0-1000 range for single decimal precision i.e. 125 = 12.5%\n     */\n    struct PrizeSplitConfig {\n        address target;\n        uint16 percentage;\n    }\n\n    /**\n     * @notice Emitted when a PrizeSplitConfig config is added or updated.\n     * @dev    Emitted when a PrizeSplitConfig config is added or updated in setPrizeSplits or setPrizeSplit.\n     * @param target     Address of prize split recipient\n     * @param percentage Percentage of prize split. Must be between 0 and 1000 for single decimal precision\n     * @param index      Index of prize split in the prizeSplts array\n     */\n    event PrizeSplitSet(address indexed target, uint16 percentage, uint256 index);\n\n    /**\n     * @notice Emitted when a PrizeSplitConfig config is removed.\n     * @dev    Emitted when a PrizeSplitConfig config is removed from the prizeSplits array.\n     * @param target Index of a previously active prize split config\n     */\n    event PrizeSplitRemoved(uint256 indexed target);\n\n    /**\n     * @notice Read prize split config from active PrizeSplits.\n     * @dev    Read PrizeSplitConfig struct from prizeSplits array.\n     * @param prizeSplitIndex Index position of PrizeSplitConfig\n     * @return PrizeSplitConfig Single prize split config\n     */\n    function getPrizeSplit(uint256 prizeSplitIndex) external view returns (PrizeSplitConfig memory);\n\n    /**\n     * @notice Read all prize splits configs.\n     * @dev    Read all PrizeSplitConfig structs stored in prizeSplits.\n     * @return Array of PrizeSplitConfig structs\n     */\n    function getPrizeSplits() external view returns (PrizeSplitConfig[] memory);\n\n    /**\n     * @notice Get PrizePool address\n     * @return IPrizePool\n     */\n    function getPrizePool() external view returns (IPrizePool);\n\n    /**\n     * @notice Set and remove prize split(s) configs. Only callable by owner.\n     * @dev Set and remove prize split configs by passing a new PrizeSplitConfig structs array. Will remove existing PrizeSplitConfig(s) if passed array length is less than existing prizeSplits length.\n     * @param newPrizeSplits Array of PrizeSplitConfig structs\n     */\n    function setPrizeSplits(PrizeSplitConfig[] calldata newPrizeSplits) external;\n\n    /**\n     * @notice Updates a previously set prize split config.\n     * @dev Updates a prize split config by passing a new PrizeSplitConfig struct and current index position. Limited to contract owner.\n     * @param prizeStrategySplit PrizeSplitConfig config struct\n     * @param prizeSplitIndex Index position of PrizeSplitConfig to update\n     */\n    function setPrizeSplit(PrizeSplitConfig memory prizeStrategySplit, uint8 prizeSplitIndex)\n        external;\n}\n"
    },
    "contracts/test/PrizeSplitStrategyHarness.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"../prize-strategy/PrizeSplitStrategy.sol\";\n\ncontract PrizeSplitStrategyHarness is PrizeSplitStrategy {\n    constructor(address _owner, IPrizePool _prizePool) PrizeSplitStrategy(_owner, _prizePool) {}\n\n    function awardPrizeSplitAmount(address target, uint256 amount) external {\n        return _awardPrizeSplitAmount(target, amount);\n    }\n}\n"
    },
    "contracts/test/PrizeSplitHarness.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"../prize-strategy/PrizeSplit.sol\";\nimport \"../interfaces/IControlledToken.sol\";\n\ncontract PrizeSplitHarness is PrizeSplit {\n    constructor(address _owner) Ownable(_owner) {}\n\n    function _awardPrizeSplitAmount(address target, uint256 amount) internal override {\n        emit PrizeSplitAwarded(target, amount, IControlledToken(address(0)));\n    }\n\n    function awardPrizeSplitAmount(address target, uint256 amount) external {\n        return _awardPrizeSplitAmount(target, amount);\n    }\n\n    function getPrizePool() external pure override returns (IPrizePool) {\n        return IPrizePool(address(0));\n    }\n}\n"
    },
    "contracts/TokenVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n    * @title  PoolTogether Vault\n    * @author PoolTogether Inc Team\n */\ncontract Vault is Manageable {\n    using SafeERC20 for IERC20;\n\n    mapping(address => bool) public approved;\n\n    /**\n     * @notice Constructs Vault\n     * @param _owner Owner address\n     */\n    constructor(address _owner) Ownable(_owner) {}\n\n    function setApproved(address _account, bool _approved) external onlyOwner {\n        approved[_account] = _approved;\n    }\n\n    /**\n     * @notice Decrease allowance of ERC20 tokens held by this contract.\n     * @dev Only callable by the owner or asset manager.\n     * @dev Current allowance should be computed off-chain to avoid any underflow.\n     * @param token Address of the ERC20 token to decrease allowance for\n     * @param spender Address of the spender of the tokens\n     * @param amount Amount of tokens to decrease allowance by\n     */\n    function decreaseERC20Allowance(\n        IERC20 token,\n        address spender,\n        uint256 amount\n    ) external onlyManagerOrOwner {\n        token.safeDecreaseAllowance(spender, amount);\n    }\n\n    /**\n     * @notice Increase allowance of ERC20 tokens held by this contract.\n     * @dev Only callable by the owner or asset manager.\n     * @dev Current allowance should be computed off-chain to avoid any overflow.\n     * @param token Address of the ERC20 token to increase allowance for\n     * @param spender Address of the spender of the tokens\n     * @param amount Amount of tokens to increase allowance by\n     */\n    function increaseERC20Allowance(\n        IERC20 token,\n        address spender,\n        uint256 amount\n    ) external onlyManagerOrOwner {\n        require(approved[spender], \"Spender must be approved\");\n        token.safeIncreaseAllowance(spender, amount);\n    }\n}\n"
    },
    "contracts/PrizeDistributorV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\";\nimport \"./interfaces/IDrawCalculatorV3.sol\";\n\n/**\n    * @title  PoolTogether V4 PrizeDistributorV2\n    * @author PoolTogether Inc Team\n    * @notice The PrizeDistributorV2 contract holds Tickets (captured interest) and distributes tickets to users with winning draw claims.\n              PrizeDistributorV2 uses an external IDrawCalculatorV3 to validate a users draw claim, before awarding payouts. To prevent users \n              from reclaiming prizes, a payout history for each draw claim is mapped to user accounts. Reclaiming a draw can occur\n              if an \"optimal\" prize was not included in previous claim pick indices and the new claims updated payout is greater then\n              the previous prize distributor claim payout.\n*/\ncontract PrizeDistributorV2 is Manageable {\n    using SafeERC20 for IERC20;\n\n    /**\n     * @notice Emit when user has claimed token from the PrizeDistributorV2.\n     * @param user   User address receiving draw claim payouts\n     * @param drawId Draw id that was paid out\n     * @param payout Payout for draw\n     */\n    event ClaimedDraw(address indexed user, uint32 indexed drawId, uint256 payout);\n\n    /**\n     * @notice Emit when IDrawCalculatorV3 is set.\n     * @param calculator IDrawCalculatorV3 address\n     */\n    event DrawCalculatorSet(IDrawCalculatorV3 indexed calculator);\n\n    /**\n     * @notice Emit when Token is set.\n     * @param token Token address\n     */\n    event TokenSet(IERC20 indexed token);\n\n    /**\n     * @notice Emit when ERC20 tokens are withdrawn.\n     * @param token  ERC20 token transferred.\n     * @param to     Address that received funds.\n     * @param amount Amount of tokens transferred.\n     */\n    event ERC20Withdrawn(IERC20 indexed token, address indexed to, uint256 amount);\n\n    /* ============ Global Variables ============ */\n\n    /// @notice IDrawCalculatorV3 address\n    IDrawCalculatorV3 internal drawCalculator;\n\n    /// @notice Token address\n    IERC20 internal immutable token;\n\n    /// @notice Maps users => drawId => paid out balance\n    mapping(address => mapping(uint256 => uint256)) internal userDrawPayouts;\n\n    /// @notice The vault that stores the prize tokens\n    address public vault;\n\n    /* ============ Initialize ============ */\n\n    /**\n     * @notice Initialize PrizeDistributorV2 smart contract.\n     * @param _owner          Owner address\n     * @param _token          Token address\n     * @param _drawCalculator IDrawCalculatorV3 address\n     */\n    constructor(\n        address _owner,\n        IERC20 _token,\n        IDrawCalculatorV3 _drawCalculator,\n        address _vault\n    ) Ownable(_owner) {\n        _setDrawCalculator(_drawCalculator);\n        require(address(_token) != address(0), \"PrizeDistributorV2/token-not-zero-address\");\n        token = _token;\n        vault = _vault;\n        emit TokenSet(_token);\n    }\n\n    /* ============ External Functions ============ */\n\n    function claim(\n        ITicket _ticket,\n        address _user,\n        uint32[] calldata _drawIds,\n        bytes calldata _data\n    ) external returns (uint256) {\n        \n        uint256 totalPayout;\n        \n        (uint256[] memory drawPayouts, ) = drawCalculator.calculate(_ticket, _user, _drawIds, _data); // neglect the prizeCounts since we are not interested in them here\n\n        uint256 drawPayoutsLength = drawPayouts.length;\n        for (uint256 payoutIndex = 0; payoutIndex < drawPayoutsLength; payoutIndex++) {\n            uint32 drawId = _drawIds[payoutIndex];\n            uint256 payout = drawPayouts[payoutIndex];\n            uint256 oldPayout = _getDrawPayoutBalanceOf(_user, drawId);\n            uint256 payoutDiff = 0;\n\n            // helpfully short-circuit, in case the user screwed something up.\n            require(payout > oldPayout, \"PrizeDistributorV2/zero-payout\");\n\n            unchecked {\n                payoutDiff = payout - oldPayout;\n            }\n\n            _setDrawPayoutBalanceOf(_user, drawId, payout);\n\n            totalPayout += payoutDiff;\n\n            emit ClaimedDraw(_user, drawId, payoutDiff);\n        }\n\n        _awardPayout(_user, totalPayout);\n\n        return totalPayout;\n    }\n\n    function withdrawERC20(\n        IERC20 _erc20Token,\n        address _to,\n        uint256 _amount\n    ) external onlyManagerOrOwner returns (bool) {\n        require(_to != address(0), \"PrizeDistributorV2/recipient-not-zero-address\");\n        require(address(_erc20Token) != address(0), \"PrizeDistributorV2/ERC20-not-zero-address\");\n\n        _erc20Token.safeTransfer(_to, _amount);\n\n        emit ERC20Withdrawn(_erc20Token, _to, _amount);\n\n        return true;\n    }\n\n    function getDrawCalculator() external view returns (IDrawCalculatorV3) {\n        return drawCalculator;\n    }\n\n    function getDrawPayoutBalanceOf(address _user, uint32 _drawId)\n        external\n        view\n        returns (uint256)\n    {\n        return _getDrawPayoutBalanceOf(_user, _drawId);\n    }\n\n    function getToken() external view returns (IERC20) {\n        return token;\n    }\n\n    function setDrawCalculator(IDrawCalculatorV3 _newCalculator)\n        external\n        onlyManagerOrOwner\n        returns (IDrawCalculatorV3)\n    {\n        _setDrawCalculator(_newCalculator);\n        return _newCalculator;\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _getDrawPayoutBalanceOf(address _user, uint32 _drawId)\n        internal\n        view\n        returns (uint256)\n    {\n        return userDrawPayouts[_user][_drawId];\n    }\n\n    function _setDrawPayoutBalanceOf(\n        address _user,\n        uint32 _drawId,\n        uint256 _payout\n    ) internal {\n        userDrawPayouts[_user][_drawId] = _payout;\n    }\n\n    /**\n     * @notice Sets IDrawCalculatorV3 reference for individual draw id.\n     * @param _newCalculator  IDrawCalculatorV3 address\n     */\n    function _setDrawCalculator(IDrawCalculatorV3 _newCalculator) internal {\n        require(address(_newCalculator) != address(0), \"PrizeDistributorV2/calc-not-zero\");\n        drawCalculator = _newCalculator;\n\n        emit DrawCalculatorSet(_newCalculator);\n    }\n\n    /**\n     * @notice Transfer claimed draw(s) total payout to user.\n     * @param _to      User address\n     * @param _amount  Transfer amount\n     */\n    function _awardPayout(address _to, uint256 _amount) internal {\n        token.safeTransferFrom(vault, _to, _amount);\n    }\n\n}\n"
    },
    "contracts/interfaces/IDrawCalculatorV3.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"./ITicket.sol\";\nimport \"./IDrawBuffer.sol\";\nimport \"./IGaugeController.sol\";\nimport \"./IPrizeConfigHistory.sol\";\n\n/**\n * @title  PoolTogether V4 IDrawCalculatorV3\n * @author PoolTogether Inc Team\n * @notice The DrawCalculator interface.\n */\ninterface IDrawCalculatorV3 {\n    /**\n     * @notice Calculates the awardable prizes for a user for Multiple Draws. Typically called by a PrizeDistributor.\n     * @param ticket Address of the ticket to calculate awardable prizes for\n     * @param user Address of the user for which to calculate awardable prizes for\n     * @param drawIds Array of DrawIds for which to calculate awardable prizes for\n     * @param data ABI encoded pick indices for all Draws. Expected to be winning picks. Pick indices must be less than the totalUserPicks.\n     * @return List of awardable prize amounts ordered by drawId.\n     * @return List of prize counts ordered by tiers.\n     */\n    function calculate(\n        ITicket ticket,\n        address user,\n        uint32[] calldata drawIds,\n        bytes calldata data\n    ) external view returns (uint256[] memory, bytes memory);\n\n    /**\n     * @notice Calculates picks for a user for Multiple Draws.\n     * @param ticket Address of the ticket to calculate picks for\n     * @param user Address of the user for which to calculate picks for\n     * @param drawIds Array of DrawIds for which to calculate picks for\n     */\n    function calculateUserPicks(\n        ITicket ticket,\n        address user,\n        uint32[] calldata drawIds\n    ) external view returns (uint64[] memory);\n\n    /**\n     * @notice Returns DrawBuffer address.\n     * @return The DrawBuffer address\n     */\n    function getDrawBuffer() external view returns (IDrawBuffer);\n\n    /**\n     * @notice Returns GaugeController address.\n     * @return The GaugeController address\n     */\n    function getGaugeController() external view returns (IGaugeController);\n\n    /**\n     * @notice Returns PrizeConfigHistory address.\n     * @return The PrizeConfigHistory address\n     */\n    function getPrizeConfigHistory() external view returns (IPrizeConfigHistory);\n\n    /**\n     * @notice Returns the total number of picks for a prize pool / ticket.\n     * @param ticket Address of the ticket to get total picks for\n     * @param startTime Timestamp at which the draw starts\n     * @param endTime Timestamp at which the draw ends\n     * @param poolStakeCeiling Globally configured pool stake ceiling\n     * @param bitRange Number of bits allocated to each division\n     * @param cardinality Number of sub-divisions of a random number\n     * @return Total number of picks for this prize pool / ticket\n     */\n    function getTotalPicks(\n        ITicket ticket,\n        uint256 startTime,\n        uint256 endTime,\n        uint256 poolStakeCeiling,\n        uint8 bitRange,\n        uint8 cardinality\n    ) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IDrawBuffer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"../interfaces/IDrawBeacon.sol\";\n\n/** @title  IDrawBuffer\n  * @author PoolTogether Inc Team\n  * @notice The DrawBuffer interface.\n*/\ninterface IDrawBuffer {\n    /**\n     * @notice Emit when a new draw has been created.\n     * @param drawId Draw id\n     * @param draw The Draw struct\n     */\n    event DrawSet(uint32 indexed drawId, IDrawBeacon.Draw draw);\n\n    /**\n     * @notice Read a ring buffer cardinality\n     * @return Ring buffer cardinality\n     */\n    function getBufferCardinality() external view returns (uint32);\n\n    /**\n     * @notice Read a Draw from the draws ring buffer.\n     * @dev    Read a Draw using the Draw.drawId to calculate position in the draws ring buffer.\n     * @param drawId Draw.drawId\n     * @return IDrawBeacon.Draw\n     */\n    function getDraw(uint32 drawId) external view returns (IDrawBeacon.Draw memory);\n\n    /**\n     * @notice Read multiple Draws from the draws ring buffer.\n     * @dev    Read multiple Draws using each drawId to calculate position in the draws ring buffer.\n     * @param drawIds Array of drawIds\n     * @return IDrawBeacon.Draw[]\n     */\n    function getDraws(uint32[] calldata drawIds) external view returns (IDrawBeacon.Draw[] memory);\n\n    /**\n     * @notice Gets the number of Draws held in the draw ring buffer.\n     * @dev If no Draws have been pushed, it will return 0.\n     * @dev If the ring buffer is full, it will return the cardinality.\n     * @dev Otherwise, it will return the NewestDraw index + 1.\n     * @return Number of Draws held in the draw ring buffer.\n     */\n    function getDrawCount() external view returns (uint32);\n\n    /**\n     * @notice Read newest Draw from draws ring buffer.\n     * @dev    Uses the nextDrawIndex to calculate the most recently added Draw.\n     * @return IDrawBeacon.Draw\n     */\n    function getNewestDraw() external view returns (IDrawBeacon.Draw memory);\n\n    /**\n     * @notice Read oldest Draw from draws ring buffer.\n     * @dev    Finds the oldest Draw by comparing and/or diffing totalDraws with the cardinality.\n     * @return IDrawBeacon.Draw\n     */\n    function getOldestDraw() external view returns (IDrawBeacon.Draw memory);\n\n    /**\n     * @notice Push Draw onto draws ring buffer history.\n     * @dev    Push new draw onto draws history via authorized manager or owner.\n     * @param draw IDrawBeacon.Draw\n     * @return Draw.drawId\n     */\n    function pushDraw(IDrawBeacon.Draw calldata draw) external returns (uint32);\n\n    /**\n     * @notice Set existing Draw in draws ring buffer with new parameters.\n     * @dev    Updating a Draw should be used sparingly and only in the event an incorrect Draw parameter has been stored.\n     * @param newDraw IDrawBeacon.Draw\n     * @return Draw.drawId\n     */\n    function setDraw(IDrawBeacon.Draw calldata newDraw) external returns (uint32);\n}\n"
    },
    "contracts/interfaces/IPrizeConfigHistory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\n/**\n * @title  PoolTogether V4 IPrizeConfigHistory\n * @author PoolTogether Inc Team\n * @notice IPrizeConfigHistory is the base contract for PrizeConfigHistory\n */\ninterface IPrizeConfigHistory {\n    /**\n     * @notice PrizeConfig struct read every draw.\n     * @param bitRangeSize Number of bits in decimal allocated to each division\n     * @param matchCardinality Number of numbers to consider in the 256 bit random number. Must be > 1 and < 256/bitRangeSize.\n     * @param maxPicksPerUser Maximum number of picks a user can make in this draw\n     * @param drawId Draw ID at which the PrizeConfig was pushed and is since valid\n     * @param expiryDuration Length of time in seconds the PrizeDistribution is valid for. Relative to the Draw.timestamp.\n     * @param endTimestampOffset The end time offset in seconds from which Ticket balances are calculated.\n     * @param poolStakeCeiling Total globally configured POOL staking ceiling\n     * @param prize Total prize amount available for this draw\n     * @param tiers Array of prize tiers percentages, expressed in fraction form with base 1e9. Ordering: index0: grandPrize, index1: runnerUp, etc.\n     */\n    struct PrizeConfig {\n        uint8 bitRangeSize;\n        uint8 matchCardinality;\n        uint16 maxPicksPerUser;\n        uint32 drawId;\n        uint32 expiryDuration;\n        uint32 endTimestampOffset;\n        uint128 poolStakeCeiling;\n        uint256 prize;\n        uint32[16] tiers;\n    }\n\n    /**\n     * @notice Returns the number of PrizeConfig structs pushed\n     * @return The number of prize config that have been pushed\n     */\n    function count() external view returns (uint256);\n\n    /**\n     * @notice Returns last Draw ID recorded in the history.\n     * @return Draw ID of the last PrizeConfig record\n     */\n    function getNewestDrawId() external view returns (uint32);\n\n    /**\n     * @notice Returns first Draw ID used to initialize history.\n     * @return Draw ID of the first PrizeConfig record\n     */\n    function getOldestDrawId() external view returns (uint32);\n\n    /**\n     * @notice Returns PrizeConfig struct for the passed Draw ID.\n     * @param drawId Draw ID for which to return PrizeConfig struct\n     * @return The PrizeConfig struct for the passed Draw ID\n     */\n    function getPrizeConfig(uint32 drawId) external view returns (PrizeConfig memory);\n\n    /**\n     * @notice Returns the PrizeConfig struct at the given index.\n     * @param index Index at which the PrizeConfig struct is stored\n     * @return The PrizeConfig struct at the given index\n     */\n    function getPrizeConfigAtIndex(uint256 index) external view returns (PrizeConfig memory);\n\n    /**\n     * @notice Returns a list of PrizeConfig from the history array.\n     * @param drawIds List of Draw IDs for which to return PrizeConfig structs\n     * @return The list of PrizeConfig structs for the passed Draw IDs\n     */\n    function getPrizeConfigList(uint32[] calldata drawIds)\n        external\n        view\n        returns (PrizeConfig[] memory);\n\n    /**\n     * @notice Push PrizeConfigHistory struct onto history array.\n     * @dev Callable only by the owner.\n     * @param prizeConfig Updated PrizeConfigHistory struct\n     * @return Draw ID at which the PrizeConfig was pushed and is since valid\n     */\n    function popAndPush(PrizeConfig calldata prizeConfig) external returns (uint32);\n\n    /**\n     * @notice Push PrizeConfig struct onto history array.\n     * @dev Callable only by the owner or manager.\n     * @param prizeConfig New PrizeConfig struct to push onto the history array\n     */\n    function push(PrizeConfig calldata prizeConfig) external;\n\n    /**\n     * @notice Replace PrizeConfig struct from history array.\n     * @dev Callable only by the owner.\n     * @param prizeConfig New PrizeConfig struct that will replace the previous PrizeConfig at the corresponding index\n     */\n    function replace(PrizeConfig calldata prizeConfig) external;\n}\n"
    },
    "contracts/interfaces/IDrawBeacon.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@pooltogether/pooltogether-rng-contracts/contracts/RNGInterface.sol\";\nimport \"./IDrawBuffer.sol\";\n\n/** @title  IDrawBeacon\n  * @author PoolTogether Inc Team\n  * @notice The DrawBeacon interface.\n*/\ninterface IDrawBeacon {\n\n    /// @notice Draw struct created every draw\n    /// @param winningRandomNumber The random number returned from the RNG service\n    /// @param drawId The monotonically increasing drawId for each draw\n    /// @param timestamp Unix timestamp of the draw. Recorded when the draw is created by the DrawBeacon.\n    /// @param beaconPeriodStartedAt Unix timestamp of when the draw started\n    /// @param beaconPeriodSeconds Unix timestamp of the beacon draw period for this draw.\n    struct Draw {\n        uint256 winningRandomNumber;\n        uint32 drawId;\n        uint64 timestamp;\n        uint64 beaconPeriodStartedAt;\n        uint32 beaconPeriodSeconds;\n    }\n\n    /**\n     * @notice Emit when a new DrawBuffer has been set.\n     * @param newDrawBuffer       The new DrawBuffer address\n     */\n    event DrawBufferUpdated(IDrawBuffer indexed newDrawBuffer);\n\n    /**\n     * @notice Emit when a draw has opened.\n     * @param startedAt Start timestamp\n     */\n    event BeaconPeriodStarted(uint64 indexed startedAt);\n\n    /**\n     * @notice Emit when a draw has started.\n     * @param rngRequestId  draw id\n     * @param rngLockBlock  Block when draw becomes invalid\n     */\n    event DrawStarted(uint32 indexed rngRequestId, uint32 rngLockBlock);\n\n    /**\n     * @notice Emit when a draw has been cancelled.\n     * @param rngRequestId  draw id\n     * @param rngLockBlock  Block when draw becomes invalid\n     */\n    event DrawCancelled(uint32 indexed rngRequestId, uint32 rngLockBlock);\n\n    /**\n     * @notice Emit when a draw has been completed.\n     * @param randomNumber  Random number generated from draw\n     */\n    event DrawCompleted(uint256 randomNumber);\n\n    /**\n     * @notice Emit when a RNG service address is set.\n     * @param rngService  RNG service address\n     */\n    event RngServiceUpdated(RNGInterface indexed rngService);\n\n    /**\n     * @notice Emit when a draw timeout param is set.\n     * @param rngTimeout  draw timeout param in seconds\n     */\n    event RngTimeoutSet(uint32 rngTimeout);\n\n    /**\n     * @notice Emit when the drawPeriodSeconds is set.\n     * @param drawPeriodSeconds Time between draw\n     */\n    event BeaconPeriodSecondsUpdated(uint32 drawPeriodSeconds);\n\n    /**\n     * @notice Returns the number of seconds remaining until the beacon period can be complete.\n     * @return The number of seconds remaining until the beacon period can be complete.\n     */\n    function beaconPeriodRemainingSeconds() external view returns (uint64);\n\n    /**\n     * @notice Returns the timestamp at which the beacon period ends\n     * @return The timestamp at which the beacon period ends.\n     */\n    function beaconPeriodEndAt() external view returns (uint64);\n\n    /**\n     * @notice Returns whether a Draw can be started.\n     * @return True if a Draw can be started, false otherwise.\n     */\n    function canStartDraw() external view returns (bool);\n\n    /**\n     * @notice Returns whether a Draw can be completed.\n     * @return True if a Draw can be completed, false otherwise.\n     */\n    function canCompleteDraw() external view returns (bool);\n\n    /**\n     * @notice Calculates when the next beacon period will start.\n     * @param time The timestamp to use as the current time\n     * @return The timestamp at which the next beacon period would start\n     */\n    function calculateNextBeaconPeriodStartTime(uint64 time) external view returns (uint64);\n\n    /**\n     * @notice Can be called by anyone to cancel the draw request if the RNG has timed out.\n     */\n    function cancelDraw() external;\n\n    /**\n     * @notice Completes the Draw (RNG) request and pushes a Draw onto DrawBuffer.\n     */\n    function completeDraw() external;\n\n    /**\n     * @notice Returns the block number that the current RNG request has been locked to.\n     * @return The block number that the RNG request is locked to\n     */\n    function getLastRngLockBlock() external view returns (uint32);\n\n    /**\n     * @notice Returns the current RNG Request ID.\n     * @return The current Request ID\n     */\n    function getLastRngRequestId() external view returns (uint32);\n\n    /**\n     * @notice Returns whether the beacon period is over\n     * @return True if the beacon period is over, false otherwise\n     */\n    function isBeaconPeriodOver() external view returns (bool);\n\n    /**\n     * @notice Returns whether the random number request has completed.\n     * @return True if a random number request has completed, false otherwise.\n     */\n    function isRngCompleted() external view returns (bool);\n\n    /**\n     * @notice Returns whether a random number has been requested\n     * @return True if a random number has been requested, false otherwise.\n     */\n    function isRngRequested() external view returns (bool);\n\n    /**\n     * @notice Returns whether the random number request has timed out.\n     * @return True if a random number request has timed out, false otherwise.\n     */\n    function isRngTimedOut() external view returns (bool);\n\n    /**\n     * @notice Allows the owner to set the beacon period in seconds.\n     * @param beaconPeriodSeconds The new beacon period in seconds.  Must be greater than zero.\n     */\n    function setBeaconPeriodSeconds(uint32 beaconPeriodSeconds) external;\n\n    /**\n     * @notice Allows the owner to set the RNG request timeout in seconds. This is the time that must elapsed before the RNG request can be cancelled and the pool unlocked.\n     * @param rngTimeout The RNG request timeout in seconds.\n     */\n    function setRngTimeout(uint32 rngTimeout) external;\n\n    /**\n     * @notice Sets the RNG service that the Prize Strategy is connected to\n     * @param rngService The address of the new RNG service interface\n     */\n    function setRngService(RNGInterface rngService) external;\n\n    /**\n     * @notice Starts the Draw process by starting random number request. The previous beacon period must have ended.\n     * @dev The RNG-Request-Fee is expected to be held within this contract before calling this function\n     */\n    function startDraw() external;\n\n    /**\n     * @notice Set global DrawBuffer variable.\n     * @dev    All subsequent Draw requests/completions will be pushed to the new DrawBuffer.\n     * @param newDrawBuffer DrawBuffer address\n     * @return DrawBuffer\n     */\n    function setDrawBuffer(IDrawBuffer newDrawBuffer) external returns (IDrawBuffer);\n}\n"
    },
    "@pooltogether/pooltogether-rng-contracts/contracts/RNGInterface.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.6.0;\n\n/// @title Random Number Generator Interface\n/// @notice Provides an interface for requesting random numbers from 3rd-party RNG services (Chainlink VRF, Starkware VDF, etc..)\ninterface RNGInterface {\n\n  /// @notice Emitted when a new request for a random number has been submitted\n  /// @param requestId The indexed ID of the request used to get the results of the RNG service\n  /// @param sender The indexed address of the sender of the request\n  event RandomNumberRequested(uint32 indexed requestId, address indexed sender);\n\n  /// @notice Emitted when an existing request for a random number has been completed\n  /// @param requestId The indexed ID of the request used to get the results of the RNG service\n  /// @param randomNumber The random number produced by the 3rd-party service\n  event RandomNumberCompleted(uint32 indexed requestId, uint256 randomNumber);\n\n  /// @notice Gets the last request id used by the RNG service\n  /// @return requestId The last request id used in the last request\n  function getLastRequestId() external view returns (uint32 requestId);\n\n  /// @notice Gets the Fee for making a Request against an RNG service\n  /// @return feeToken The address of the token that is used to pay fees\n  /// @return requestFee The fee required to be paid to make a request\n  function getRequestFee() external view returns (address feeToken, uint256 requestFee);\n\n  /// @notice Sends a request for a random number to the 3rd-party service\n  /// @dev Some services will complete the request immediately, others may have a time-delay\n  /// @dev Some services require payment in the form of a token, such as $LINK for Chainlink VRF\n  /// @return requestId The ID of the request used to get the results of the RNG service\n  /// @return lockBlock The block number at which the RNG service will start generating time-delayed randomness.  The calling contract\n  /// should \"lock\" all activity until the result is available via the `requestId`\n  function requestRandomNumber() external returns (uint32 requestId, uint32 lockBlock);\n\n  /// @notice Checks if the request for randomness from the 3rd-party service has completed\n  /// @dev For time-delayed requests, this function is used to check/confirm completion\n  /// @param requestId The ID of the request used to get the results of the RNG service\n  /// @return isCompleted True if the request has completed and a random number is available, false otherwise\n  function isRequestComplete(uint32 requestId) external view returns (bool isCompleted);\n\n  /// @notice Gets the random number produced by the 3rd-party service\n  /// @param requestId The ID of the request used to get the results of the RNG service\n  /// @return randomNum The random number\n  function randomNumber(uint32 requestId) external returns (uint256 randomNum);\n}\n"
    },
    "contracts/PrizeConfigHistory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\";\nimport \"@pooltogether/v4-periphery/contracts/libraries/BinarySearchLib.sol\";\n\nimport \"./interfaces/IPrizeConfigHistory.sol\";\n\n/**\n * @title  PoolTogether V4 PrizeConfigHistory\n * @author PoolTogether Inc Team\n * @notice Contract to store prize configurations\n */\ncontract PrizeConfigHistory is IPrizeConfigHistory, Manageable {\n    /// @dev The uint32[] type is extended with a binarySearch(uint32) function.\n    using BinarySearchLib for uint32[];\n\n    /* ============ Variables ============ */\n\n    /**\n     * @notice Ordered array of Draw IDs.\n     * @dev The history, with sequentially ordered ids, can be searched using binary search.\n            The binary search will find index of a drawId (atOrBefore) using a specific drawId (at).\n            When a new Draw ID is added to the history, a corresponding mapping of the ID is\n            updated in the prizeConfigs mapping.\n    */\n    uint32[] internal history;\n\n    /**\n     * @notice Mapping of Draw ID to PrizeConfig struct.\n     * @dev drawId -> PrizeConfig\n     * @dev The prizeConfigs mapping is updated when a new Draw ID is added to the history.\n     */\n    mapping(uint32 => PrizeConfig) internal prizeConfigs;\n\n    /* ============ Events ============ */\n\n    /**\n     * @notice Emit when a new PrizeConfig is added to history\n     * @param drawId    Draw ID at which the PrizeConfig was pushed and is since valid\n     * @param prizeConfig PrizeConfig struct\n     */\n    event PrizeConfigPushed(uint32 indexed drawId, PrizeConfig prizeConfig);\n\n    /**\n     * @notice Emit when existing PrizeConfig is updated in history\n     * @param drawId    Draw ID at which the PrizeConfig was set and is since valid\n     * @param prizeConfig PrizeConfig struct\n     */\n    event PrizeConfigSet(uint32 indexed drawId, PrizeConfig prizeConfig);\n\n    /* ============ Constructor ============ */\n\n    /**\n     * @notice PrizeConfigHistory constructor\n     * @param _owner Address of the owner\n     */\n    constructor(address _owner) Ownable(_owner) {}\n\n    /* ============ External Functions ============ */\n\n    /// @inheritdoc IPrizeConfigHistory\n    function count() external view override returns (uint256) {\n        return history.length;\n    }\n\n    /// @inheritdoc IPrizeConfigHistory\n    function getNewestDrawId() external view override returns (uint32) {\n        return history[history.length - 1];\n    }\n\n    /// @inheritdoc IPrizeConfigHistory\n    function getOldestDrawId() external view override returns (uint32) {\n        return history[0];\n    }\n\n    /// @inheritdoc IPrizeConfigHistory\n    function getPrizeConfig(uint32 _drawId)\n        external\n        view\n        override\n        returns (PrizeConfig memory prizeConfig)\n    {\n        require(_drawId > 0, \"PrizeConfHistory/draw-id-gt-zero\");\n        return prizeConfigs[history.binarySearch(_drawId)];\n    }\n\n    /// @inheritdoc IPrizeConfigHistory\n    function getPrizeConfigAtIndex(uint256 _index)\n        external\n        view\n        override\n        returns (PrizeConfig memory prizeConfig)\n    {\n        return prizeConfigs[uint32(_index)];\n    }\n\n    // @inheritdoc IPrizeConfigHistory\n    function getPrizeConfigList(uint32[] calldata _drawIds)\n        external\n        view\n        override\n        returns (PrizeConfig[] memory prizeConfigList)\n    {\n        uint256 _length = _drawIds.length;\n        PrizeConfig[] memory _data = new PrizeConfig[](_length);\n\n        for (uint256 index = 0; index < _length; index++) {\n            _data[index] = prizeConfigs[history.binarySearch(_drawIds[index])];\n        }\n\n        return _data;\n    }\n\n    /// @inheritdoc IPrizeConfigHistory\n    function popAndPush(PrizeConfig calldata _newPrizeConfig)\n        external\n        override\n        onlyOwner\n        returns (uint32)\n    {\n        uint256 length = history.length;\n\n        require(length > 0, \"PrizeConfHistory/history-empty\");\n        require(history[length - 1] == _newPrizeConfig.drawId, \"PrizeConfHistory/invalid-draw-id\");\n\n        _replace(_newPrizeConfig);\n\n        return _newPrizeConfig.drawId;\n    }\n\n    /// @inheritdoc IPrizeConfigHistory\n    function push(PrizeConfig calldata _nextPrizeConfig) external override onlyManagerOrOwner {\n        _push(_nextPrizeConfig);\n    }\n\n    /// @inheritdoc IPrizeConfigHistory\n    function replace(PrizeConfig calldata _newPrizeConfig) external override onlyOwner {\n        _replace(_newPrizeConfig);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * @notice Push PrizeConfigHistory struct onto history array.\n     * @param _prizeConfig New PrizeConfig struct to push onto history array\n     */\n    function _push(PrizeConfig memory _prizeConfig) internal {\n        uint256 _historyLength = history.length;\n\n        if (_historyLength > 0) {\n            uint256 _id = history[uint32(_historyLength - 1)];\n\n            require(_prizeConfig.drawId > uint32(_id), \"PrizeConfHistory/nonsequentialId\");\n        }\n\n        history.push(_prizeConfig.drawId);\n        prizeConfigs[uint32(_historyLength)] = _prizeConfig;\n\n        emit PrizeConfigPushed(_prizeConfig.drawId, _prizeConfig);\n    }\n\n    /**\n     * @notice Replace PrizeConfig struct from history array.\n     * @dev Performs a binary search to find which index in the history array contains the drawId to replace.\n     * @param _prizeConfig New PrizeConfig struct that will replace the previous PrizeConfig at the corresponding index.\n     */\n    function _replace(PrizeConfig calldata _prizeConfig) internal {\n        require(history.length > 0, \"PrizeConfHistory/no-prize-conf\");\n\n        uint32 oldestDrawId = history[0];\n        require(_prizeConfig.drawId >= oldestDrawId, \"PrizeConfHistory/drawId-beyond\");\n\n        uint32 index = history.binarySearch(_prizeConfig.drawId);\n        require(history[index] == _prizeConfig.drawId, \"PrizeConfHistory/drawId-mismatch\");\n\n        prizeConfigs[index] = _prizeConfig;\n        emit PrizeConfigSet(_prizeConfig.drawId, _prizeConfig);\n    }\n}\n"
    },
    "@pooltogether/v4-periphery/contracts/libraries/BinarySearchLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.6;\n\n/**\n * @title  PoolTogether V4 BinarySearchLib\n * @author PoolTogether Inc Team\n * @notice BinarySearchLib uses binary search to find a parent contract struct with the drawId parameter\n * @dev    The implementing contract must provider access to a struct (i.e. PrizeTier) list with is both\n *         sorted and indexed by the drawId field for binary search to work.\n */\nlibrary BinarySearchLib {\n\n    /**\n     * @notice Find ID in array of ordered IDs using Binary Search.\n        * @param _history uin32[] - Array of IDsq\n        * @param _drawId uint32 - Draw ID to search for\n        * @return uint32 - Index of ID in array\n     */\n    function binarySearch(uint32[] storage _history, uint32 _drawId) internal view returns (uint32) {\n        uint32 index;\n        uint32 leftSide = 0;\n        uint32 rightSide = uint32(_history.length - 1);\n\n        uint32 oldestDrawId = _history[0];\n        uint32 newestDrawId = _history[rightSide];\n\n        require(_drawId >= oldestDrawId, \"BinarySearchLib/draw-id-out-of-range\");\n        if (_drawId >= newestDrawId) return rightSide;\n        if (_drawId == oldestDrawId) return leftSide;\n\n        while (true) {\n            uint32 length = rightSide - leftSide;\n            uint32 center = leftSide + (length / 2);\n            uint32 centerID = _history[center];\n\n            if (centerID == _drawId) {\n                index = center;\n                break;\n            }\n\n            if (length <= 1) {\n                if(_history[rightSide] <= _drawId) {\n                    index = rightSide;\n                } else {\n                    index = leftSide;\n                }\n                break;\n            }\n            \n            if (centerID < _drawId) {\n                leftSide = center;\n            } else {\n                rightSide = center - 1;\n            }\n        }\n\n        return index;\n    }\n}\n"
    },
    "contracts/DrawCalculatorV3.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\";\n\nimport \"./interfaces/IDrawBuffer.sol\";\nimport \"./interfaces/IDrawCalculatorV3.sol\";\nimport \"./interfaces/IGaugeController.sol\";\nimport \"./interfaces/IPrizeConfigHistory.sol\";\n\nimport \"./PrizeDistributor.sol\";\nimport \"./PrizeConfigHistory.sol\";\n\n/**\n  * @title  PoolTogether V4 DrawCalculatorV3\n  * @author PoolTogether Inc Team\n  * @notice The DrawCalculator calculates a user's prize by matching a winning random number against\n            their picks. A users picks are generated deterministically based on their address and balance\n            of tickets held. Prize payouts are divided into multiple tiers: grand prize, second place, etc...\n            A user with a higher average weighted balance (during each draw period) will be given a large number of\n            picks to choose from, and thus a higher chance to match the winning numbers.\n*/\ncontract DrawCalculatorV3 is IDrawCalculatorV3, Manageable {\n    /// @dev The uint32[] type is extended with a binarySearch(uint32) function.\n    using BinarySearchLib for uint32[];\n\n    /* ============ Variables ============ */\n\n    /// @notice GaugeController address\n    IGaugeController public gaugeController;\n\n    /// @notice DrawBuffer address\n    IDrawBuffer public immutable drawBuffer;\n\n    /// @notice PrizeConfigHistory address\n    IPrizeConfigHistory public immutable prizeConfigHistory;\n\n    /// @notice The tiers array length\n    uint8 public constant TIERS_LENGTH = 16;\n\n    /* ============ Events ============ */\n\n    /**\n    * @notice Emitted when the contract is initialized\n    * @param gaugeController Address of the GaugeController\n    * @param drawBuffer Address of the DrawBuffer\n    * @param prizeConfigHistory Address of the PrizeConfigHistory\n    */\n    event Deployed(\n        IGaugeController indexed gaugeController,\n        IDrawBuffer indexed drawBuffer,\n        IPrizeConfigHistory indexed prizeConfigHistory\n    );\n\n    /* ============ Constructor ============ */\n\n    /**\n     * @notice DrawCalculator constructor\n     * @param _gaugeController Address of the GaugeController\n     * @param _drawBuffer Address of the DrawBuffer to push draws to\n     * @param _prizeConfigHistory Address of the PrizeConfigHistory\n     * @param _owner Address of the owner\n     */\n    constructor(\n        IGaugeController _gaugeController,\n        IDrawBuffer _drawBuffer,\n        IPrizeConfigHistory _prizeConfigHistory,\n        address _owner\n    ) Ownable(_owner) {\n        require(address(_gaugeController) != address(0), \"DrawCalc/GC-not-zero-address\");\n        require(address(_drawBuffer) != address(0), \"DrawCalc/DB-not-zero-address\");\n        require(address(_prizeConfigHistory) != address(0), \"DrawCalc/PCH-not-zero-address\");\n        require(_owner != address(0), \"DrawCalc/owner-not-zero-address\");\n\n        gaugeController = _gaugeController;\n        drawBuffer = _drawBuffer;\n        prizeConfigHistory = _prizeConfigHistory;\n\n        emit Deployed(_gaugeController, _drawBuffer, _prizeConfigHistory);\n    }\n\n    /* ============ External Functions ============ */\n\n    /// @inheritdoc IDrawCalculatorV3\n    function calculate(\n        ITicket _ticket,\n        address _user,\n        uint32[] calldata _drawIds,\n        bytes calldata _pickIndicesForDraws\n    ) external view override returns (uint256[] memory prizesAwardable, bytes memory prizeCounts) {\n        uint64[][] memory _pickIndices = abi.decode(_pickIndicesForDraws, (uint64 [][]));\n        require(_pickIndices.length == _drawIds.length, \"DrawCalc/invalid-pick-indices\");\n\n        // User address is hashed once.\n        bytes32 _userRandomNumber = keccak256(abi.encodePacked(_user));\n\n        return _calculatePrizesAwardable(\n            _ticket,\n            _user,\n            _userRandomNumber,\n            _drawIds,\n            _pickIndices\n        );\n    }\n\n    /// @inheritdoc IDrawCalculatorV3\n    function calculateUserPicks(\n        ITicket _ticket,\n        address _user,\n        uint32[] calldata _drawIds\n    ) external view override returns (uint64[] memory picks) {\n        IDrawBeacon.Draw[] memory _draws = drawBuffer.getDraws(_drawIds);\n        uint256 _drawsLength = _draws.length;\n        picks = new uint64[](_drawIds.length);\n\n        for (uint32 _drawIndex = 0; _drawIndex < _drawsLength; _drawIndex++) {\n            IDrawBeacon.Draw memory _draw = _draws[_drawIndex];\n            IPrizeConfigHistory.PrizeConfig memory _prizeConfig = prizeConfigHistory.getPrizeConfig(_draw.drawId);\n\n            _requireDrawUnexpired(_draw, _prizeConfig);\n\n            picks[_drawIndex] = _calculateUserPicks(\n                _ticket,\n                _user,\n                _draw.timestamp - _draw.beaconPeriodSeconds,\n                _draw.timestamp - _prizeConfig.endTimestampOffset,\n                _prizeConfig.poolStakeCeiling,\n                _prizeConfig.bitRangeSize,\n                _prizeConfig.matchCardinality\n            );\n        }\n\n        return picks;\n    }\n\n    /// @inheritdoc IDrawCalculatorV3\n    function getDrawBuffer() external override view returns (IDrawBuffer) {\n        return drawBuffer;\n    }\n\n    /// @inheritdoc IDrawCalculatorV3\n    function getGaugeController() external override view returns (IGaugeController) {\n        return gaugeController;\n    }\n\n    /// @inheritdoc IDrawCalculatorV3\n    function getPrizeConfigHistory() external override view returns (IPrizeConfigHistory) {\n        return prizeConfigHistory;\n    }\n\n    /// @inheritdoc IDrawCalculatorV3\n    function getTotalPicks(\n        ITicket _ticket,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _poolStakeCeiling,\n        uint8 _bitRange,\n        uint8 _cardinality\n    ) external override view returns (uint256) {\n        return _getTotalPicks(_ticket, _startTime, _endTime, _poolStakeCeiling, _bitRange, _cardinality);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * @notice Ensure that the draw is not expired.\n     * @param _draw Draw\n     * @param _prizeConfig PrizeConfig\n     */\n    function _requireDrawUnexpired(\n        IDrawBeacon.Draw memory _draw,\n        IPrizeConfigHistory.PrizeConfig memory _prizeConfig\n    ) internal view {\n        require(uint64(block.timestamp) < _draw.timestamp + _prizeConfig.expiryDuration, \"DrawCalc/draw-expired\");\n    }\n\n    /**\n     * @notice Calculates the prizes awardable for each DrawIds passed.\n     * @param _ticket Address of the ticket to calculate awardable prizes for\n     * @param _user Address of the user for which to calculate awardable prizes for\n     * @param _userRandomNumber Random number of the user to consider over draws\n     * @param _drawIds Array of DrawIds for which to calculate awardable prizes for\n     * @param _pickIndicesForDraws Pick indices for each Draw\n     */\n    function _calculatePrizesAwardable(\n        ITicket _ticket,\n        address _user,\n        bytes32 _userRandomNumber,\n        uint32[] memory _drawIds,\n        uint64[][] memory _pickIndicesForDraws\n    ) internal view returns (uint256[] memory prizesAwardable, bytes memory prizeCounts) {\n        // READ list of IDrawBeacon.Draw using the drawIds from drawBuffer\n        IDrawBeacon.Draw[] memory _draws = drawBuffer.getDraws(_drawIds);\n\n        uint256[] memory _prizesAwardable = new uint256[](_drawIds.length);\n        uint256[][] memory _prizeCounts = new uint256[][](_drawIds.length);\n\n        // Calculate prizes awardable for each Draw passed\n        for (uint32 _drawIndex = 0; _drawIndex < _draws.length; _drawIndex++) {\n            IDrawBeacon.Draw memory _draw = _draws[_drawIndex];\n            IPrizeConfigHistory.PrizeConfig memory _prizeConfig = prizeConfigHistory.getPrizeConfig(_draw.drawId);\n\n            _requireDrawUnexpired(_draw, _prizeConfig);\n\n            uint64 _totalUserPicks = _calculateUserPicks(\n                _ticket,\n                _user,\n                _draw.timestamp - _draw.beaconPeriodSeconds,\n                _draw.timestamp - _prizeConfig.endTimestampOffset,\n                _prizeConfig.poolStakeCeiling,\n                _prizeConfig.bitRangeSize,\n                _prizeConfig.matchCardinality\n            );\n\n            (_prizesAwardable[_drawIndex], _prizeCounts[_drawIndex]) = _calculate(\n                _draw.winningRandomNumber,\n                _totalUserPicks,\n                _userRandomNumber,\n                _pickIndicesForDraws[_drawIndex],\n                _prizeConfig\n            );\n        }\n\n        prizeCounts = abi.encode(_prizeCounts);\n        prizesAwardable = _prizesAwardable;\n    }\n\n    /**\n     * @notice Calculates the number of picks a user gets for a Draw, considering the normalized user balance and the PrizeConfig.\n     * @dev Divided by 1e18 since the normalized user balance is stored as a fixed point 18 number.\n     * @param _ticket Address of the ticket to get total picks for\n     * @param _startTimestamp Timestamp at which the prize starts\n     * @param _endTimestamp Timestamp at which the prize ends\n     * @param _poolStakeCeiling Globally configured pool stake ceiling\n     * @param _bitRange Number of bits allocated to each division\n     * @param _cardinality Number of sub-divisions of a random number\n     * @return Number of picks a user gets for a Draw\n     */\n    function _calculateUserPicks(\n        ITicket _ticket,\n        address _user,\n        uint64 _startTimestamp,\n        uint64 _endTimestamp,\n        uint256 _poolStakeCeiling,\n        uint8 _bitRange,\n        uint8 _cardinality\n    ) internal view returns (uint64) {\n        uint256 _numberOfPicks = _getTotalPicks(_ticket, _startTimestamp, _endTimestamp, _poolStakeCeiling, _bitRange, _cardinality);\n        uint256 _normalizedBalance = _getNormalizedBalanceAt(_ticket, _user, _startTimestamp, _endTimestamp);\n        return uint64((_normalizedBalance * _numberOfPicks) / 1 ether);\n    }\n\n    /**\n     * @notice Calculates the normalized balance of a user against the total supply for a draw.\n     * @param _ticket Address of the ticket to get normalized balance for\n     * @param _user The user to consider\n     * @param _startTimestamp Timestamp at which the draw starts\n     * @param _endTimestamp Timestamp at which the draw ends\n     * @return User normalized balance for the draw\n     */\n    function _getNormalizedBalanceAt(\n        ITicket _ticket,\n        address _user,\n        uint64 _startTimestamp,\n        uint64 _endTimestamp\n    ) internal view returns (uint256) {\n        uint64[] memory _timestampsWithStartCutoffTimes = new uint64[](1);\n        uint64[] memory _timestampsWithEndCutoffTimes = new uint64[](1);\n\n        _timestampsWithStartCutoffTimes[0] = _startTimestamp;\n        _timestampsWithEndCutoffTimes[0] = _endTimestamp;\n\n        uint256[] memory _balances = _ticket.getAverageBalancesBetween(\n            _user,\n            _timestampsWithStartCutoffTimes,\n            _timestampsWithEndCutoffTimes\n        );\n\n        uint256[] memory _totalSupplies = _ticket.getAverageTotalSuppliesBetween(\n            _timestampsWithStartCutoffTimes,\n            _timestampsWithEndCutoffTimes\n        );\n\n        uint256 _normalizedBalance;\n\n        if (_totalSupplies[0] > 0) {\n            _normalizedBalance = (_balances[0] * 1 ether) / _totalSupplies[0];\n        }\n\n        return _normalizedBalance;\n    }\n\n    /**\n    * @notice Returns the total number of picks for a prize pool.\n    * @param _ticket Address of the ticket to get total picks for\n    * @param _startTime Timestamp at which the prize starts\n    * @param _endTime Timestamp at which the prize ends\n    * @param _poolStakeCeiling Globally configured pool stake ceiling\n    * @param _bitRange Number of bits allocated to each division\n    * @param _cardinality Number of sub-divisions of a random number\n    * @return Total number of picks for a prize pool\n    */\n    function _getTotalPicks(\n        ITicket _ticket,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _poolStakeCeiling,\n        uint8 _bitRange,\n        uint8 _cardinality\n    ) internal view returns (uint256) {\n        uint256 _totalChances = (2**_bitRange)**_cardinality;\n        uint256 _gaugeScaledAverage = gaugeController.getScaledAverageGaugeBetween(address(_ticket), _startTime, _endTime);\n        return (_gaugeScaledAverage * _totalChances) / _poolStakeCeiling;\n    }\n\n    /**\n     * @notice Calculates the prize amount for a PrizeConfig over given picks\n     * @param _winningRandomNumber  Draw's winningRandomNumber\n     * @param _totalUserPicks       Number of picks the user gets for the Draw\n     * @param _userRandomNumber     User randomNumber for that draw\n     * @param _picks                User picks for that draw\n     * @param _prizeConfig          PrizeConfig for that draw\n     * @return prize (if any), prizeCounts (if any)\n     */\n    function _calculate(\n        uint256 _winningRandomNumber,\n        uint256 _totalUserPicks,\n        bytes32 _userRandomNumber,\n        uint64[] memory _picks,\n        IPrizeConfigHistory.PrizeConfig memory _prizeConfig\n    ) internal pure returns (uint256 prize, uint256[] memory prizeCounts) {\n        // Create bitmasks for the PrizeConfig\n        uint256[] memory masks = _createBitMasks(_prizeConfig.matchCardinality, _prizeConfig.bitRangeSize);\n        uint32 picksLength = uint32(_picks.length);\n        uint256[] memory _prizeCounts = new uint256[](_prizeConfig.tiers.length);\n\n        uint8 maxWinningTierIndex = 0;\n\n        require(\n            picksLength <= _prizeConfig.maxPicksPerUser,\n            \"DrawCalc/exceeds-max-user-picks\"\n        );\n\n        // for each pick, find number of matching numbers and calculate prize configs index\n        for (uint32 index = 0; index < picksLength; index++) {\n            require(_picks[index] < _totalUserPicks, \"DrawCalc/insufficient-user-picks\");\n\n            if (index > 0) {\n                require(_picks[index] > _picks[index - 1], \"DrawCalc/picks-ascending\");\n            }\n\n            // hash the user random number with the pick value\n            uint256 randomNumberThisPick = uint256(\n                keccak256(abi.encode(_userRandomNumber, _picks[index]))\n            );\n\n            uint8 tiersIndex = _calculateTierIndex(\n                randomNumberThisPick,\n                _winningRandomNumber,\n                masks\n            );\n\n            // there is prize for this tier index\n            if (tiersIndex < TIERS_LENGTH) {\n                if (tiersIndex > maxWinningTierIndex) {\n                    maxWinningTierIndex = tiersIndex;\n                }\n                _prizeCounts[tiersIndex]++;\n            }\n        }\n\n        // now calculate prizeFraction given prizeCounts\n        uint256 prizeFraction = 0;\n        uint256[] memory prizeTiersFractions = new uint256[](\n            maxWinningTierIndex + 1\n        );\n\n        for (uint8 i = 0; i <= maxWinningTierIndex; i++) {\n            prizeTiersFractions[i] = _calculatePrizeTierFraction(\n                _prizeConfig.tiers[i],\n                _prizeConfig.bitRangeSize,\n                i\n            );\n        }\n\n        // multiple the fractions by the prizeCounts and add them up\n        for (\n            uint256 prizeCountIndex = 0;\n            prizeCountIndex <= maxWinningTierIndex;\n            prizeCountIndex++\n        ) {\n            if (_prizeCounts[prizeCountIndex] > 0) {\n                prizeFraction +=\n                    prizeTiersFractions[prizeCountIndex] *\n                    _prizeCounts[prizeCountIndex];\n            }\n        }\n\n        // return the absolute amount of prize awardable\n        // div by 1e9 as prize tiers are base 1e9\n        prize = (prizeFraction * _prizeConfig.prize) / 1e9;\n        prizeCounts = _prizeCounts;\n    }\n\n    /**\n     * @notice Calculates the tier index given the random numbers and masks\n     * @param _randomNumberThisPick User random number for this Pick\n     * @param _winningRandomNumber The winning number for this draw\n     * @param _masks The pre-calculated bitmasks for the PrizeConfig\n     * @return The position within the prize tier array (0 = top prize, 1 = runner-up prize, etc)\n     */\n    function _calculateTierIndex(\n        uint256 _randomNumberThisPick,\n        uint256 _winningRandomNumber,\n        uint256[] memory _masks\n    ) internal pure returns (uint8) {\n        uint8 _numberOfMatches;\n        uint8 _masksLength = uint8(_masks.length);\n\n        // main number matching loop\n        for (uint8 matchIndex = 0; matchIndex < _masksLength; matchIndex++) {\n            uint256 _mask = _masks[matchIndex];\n\n            if ((_randomNumberThisPick & _mask) != (_winningRandomNumber & _mask)) {\n                // there are no more sequential matches since this comparison is not a match\n                if (_masksLength == _numberOfMatches) {\n                    return 0;\n                } else {\n                    return _masksLength - _numberOfMatches;\n                }\n            }\n\n            // else there was a match\n            _numberOfMatches++;\n        }\n\n        return _masksLength - _numberOfMatches;\n    }\n\n    /**\n     * @notice Creates an array of bitmasks equal to the PrizeConfig.matchCardinality length\n     * @param _matchCardinality Match cardinality for Draw\n     * @param _bitRangeSize Bit range size for Draw\n     * @return Array of bitmasks\n     */\n    function _createBitMasks(uint8 _matchCardinality, uint8 _bitRangeSize)\n        internal\n        pure\n        returns (uint256[] memory)\n    {\n        uint256[] memory _masks = new uint256[](_matchCardinality);\n        _masks[0] = (2**_bitRangeSize) - 1;\n\n        for (uint8 _maskIndex = 1; _maskIndex < _matchCardinality; _maskIndex++) {\n            // shift mask bits to correct position and insert in result mask array\n            _masks[_maskIndex] = _masks[_maskIndex - 1] << _bitRangeSize;\n        }\n\n        return _masks;\n    }\n\n    /**\n     * @notice Calculates the expected prize fraction per PrizeConfig and prize tiers index\n     * @param _prizeFraction Prize fraction for this PrizeConfig\n     * @param _bitRangeSize Bit range size for Draw\n     * @param _prizeConfigIndex Index of the prize tiers array to calculate\n     * @return returns the fraction of the total prize (fixed point 9 number)\n     */\n    function _calculatePrizeTierFraction(\n        uint256 _prizeFraction,\n        uint8 _bitRangeSize,\n        uint256 _prizeConfigIndex\n    ) internal pure returns (uint256) {\n        // calculate number of prizes for that index\n        uint256 numberOfPrizesForIndex = _numberOfPrizesForIndex(\n            _bitRangeSize,\n            _prizeConfigIndex\n        );\n\n        return _prizeFraction / numberOfPrizesForIndex;\n    }\n\n    /**\n     * @notice Calculates the number of prizes for a given PrizeConfigIndex\n     * @param _bitRangeSize Bit range size for Draw\n     * @param _prizeConfigIndex Index of the PrizeConfig array to calculate\n     * @return returns the fraction of the total prize (base 1e18)\n     */\n    function _numberOfPrizesForIndex(uint8 _bitRangeSize, uint256 _prizeConfigIndex)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (_prizeConfigIndex > 0) {\n            return ( 1 << _bitRangeSize * _prizeConfigIndex ) - ( 1 << _bitRangeSize * (_prizeConfigIndex - 1) );\n        } else {\n            return 1;\n        }\n    }\n}\n"
    },
    "contracts/PrizeDistributor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@pooltogether/owner-manager-contracts/contracts/Ownable.sol\";\n\nimport \"./interfaces/IPrizeDistributor.sol\";\nimport \"./interfaces/IDrawCalculator.sol\";\n\n/**\n    * @title  PoolTogether V4 PrizeDistributor\n    * @author PoolTogether Inc Team\n    * @notice The PrizeDistributor contract holds Tickets (captured interest) and distributes tickets to users with winning draw claims.\n              PrizeDistributor uses an external IDrawCalculator to validate a users draw claim, before awarding payouts. To prevent users \n              from reclaiming prizes, a payout history for each draw claim is mapped to user accounts. Reclaiming a draw can occur\n              if an \"optimal\" prize was not included in previous claim pick indices and the new claims updated payout is greater then\n              the previous prize distributor claim payout.\n*/\ncontract PrizeDistributor is IPrizeDistributor, Ownable {\n    using SafeERC20 for IERC20;\n\n    /* ============ Global Variables ============ */\n\n    /// @notice DrawCalculator address\n    IDrawCalculator internal drawCalculator;\n\n    /// @notice Token address\n    IERC20 internal immutable token;\n\n    /// @notice Maps users => drawId => paid out balance\n    mapping(address => mapping(uint256 => uint256)) internal userDrawPayouts;\n\n    /* ============ Initialize ============ */\n\n    /**\n     * @notice Initialize PrizeDistributor smart contract.\n     * @param _owner          Owner address\n     * @param _token          Token address\n     * @param _drawCalculator DrawCalculator address\n     */\n    constructor(\n        address _owner,\n        IERC20 _token,\n        IDrawCalculator _drawCalculator\n    ) Ownable(_owner) {\n        _setDrawCalculator(_drawCalculator);\n        require(address(_token) != address(0), \"PrizeDistributor/token-not-zero-address\");\n        token = _token;\n        emit TokenSet(_token);\n    }\n\n    /* ============ External Functions ============ */\n\n    /// @inheritdoc IPrizeDistributor\n    function claim(\n        address _user,\n        uint32[] calldata _drawIds,\n        bytes calldata _data\n    ) external override returns (uint256) {\n        \n        uint256 totalPayout;\n        \n        (uint256[] memory drawPayouts, ) = drawCalculator.calculate(_user, _drawIds, _data); // neglect the prizeCounts since we are not interested in them here\n\n        uint256 drawPayoutsLength = drawPayouts.length;\n        for (uint256 payoutIndex = 0; payoutIndex < drawPayoutsLength; payoutIndex++) {\n            uint32 drawId = _drawIds[payoutIndex];\n            uint256 payout = drawPayouts[payoutIndex];\n            uint256 oldPayout = _getDrawPayoutBalanceOf(_user, drawId);\n            uint256 payoutDiff = 0;\n\n            // helpfully short-circuit, in case the user screwed something up.\n            require(payout > oldPayout, \"PrizeDistributor/zero-payout\");\n\n            unchecked {\n                payoutDiff = payout - oldPayout;\n            }\n\n            _setDrawPayoutBalanceOf(_user, drawId, payout);\n\n            totalPayout += payoutDiff;\n\n            emit ClaimedDraw(_user, drawId, payoutDiff);\n        }\n\n        _awardPayout(_user, totalPayout);\n\n        return totalPayout;\n    }\n\n    /// @inheritdoc IPrizeDistributor\n    function withdrawERC20(\n        IERC20 _erc20Token,\n        address _to,\n        uint256 _amount\n    ) external override onlyOwner returns (bool) {\n        require(_to != address(0), \"PrizeDistributor/recipient-not-zero-address\");\n        require(address(_erc20Token) != address(0), \"PrizeDistributor/ERC20-not-zero-address\");\n\n        _erc20Token.safeTransfer(_to, _amount);\n\n        emit ERC20Withdrawn(_erc20Token, _to, _amount);\n\n        return true;\n    }\n\n    /// @inheritdoc IPrizeDistributor\n    function getDrawCalculator() external view override returns (IDrawCalculator) {\n        return drawCalculator;\n    }\n\n    /// @inheritdoc IPrizeDistributor\n    function getDrawPayoutBalanceOf(address _user, uint32 _drawId)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return _getDrawPayoutBalanceOf(_user, _drawId);\n    }\n\n    /// @inheritdoc IPrizeDistributor\n    function getToken() external view override returns (IERC20) {\n        return token;\n    }\n\n    /// @inheritdoc IPrizeDistributor\n    function setDrawCalculator(IDrawCalculator _newCalculator)\n        external\n        override\n        onlyOwner\n        returns (IDrawCalculator)\n    {\n        _setDrawCalculator(_newCalculator);\n        return _newCalculator;\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _getDrawPayoutBalanceOf(address _user, uint32 _drawId)\n        internal\n        view\n        returns (uint256)\n    {\n        return userDrawPayouts[_user][_drawId];\n    }\n\n    function _setDrawPayoutBalanceOf(\n        address _user,\n        uint32 _drawId,\n        uint256 _payout\n    ) internal {\n        userDrawPayouts[_user][_drawId] = _payout;\n    }\n\n    /**\n     * @notice Sets DrawCalculator reference for individual draw id.\n     * @param _newCalculator  DrawCalculator address\n     */\n    function _setDrawCalculator(IDrawCalculator _newCalculator) internal {\n        require(address(_newCalculator) != address(0), \"PrizeDistributor/calc-not-zero\");\n        drawCalculator = _newCalculator;\n\n        emit DrawCalculatorSet(_newCalculator);\n    }\n\n    /**\n     * @notice Transfer claimed draw(s) total payout to user.\n     * @param _to      User address\n     * @param _amount  Transfer amount\n     */\n    function _awardPayout(address _to, uint256 _amount) internal {\n        token.safeTransfer(_to, _amount);\n    }\n\n}\n"
    },
    "contracts/interfaces/IPrizeDistributor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./IDrawBuffer.sol\";\nimport \"./IDrawCalculator.sol\";\n\n/** @title  IPrizeDistributor\n  * @author PoolTogether Inc Team\n  * @notice The PrizeDistributor interface.\n*/\ninterface IPrizeDistributor {\n\n    /**\n     * @notice Emit when user has claimed token from the PrizeDistributor.\n     * @param user   User address receiving draw claim payouts\n     * @param drawId Draw id that was paid out\n     * @param payout Payout for draw\n     */\n    event ClaimedDraw(address indexed user, uint32 indexed drawId, uint256 payout);\n\n    /**\n     * @notice Emit when DrawCalculator is set.\n     * @param calculator DrawCalculator address\n     */\n    event DrawCalculatorSet(IDrawCalculator indexed calculator);\n\n    /**\n     * @notice Emit when Token is set.\n     * @param token Token address\n     */\n    event TokenSet(IERC20 indexed token);\n\n    /**\n     * @notice Emit when ERC20 tokens are withdrawn.\n     * @param token  ERC20 token transferred.\n     * @param to     Address that received funds.\n     * @param amount Amount of tokens transferred.\n     */\n    event ERC20Withdrawn(IERC20 indexed token, address indexed to, uint256 amount);\n\n    /**\n     * @notice Claim prize payout(s) by submitting valid drawId(s) and winning pick indice(s). The user address\n               is used as the \"seed\" phrase to generate random numbers.\n     * @dev    The claim function is public and any wallet may execute claim on behalf of another user.\n               Prizes are always paid out to the designated user account and not the caller (msg.sender).\n               Claiming prizes is not limited to a single transaction. Reclaiming can be executed\n               subsequentially if an \"optimal\" prize was not included in previous claim pick indices. The\n               payout difference for the new claim is calculated during the award process and transfered to user.\n     * @param user    Address of user to claim awards for. Does NOT need to be msg.sender\n     * @param drawIds Draw IDs from global DrawBuffer reference\n     * @param data    The data to pass to the draw calculator\n     * @return Total claim payout. May include calcuations from multiple draws.\n     */\n    function claim(\n        address user,\n        uint32[] calldata drawIds,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n        * @notice Read global DrawCalculator address.\n        * @return IDrawCalculator\n     */\n    function getDrawCalculator() external view returns (IDrawCalculator);\n\n    /**\n        * @notice Get the amount that a user has already been paid out for a draw\n        * @param user   User address\n        * @param drawId Draw ID\n     */\n    function getDrawPayoutBalanceOf(address user, uint32 drawId) external view returns (uint256);\n\n    /**\n        * @notice Read global Ticket address.\n        * @return IERC20\n     */\n    function getToken() external view returns (IERC20);\n\n    /**\n        * @notice Sets DrawCalculator reference contract.\n        * @param newCalculator DrawCalculator address\n        * @return New DrawCalculator address\n     */\n    function setDrawCalculator(IDrawCalculator newCalculator) external returns (IDrawCalculator);\n\n    /**\n        * @notice Transfer ERC20 tokens out of contract to recipient address.\n        * @dev    Only callable by contract owner.\n        * @param token  ERC20 token to transfer.\n        * @param to     Recipient of the tokens.\n        * @param amount Amount of tokens to transfer.\n        * @return true if operation is successful.\n    */\n    function withdrawERC20(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IDrawCalculator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"./ITicket.sol\";\nimport \"./IDrawBuffer.sol\";\nimport \"../PrizeDistributionBuffer.sol\";\nimport \"../PrizeDistributor.sol\";\n\n/**\n * @title  PoolTogether V4 IDrawCalculator\n * @author PoolTogether Inc Team\n * @notice The DrawCalculator interface.\n */\ninterface IDrawCalculator {\n    struct PickPrize {\n        bool won;\n        uint8 tierIndex;\n    }\n\n    ///@notice Emitted when the contract is initialized\n    event Deployed(\n        ITicket indexed ticket,\n        IDrawBuffer indexed drawBuffer,\n        IPrizeDistributionBuffer indexed prizeDistributionBuffer\n    );\n\n    ///@notice Emitted when the prizeDistributor is set/updated\n    event PrizeDistributorSet(PrizeDistributor indexed prizeDistributor);\n\n    /**\n     * @notice Calculates the prize amount for a user for Multiple Draws. Typically called by a PrizeDistributor.\n     * @param user User for which to calculate prize amount.\n     * @param drawIds drawId array for which to calculate prize amounts for.\n     * @param data The ABI encoded pick indices for all Draws. Expected to be winning picks. Pick indices must be less than the totalUserPicks.\n     * @return List of awardable prize amounts ordered by drawId.\n     */\n    function calculate(\n        address user,\n        uint32[] calldata drawIds,\n        bytes calldata data\n    ) external view returns (uint256[] memory, bytes memory);\n\n    /**\n     * @notice Read global DrawBuffer variable.\n     * @return IDrawBuffer\n     */\n    function getDrawBuffer() external view returns (IDrawBuffer);\n\n    /**\n     * @notice Read global prizeDistributionBuffer variable.\n     * @return IPrizeDistributionBuffer\n     */\n    function getPrizeDistributionBuffer() external view returns (IPrizeDistributionBuffer);\n\n    /**\n     * @notice Returns a users balances expressed as a fraction of the total supply over time.\n     * @param user The users address\n     * @param drawIds The drawIds to consider\n     * @return Array of balances\n     */\n    function getNormalizedBalancesForDrawIds(address user, uint32[] calldata drawIds)\n        external\n        view\n        returns (uint256[] memory);\n\n}\n"
    },
    "contracts/PrizeDistributionBuffer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\";\n\nimport \"./libraries/DrawRingBufferLib.sol\";\nimport \"./interfaces/IPrizeDistributionBuffer.sol\";\n\n/**\n  * @title  PoolTogether V4 PrizeDistributionBuffer\n  * @author PoolTogether Inc Team\n  * @notice The PrizeDistributionBuffer contract provides historical lookups of PrizeDistribution struct parameters (linked with a Draw ID) via a\n            circular ring buffer. Historical PrizeDistribution parameters can be accessed on-chain using a drawId to calculate\n            ring buffer storage slot. The PrizeDistribution parameters can be created by manager/owner and existing PrizeDistribution\n            parameters can only be updated the owner. When adding a new PrizeDistribution basic sanity checks will be used to\n            validate the incoming parameters.\n*/\ncontract PrizeDistributionBuffer is IPrizeDistributionBuffer, Manageable {\n    using DrawRingBufferLib for DrawRingBufferLib.Buffer;\n\n    /// @notice The maximum cardinality of the prize distribution ring buffer.\n    /// @dev even with daily draws, 256 will give us over 8 months of history.\n    uint256 internal constant MAX_CARDINALITY = 256;\n\n    /// @notice The ceiling for prize distributions.  1e9 = 100%.\n    /// @dev It's fixed point 9 because 1e9 is the largest \"1\" that fits into 2**32\n    uint256 internal constant TIERS_CEILING = 1e9;\n\n    /// @notice Emitted when the contract is deployed.\n    /// @param cardinality The maximum number of records in the buffer before they begin to expire.\n    event Deployed(uint8 cardinality);\n\n    /// @notice PrizeDistribution ring buffer history.\n    IPrizeDistributionBuffer.PrizeDistribution[MAX_CARDINALITY]\n        internal prizeDistributionRingBuffer;\n\n    /// @notice Ring buffer metadata (nextIndex, lastId, cardinality)\n    DrawRingBufferLib.Buffer internal bufferMetadata;\n\n    /* ============ Constructor ============ */\n\n    /**\n     * @notice Constructor for PrizeDistributionBuffer\n     * @param _owner Address of the PrizeDistributionBuffer owner\n     * @param _cardinality Cardinality of the `bufferMetadata`\n     */\n    constructor(address _owner, uint8 _cardinality) Ownable(_owner) {\n        bufferMetadata.cardinality = _cardinality;\n        emit Deployed(_cardinality);\n    }\n\n    /* ============ External Functions ============ */\n\n    /// @inheritdoc IPrizeDistributionBuffer\n    function getBufferCardinality() external view override returns (uint32) {\n        return bufferMetadata.cardinality;\n    }\n\n    /// @inheritdoc IPrizeDistributionBuffer\n    function getPrizeDistribution(uint32 _drawId)\n        external\n        view\n        override\n        returns (IPrizeDistributionBuffer.PrizeDistribution memory)\n    {\n        return _getPrizeDistribution(bufferMetadata, _drawId);\n    }\n\n    /// @inheritdoc IPrizeDistributionSource\n    function getPrizeDistributions(uint32[] calldata _drawIds)\n        external\n        view\n        override\n        returns (IPrizeDistributionBuffer.PrizeDistribution[] memory)\n    {\n        uint256 drawIdsLength = _drawIds.length;\n        DrawRingBufferLib.Buffer memory buffer = bufferMetadata;\n        IPrizeDistributionBuffer.PrizeDistribution[]\n            memory _prizeDistributions = new IPrizeDistributionBuffer.PrizeDistribution[](\n                drawIdsLength\n            );\n\n        for (uint256 i = 0; i < drawIdsLength; i++) {\n            _prizeDistributions[i] = _getPrizeDistribution(buffer, _drawIds[i]);\n        }\n\n        return _prizeDistributions;\n    }\n\n    /// @inheritdoc IPrizeDistributionBuffer\n    function getPrizeDistributionCount() external view override returns (uint32) {\n        DrawRingBufferLib.Buffer memory buffer = bufferMetadata;\n\n        if (buffer.lastDrawId == 0) {\n            return 0;\n        }\n\n        uint32 bufferNextIndex = buffer.nextIndex;\n\n        // If the buffer is full return the cardinality, else retun the nextIndex\n        if (prizeDistributionRingBuffer[bufferNextIndex].matchCardinality != 0) {\n            return buffer.cardinality;\n        } else {\n            return bufferNextIndex;\n        }\n    }\n\n    /// @inheritdoc IPrizeDistributionBuffer\n    function getNewestPrizeDistribution()\n        external\n        view\n        override\n        returns (IPrizeDistributionBuffer.PrizeDistribution memory prizeDistribution, uint32 drawId)\n    {\n        DrawRingBufferLib.Buffer memory buffer = bufferMetadata;\n\n        return (prizeDistributionRingBuffer[buffer.getIndex(buffer.lastDrawId)], buffer.lastDrawId);\n    }\n\n    /// @inheritdoc IPrizeDistributionBuffer\n    function getOldestPrizeDistribution()\n        external\n        view\n        override\n        returns (IPrizeDistributionBuffer.PrizeDistribution memory prizeDistribution, uint32 drawId)\n    {\n        DrawRingBufferLib.Buffer memory buffer = bufferMetadata;\n\n        // if the ring buffer is full, the oldest is at the nextIndex\n        prizeDistribution = prizeDistributionRingBuffer[buffer.nextIndex];\n\n        // The PrizeDistribution at index 0 IS by default the oldest prizeDistribution.\n        if (buffer.lastDrawId == 0) {\n            drawId = 0; // return 0 to indicate no prizeDistribution ring buffer history\n        } else if (prizeDistribution.bitRangeSize == 0) {\n            // IF the next PrizeDistribution.bitRangeSize == 0 the ring buffer HAS NOT looped around so the oldest is the first entry.\n            prizeDistribution = prizeDistributionRingBuffer[0];\n            drawId = (buffer.lastDrawId + 1) - buffer.nextIndex;\n        } else {\n            // Calculates the drawId using the ring buffer cardinality\n            // Sequential drawIds are gauranteed by DrawRingBufferLib.push()\n            drawId = (buffer.lastDrawId + 1) - buffer.cardinality;\n        }\n    }\n\n    /// @inheritdoc IPrizeDistributionBuffer\n    function pushPrizeDistribution(\n        uint32 _drawId,\n        IPrizeDistributionBuffer.PrizeDistribution calldata _prizeDistribution\n    ) external override onlyManagerOrOwner returns (bool) {\n        return _pushPrizeDistribution(_drawId, _prizeDistribution);\n    }\n\n    /// @inheritdoc IPrizeDistributionBuffer\n    function setPrizeDistribution(\n        uint32 _drawId,\n        IPrizeDistributionBuffer.PrizeDistribution calldata _prizeDistribution\n    ) external override onlyOwner returns (uint32) {\n        DrawRingBufferLib.Buffer memory buffer = bufferMetadata;\n        uint32 index = buffer.getIndex(_drawId);\n        prizeDistributionRingBuffer[index] = _prizeDistribution;\n\n        emit PrizeDistributionSet(_drawId, _prizeDistribution);\n\n        return _drawId;\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * @notice Gets the PrizeDistributionBuffer for a drawId\n     * @param _buffer DrawRingBufferLib.Buffer\n     * @param _drawId drawId\n     */\n    function _getPrizeDistribution(DrawRingBufferLib.Buffer memory _buffer, uint32 _drawId)\n        internal\n        view\n        returns (IPrizeDistributionBuffer.PrizeDistribution memory)\n    {\n        return prizeDistributionRingBuffer[_buffer.getIndex(_drawId)];\n    }\n\n    /**\n     * @notice Set newest PrizeDistributionBuffer in ring buffer storage.\n     * @param _drawId       drawId\n     * @param _prizeDistribution PrizeDistributionBuffer struct\n     */\n    function _pushPrizeDistribution(\n        uint32 _drawId,\n        IPrizeDistributionBuffer.PrizeDistribution calldata _prizeDistribution\n    ) internal returns (bool) {\n        require(_drawId > 0, \"DrawCalc/draw-id-gt-0\");\n        require(_prizeDistribution.matchCardinality > 0, \"DrawCalc/matchCardinality-gt-0\");\n        require(\n            _prizeDistribution.bitRangeSize <= 256 / _prizeDistribution.matchCardinality,\n            \"DrawCalc/bitRangeSize-too-large\"\n        );\n\n        require(_prizeDistribution.bitRangeSize > 0, \"DrawCalc/bitRangeSize-gt-0\");\n        require(_prizeDistribution.maxPicksPerUser > 0, \"DrawCalc/maxPicksPerUser-gt-0\");\n        require(_prizeDistribution.expiryDuration > 0, \"DrawCalc/expiryDuration-gt-0\");\n\n        // ensure that the sum of the tiers are not gt 100%\n        uint256 sumTotalTiers = 0;\n        uint256 tiersLength = _prizeDistribution.tiers.length;\n\n        for (uint256 index = 0; index < tiersLength; index++) {\n            uint256 tier = _prizeDistribution.tiers[index];\n            sumTotalTiers += tier;\n        }\n\n        // Each tier amount stored as uint32 - summed can't exceed 1e9\n        require(sumTotalTiers <= TIERS_CEILING, \"DrawCalc/tiers-gt-100%\");\n\n        DrawRingBufferLib.Buffer memory buffer = bufferMetadata;\n\n        // store the PrizeDistribution in the ring buffer\n        prizeDistributionRingBuffer[buffer.nextIndex] = _prizeDistribution;\n\n        // update the ring buffer data\n        bufferMetadata = buffer.push(_drawId);\n\n        emit PrizeDistributionSet(_drawId, _prizeDistribution);\n\n        return true;\n    }\n}\n"
    },
    "contracts/libraries/DrawRingBufferLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"./RingBufferLib.sol\";\n\n/// @title Library for creating and managing a draw ring buffer.\nlibrary DrawRingBufferLib {\n    /// @notice Draw buffer struct.\n    struct Buffer {\n        uint32 lastDrawId;\n        uint32 nextIndex;\n        uint32 cardinality;\n    }\n\n    /// @notice Helper function to know if the draw ring buffer has been initialized.\n    /// @dev since draws start at 1 and are monotonically increased, we know we are uninitialized if nextIndex = 0 and lastDrawId = 0.\n    /// @param _buffer The buffer to check.\n    function isInitialized(Buffer memory _buffer) internal pure returns (bool) {\n        return !(_buffer.nextIndex == 0 && _buffer.lastDrawId == 0);\n    }\n\n    /// @notice Push a draw to the buffer.\n    /// @param _buffer The buffer to push to.\n    /// @param _drawId The drawID to push.\n    /// @return The new buffer.\n    function push(Buffer memory _buffer, uint32 _drawId) internal pure returns (Buffer memory) {\n        require(!isInitialized(_buffer) || _drawId == _buffer.lastDrawId + 1, \"DRB/must-be-contig\");\n\n        return\n            Buffer({\n                lastDrawId: _drawId,\n                nextIndex: uint32(RingBufferLib.nextIndex(_buffer.nextIndex, _buffer.cardinality)),\n                cardinality: _buffer.cardinality\n            });\n    }\n\n    /// @notice Get draw ring buffer index pointer.\n    /// @param _buffer The buffer to get the `nextIndex` from.\n    /// @param _drawId The draw id to get the index for.\n    /// @return The draw ring buffer index pointer.\n    function getIndex(Buffer memory _buffer, uint32 _drawId) internal pure returns (uint32) {\n        require(isInitialized(_buffer) && _drawId <= _buffer.lastDrawId, \"DRB/future-draw\");\n\n        uint32 indexOffset = _buffer.lastDrawId - _drawId;\n        require(indexOffset < _buffer.cardinality, \"DRB/expired-draw\");\n\n        uint256 mostRecent = RingBufferLib.newestIndex(_buffer.nextIndex, _buffer.cardinality);\n\n        return uint32(RingBufferLib.offset(uint32(mostRecent), indexOffset, _buffer.cardinality));\n    }\n}\n"
    },
    "contracts/interfaces/IPrizeDistributionBuffer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"./IPrizeDistributionSource.sol\";\n\n/** @title  IPrizeDistributionBuffer\n * @author PoolTogether Inc Team\n * @notice The PrizeDistributionBuffer interface.\n */\ninterface IPrizeDistributionBuffer is IPrizeDistributionSource {\n    /**\n     * @notice Emit when PrizeDistribution is set.\n     * @param drawId       Draw id\n     * @param prizeDistribution IPrizeDistributionBuffer.PrizeDistribution\n     */\n    event PrizeDistributionSet(\n        uint32 indexed drawId,\n        IPrizeDistributionBuffer.PrizeDistribution prizeDistribution\n    );\n\n    /**\n     * @notice Read a ring buffer cardinality\n     * @return Ring buffer cardinality\n     */\n    function getBufferCardinality() external view returns (uint32);\n\n    /**\n     * @notice Read newest PrizeDistribution from prize distributions ring buffer.\n     * @dev    Uses nextDrawIndex to calculate the most recently added PrizeDistribution.\n     * @return prizeDistribution\n     * @return drawId\n     */\n    function getNewestPrizeDistribution()\n        external\n        view\n        returns (\n            IPrizeDistributionBuffer.PrizeDistribution memory prizeDistribution,\n            uint32 drawId\n        );\n\n    /**\n     * @notice Read oldest PrizeDistribution from prize distributions ring buffer.\n     * @dev    Finds the oldest Draw by buffer.nextIndex and buffer.lastDrawId\n     * @return prizeDistribution\n     * @return drawId\n     */\n    function getOldestPrizeDistribution()\n        external\n        view\n        returns (\n            IPrizeDistributionBuffer.PrizeDistribution memory prizeDistribution,\n            uint32 drawId\n        );\n\n    /**\n     * @notice Gets the PrizeDistributionBuffer for a drawId\n     * @param drawId drawId\n     * @return prizeDistribution\n     */\n    function getPrizeDistribution(uint32 drawId)\n        external\n        view\n        returns (IPrizeDistributionBuffer.PrizeDistribution memory);\n\n    /**\n     * @notice Gets the number of PrizeDistributions stored in the prize distributions ring buffer.\n     * @dev If no Draws have been pushed, it will return 0.\n     * @dev If the ring buffer is full, it will return the cardinality.\n     * @dev Otherwise, it will return the NewestPrizeDistribution index + 1.\n     * @return Number of PrizeDistributions stored in the prize distributions ring buffer.\n     */\n    function getPrizeDistributionCount() external view returns (uint32);\n\n    /**\n     * @notice Adds new PrizeDistribution record to ring buffer storage.\n     * @dev    Only callable by the owner or manager\n     * @param drawId            Draw ID linked to PrizeDistribution parameters\n     * @param prizeDistribution PrizeDistribution parameters struct\n     */\n    function pushPrizeDistribution(\n        uint32 drawId,\n        IPrizeDistributionBuffer.PrizeDistribution calldata prizeDistribution\n    ) external returns (bool);\n\n    /**\n     * @notice Sets existing PrizeDistribution with new PrizeDistribution parameters in ring buffer storage.\n     * @dev    Retroactively updates an existing PrizeDistribution and should be thought of as a \"safety\"\n               fallback. If the manager is setting invalid PrizeDistribution parameters the Owner can update\n               the invalid parameters with correct parameters.\n     * @return drawId\n     */\n    function setPrizeDistribution(\n        uint32 drawId,\n        IPrizeDistributionBuffer.PrizeDistribution calldata draw\n    ) external returns (uint32);\n}\n"
    },
    "contracts/interfaces/IPrizeDistributionSource.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\n/** @title IPrizeDistributionSource\n * @author PoolTogether Inc Team\n * @notice The PrizeDistributionSource interface.\n */\ninterface IPrizeDistributionSource {\n    ///@notice PrizeDistribution struct created every draw\n    ///@param bitRangeSize Decimal representation of bitRangeSize\n    ///@param matchCardinality The number of numbers to consider in the 256 bit random number. Must be > 1 and < 256/bitRangeSize.\n    ///@param startTimestampOffset The starting time offset in seconds from which Ticket balances are calculated.\n    ///@param endTimestampOffset The end time offset in seconds from which Ticket balances are calculated.\n    ///@param maxPicksPerUser Maximum number of picks a user can make in this draw\n    ///@param expiryDuration Length of time in seconds the PrizeDistribution is valid for. Relative to the Draw.timestamp.\n    ///@param numberOfPicks Number of picks this draw has (may vary across networks according to how much the network has contributed to the Reserve)\n    ///@param tiers Array of prize tiers percentages, expressed in fraction form with base 1e9. Ordering: index0: grandPrize, index1: runnerUp, etc.\n    ///@param prize Total prize amount available in this draw calculator for this draw (may vary from across networks)\n    struct PrizeDistribution {\n        uint8 bitRangeSize;\n        uint8 matchCardinality;\n        uint32 startTimestampOffset;\n        uint32 endTimestampOffset;\n        uint32 maxPicksPerUser;\n        uint32 expiryDuration;\n        uint104 numberOfPicks;\n        uint32[16] tiers;\n        uint256 prize;\n    }\n\n    /**\n     * @notice Gets PrizeDistribution list from array of drawIds\n     * @param drawIds drawIds to get PrizeDistribution for\n     * @return prizeDistributionList\n     */\n    function getPrizeDistributions(uint32[] calldata drawIds)\n        external\n        view\n        returns (PrizeDistribution[] memory);\n}\n"
    },
    "contracts/test/DrawCalculatorV3Harness.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"../DrawCalculatorV3.sol\";\n\ncontract DrawCalculatorV3Harness is DrawCalculatorV3 {\n    constructor(\n        IGaugeController _gaugeController,\n        IDrawBuffer _drawBuffer,\n        IPrizeConfigHistory _prizeConfigHistory,\n        address _owner\n    ) DrawCalculatorV3(_gaugeController, _drawBuffer, _prizeConfigHistory, _owner) {}\n\n    function calculateTierIndex(\n        uint256 _randomNumberThisPick,\n        uint256 _winningRandomNumber,\n        uint256[] memory _masks\n    ) public pure returns (uint256) {\n        return _calculateTierIndex(_randomNumberThisPick, _winningRandomNumber, _masks);\n    }\n\n    function createBitMasks(uint8 _matchCardinality, uint8 _bitRangeSize)\n        public\n        pure\n        returns (uint256[] memory)\n    {\n        return _createBitMasks(_matchCardinality, _bitRangeSize);\n    }\n\n    function calculatePrizeTierFraction(\n        uint256 _prizeFraction,\n        uint8 _bitRangeSize,\n        uint256 _prizeConfigIndex\n    ) external pure returns (uint256) {\n        return _calculatePrizeTierFraction(_prizeFraction, _bitRangeSize, _prizeConfigIndex);\n    }\n\n    function numberOfPrizesForIndex(uint8 _bitRangeSize, uint256 _prizeConfigIndex)\n        external\n        pure\n        returns (uint256)\n    {\n        return _numberOfPrizesForIndex(_bitRangeSize, _prizeConfigIndex);\n    }\n}\n"
    },
    "contracts/DrawCalculatorV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"./interfaces/ITicket.sol\";\nimport \"./interfaces/IDrawBuffer.sol\";\nimport \"./interfaces/IPrizeDistributionSource.sol\";\nimport \"./interfaces/IDrawBeacon.sol\";\n\nimport \"./PrizeDistributor.sol\";\n\n/**\n  * @title  PoolTogether V4 DrawCalculatorV2\n  * @author PoolTogether Inc Team\n  * @notice The DrawCalculator calculates a user's prize by matching a winning random number against\n            their picks. A users picks are generated deterministically based on their address and balance\n            of tickets held. Prize payouts are divided into multiple tiers: grand prize, second place, etc...\n            A user with a higher average weighted balance (during each draw period) will be given a large number of\n            picks to choose from, and thus a higher chance to match the winning numbers.\n*/\ncontract DrawCalculatorV2 {\n    /* ============ Variables ============ */\n\n    /// @notice DrawBuffer address\n    IDrawBuffer public immutable drawBuffer;\n\n    /// @notice Ticket associated with DrawCalculator\n    ITicket public immutable ticket;\n\n    /// @notice The source in which the history of draw settings are stored as ring buffer.\n    IPrizeDistributionSource public immutable prizeDistributionSource;\n\n    /// @notice The tiers array length\n    uint8 public constant TIERS_LENGTH = 16;\n\n    /* ============ Events ============ */\n\n    ///@notice Emitted when the contract is initialized\n    event Deployed(\n        ITicket indexed ticket,\n        IDrawBuffer indexed drawBuffer,\n        IPrizeDistributionSource indexed prizeDistributionSource\n    );\n\n    ///@notice Emitted when the prizeDistributor is set/updated\n    event PrizeDistributorSet(PrizeDistributor indexed prizeDistributor);\n\n    /* ============ Constructor ============ */\n\n    /**\n     * @notice Constructor for DrawCalculator\n     * @param _ticket Ticket associated with this DrawCalculator\n     * @param _drawBuffer The address of the draw buffer to push draws to\n     * @param _prizeDistributionSource PrizeDistributionSource address\n    */\n    constructor(\n        ITicket _ticket,\n        IDrawBuffer _drawBuffer,\n        IPrizeDistributionSource _prizeDistributionSource\n    ) {\n        require(address(_ticket) != address(0), \"DrawCalc/ticket-not-zero\");\n        require(address(_prizeDistributionSource) != address(0), \"DrawCalc/pdb-not-zero\");\n        require(address(_drawBuffer) != address(0), \"DrawCalc/dh-not-zero\");\n\n        ticket = _ticket;\n        drawBuffer = _drawBuffer;\n        prizeDistributionSource = _prizeDistributionSource;\n\n        emit Deployed(_ticket, _drawBuffer, _prizeDistributionSource);\n    }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * @notice Calculates the prize amount for a user for Multiple Draws. Typically called by a PrizeDistributor.\n     * @param _user User for which to calculate prize amount.\n     * @param _drawIds drawId array for which to calculate prize amounts for.\n     * @param _pickIndicesForDraws The ABI encoded pick indices for all Draws. Expected to be winning picks. Pick indices must be less than the totalUserPicks.\n     * @return List of awardable prize amounts ordered by drawId.\n    */\n    function calculate(\n        address _user,\n        uint32[] calldata _drawIds,\n        bytes calldata _pickIndicesForDraws\n    ) external view returns (uint256[] memory, bytes memory) {\n        uint64[][] memory pickIndices = abi.decode(_pickIndicesForDraws, (uint64 [][]));\n        require(pickIndices.length == _drawIds.length, \"DrawCalc/invalid-pick-indices-length\");\n\n        // READ list of IDrawBeacon.Draw using the drawIds from drawBuffer\n        IDrawBeacon.Draw[] memory draws = drawBuffer.getDraws(_drawIds);\n\n        // READ list of IPrizeDistributionSource.PrizeDistribution using the drawIds\n        IPrizeDistributionSource.PrizeDistribution[] memory _prizeDistributions = prizeDistributionSource\n            .getPrizeDistributions(_drawIds);\n\n        // The userBalances are fractions representing their portion of the liquidity for a draw.\n        uint256[] memory userBalances = _getNormalizedBalancesAt(_user, draws, _prizeDistributions);\n\n        // The users address is hashed once.\n        bytes32 _userRandomNumber = keccak256(abi.encodePacked(_user));\n\n        return _calculatePrizesAwardable(\n                userBalances,\n                _userRandomNumber,\n                draws,\n                pickIndices,\n                _prizeDistributions\n            );\n    }\n\n    /**\n     * @notice Read global DrawBuffer variable.\n     * @return IDrawBuffer\n    */\n    function getDrawBuffer() external view returns (IDrawBuffer) {\n        return drawBuffer;\n    }\n\n    /**\n     * @notice Read global prizeDistributionSource variable.\n     * @return IPrizeDistributionSource\n    */\n    function getPrizeDistributionSource()\n        external\n        view\n        returns (IPrizeDistributionSource)\n    {\n        return prizeDistributionSource;\n    }\n\n    /**\n     * @notice Returns a users balances expressed as a fraction of the total supply over time.\n     * @param _user The users address\n     * @param _drawIds The drawIds to consider\n     * @return Array of balances\n    */\n    function getNormalizedBalancesForDrawIds(address _user, uint32[] calldata _drawIds)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        IDrawBeacon.Draw[] memory _draws = drawBuffer.getDraws(_drawIds);\n        IPrizeDistributionSource.PrizeDistribution[] memory _prizeDistributions = prizeDistributionSource\n            .getPrizeDistributions(_drawIds);\n\n        return _getNormalizedBalancesAt(_user, _draws, _prizeDistributions);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * @notice Calculates the prizes awardable for each Draw passed.\n     * @param _normalizedUserBalances Fractions representing the user's portion of the liquidity for each draw.\n     * @param _userRandomNumber       Random number of the user to consider over draws\n     * @param _draws                  List of Draws\n     * @param _pickIndicesForDraws    Pick indices for each Draw\n     * @param _prizeDistributions     PrizeDistribution for each Draw\n\n     */\n    function _calculatePrizesAwardable(\n        uint256[] memory _normalizedUserBalances,\n        bytes32 _userRandomNumber,\n        IDrawBeacon.Draw[] memory _draws,\n        uint64[][] memory _pickIndicesForDraws,\n        IPrizeDistributionSource.PrizeDistribution[] memory _prizeDistributions\n    ) internal view returns (uint256[] memory prizesAwardable, bytes memory prizeCounts) {\n\n        uint256[] memory _prizesAwardable = new uint256[](_normalizedUserBalances.length);\n        uint256[][] memory _prizeCounts = new uint256[][](_normalizedUserBalances.length);\n\n        uint64 timeNow = uint64(block.timestamp);\n\n        // calculate prizes awardable for each Draw passed\n        for (uint32 drawIndex = 0; drawIndex < _draws.length; drawIndex++) {\n            require(timeNow < _draws[drawIndex].timestamp + _prizeDistributions[drawIndex].expiryDuration, \"DrawCalc/draw-expired\");\n\n            uint64 totalUserPicks = _calculateNumberOfUserPicks(\n                _prizeDistributions[drawIndex],\n                _normalizedUserBalances[drawIndex]\n            );\n\n            (_prizesAwardable[drawIndex], _prizeCounts[drawIndex]) = _calculate(\n                _draws[drawIndex].winningRandomNumber,\n                totalUserPicks,\n                _userRandomNumber,\n                _pickIndicesForDraws[drawIndex],\n                _prizeDistributions[drawIndex]\n            );\n        }\n\n        prizeCounts = abi.encode(_prizeCounts);\n        prizesAwardable = _prizesAwardable;\n    }\n\n    /**\n     * @notice Calculates the number of picks a user gets for a Draw, considering the normalized user balance and the PrizeDistribution.\n     * @dev Divided by 1e18 since the normalized user balance is stored as a fixed point 18 number\n     * @param _prizeDistribution The PrizeDistribution to consider\n     * @param _normalizedUserBalance The normalized user balances to consider\n     * @return The number of picks a user gets for a Draw\n     */\n    function _calculateNumberOfUserPicks(\n        IPrizeDistributionSource.PrizeDistribution memory _prizeDistribution,\n        uint256 _normalizedUserBalance\n    ) internal pure returns (uint64) {\n        return uint64((_normalizedUserBalance * _prizeDistribution.numberOfPicks) / 1 ether);\n    }\n\n    /**\n     * @notice Calculates the normalized balance of a user against the total supply for timestamps\n     * @param _user The user to consider\n     * @param _draws The draws we are looking at\n     * @param _prizeDistributions The prize tiers to consider (needed for draw timestamp offsets)\n     * @return An array of normalized balances\n     */\n    function _getNormalizedBalancesAt(\n        address _user,\n        IDrawBeacon.Draw[] memory _draws,\n        IPrizeDistributionSource.PrizeDistribution[] memory _prizeDistributions\n    ) internal view returns (uint256[] memory) {\n        uint256 drawsLength = _draws.length;\n        uint64[] memory _timestampsWithStartCutoffTimes = new uint64[](drawsLength);\n        uint64[] memory _timestampsWithEndCutoffTimes = new uint64[](drawsLength);\n\n        // generate timestamps with draw cutoff offsets included\n        for (uint32 i = 0; i < drawsLength; i++) {\n            unchecked {\n                _timestampsWithStartCutoffTimes[i] =\n                    _draws[i].timestamp - _prizeDistributions[i].startTimestampOffset;\n                _timestampsWithEndCutoffTimes[i] =\n                    _draws[i].timestamp - _prizeDistributions[i].endTimestampOffset;\n            }\n        }\n\n        uint256[] memory balances = ticket.getAverageBalancesBetween(\n            _user,\n            _timestampsWithStartCutoffTimes,\n            _timestampsWithEndCutoffTimes\n        );\n\n        uint256[] memory totalSupplies = ticket.getAverageTotalSuppliesBetween(\n            _timestampsWithStartCutoffTimes,\n            _timestampsWithEndCutoffTimes\n        );\n\n        uint256[] memory normalizedBalances = new uint256[](drawsLength);\n\n        // divide balances by total supplies (normalize)\n        for (uint256 i = 0; i < drawsLength; i++) {\n            if(totalSupplies[i] == 0){\n                normalizedBalances[i] = 0;\n            }\n            else {\n                normalizedBalances[i] = (balances[i] * 1 ether) / totalSupplies[i];\n            }\n        }\n\n        return normalizedBalances;\n    }\n\n    /**\n     * @notice Calculates the prize amount for a PrizeDistribution over given picks\n     * @param _winningRandomNumber Draw's winningRandomNumber\n     * @param _totalUserPicks      number of picks the user gets for the Draw\n     * @param _userRandomNumber    users randomNumber for that draw\n     * @param _picks               users picks for that draw\n     * @param _prizeDistribution   PrizeDistribution for that draw\n     * @return prize (if any), prizeCounts (if any)\n     */\n    function _calculate(\n        uint256 _winningRandomNumber,\n        uint256 _totalUserPicks,\n        bytes32 _userRandomNumber,\n        uint64[] memory _picks,\n        IPrizeDistributionSource.PrizeDistribution memory _prizeDistribution\n    ) internal pure returns (uint256 prize, uint256[] memory prizeCounts) {\n\n        // create bitmasks for the PrizeDistribution\n        uint256[] memory masks = _createBitMasks(_prizeDistribution);\n        uint32 picksLength = uint32(_picks.length);\n        uint256[] memory _prizeCounts = new uint256[](_prizeDistribution.tiers.length);\n\n        uint8 maxWinningTierIndex = 0;\n\n        require(\n            picksLength <= _prizeDistribution.maxPicksPerUser,\n            \"DrawCalc/exceeds-max-user-picks\"\n        );\n\n        // for each pick, find number of matching numbers and calculate prize distributions index\n        for (uint32 index = 0; index < picksLength; index++) {\n            require(_picks[index] < _totalUserPicks, \"DrawCalc/insufficient-user-picks\");\n\n            if (index > 0) {\n                require(_picks[index] > _picks[index - 1], \"DrawCalc/picks-ascending\");\n            }\n\n            // hash the user random number with the pick value\n            uint256 randomNumberThisPick = uint256(\n                keccak256(abi.encode(_userRandomNumber, _picks[index]))\n            );\n\n            uint8 tiersIndex = _calculateTierIndex(\n                randomNumberThisPick,\n                _winningRandomNumber,\n                masks\n            );\n\n            // there is prize for this tier index\n            if (tiersIndex < TIERS_LENGTH) {\n                if (tiersIndex > maxWinningTierIndex) {\n                    maxWinningTierIndex = tiersIndex;\n                }\n                _prizeCounts[tiersIndex]++;\n            }\n        }\n\n        // now calculate prizeFraction given prizeCounts\n        uint256 prizeFraction = 0;\n        uint256[] memory prizeTiersFractions = _calculatePrizeTierFractions(\n            _prizeDistribution,\n            maxWinningTierIndex\n        );\n\n        // multiple the fractions by the prizeCounts and add them up\n        for (\n            uint256 prizeCountIndex = 0;\n            prizeCountIndex <= maxWinningTierIndex;\n            prizeCountIndex++\n        ) {\n            if (_prizeCounts[prizeCountIndex] > 0) {\n                prizeFraction +=\n                    prizeTiersFractions[prizeCountIndex] *\n                    _prizeCounts[prizeCountIndex];\n            }\n        }\n\n        // return the absolute amount of prize awardable\n        // div by 1e9 as prize tiers are base 1e9\n        prize = (prizeFraction * _prizeDistribution.prize) / 1e9;\n        prizeCounts = _prizeCounts;\n    }\n\n    ///@notice Calculates the tier index given the random numbers and masks\n    ///@param _randomNumberThisPick users random number for this Pick\n    ///@param _winningRandomNumber The winning number for this draw\n    ///@param _masks The pre-calculate bitmasks for the prizeDistributions\n    ///@return The position within the prize tier array (0 = top prize, 1 = runner-up prize, etc)\n    function _calculateTierIndex(\n        uint256 _randomNumberThisPick,\n        uint256 _winningRandomNumber,\n        uint256[] memory _masks\n    ) internal pure returns (uint8) {\n        uint8 numberOfMatches = 0;\n        uint8 masksLength = uint8(_masks.length);\n\n        // main number matching loop\n        for (uint8 matchIndex = 0; matchIndex < masksLength; matchIndex++) {\n            uint256 mask = _masks[matchIndex];\n\n            if ((_randomNumberThisPick & mask) != (_winningRandomNumber & mask)) {\n                // there are no more sequential matches since this comparison is not a match\n                if (masksLength == numberOfMatches) {\n                    return 0;\n                } else {\n                    return masksLength - numberOfMatches;\n                }\n            }\n\n            // else there was a match\n            numberOfMatches++;\n        }\n\n        return masksLength - numberOfMatches;\n    }\n\n    /**\n     * @notice Create an array of bitmasks equal to the PrizeDistribution.matchCardinality length\n     * @param _prizeDistribution The PrizeDistribution to use to calculate the masks\n     * @return An array of bitmasks\n     */\n    function _createBitMasks(IPrizeDistributionSource.PrizeDistribution memory _prizeDistribution)\n        internal\n        pure\n        returns (uint256[] memory)\n    {\n        uint256[] memory masks = new uint256[](_prizeDistribution.matchCardinality);\n        masks[0] =  (2**_prizeDistribution.bitRangeSize) - 1;\n\n        for (uint8 maskIndex = 1; maskIndex < _prizeDistribution.matchCardinality; maskIndex++) {\n            // shift mask bits to correct position and insert in result mask array\n            masks[maskIndex] = masks[maskIndex - 1] << _prizeDistribution.bitRangeSize;\n        }\n\n        return masks;\n    }\n\n    /**\n     * @notice Calculates the expected prize fraction per PrizeDistributions and distributionIndex\n     * @param _prizeDistribution prizeDistribution struct for Draw\n     * @param _prizeTierIndex Index of the prize tiers array to calculate\n     * @return returns the fraction of the total prize (fixed point 9 number)\n     */\n    function _calculatePrizeTierFraction(\n        IPrizeDistributionSource.PrizeDistribution memory _prizeDistribution,\n        uint256 _prizeTierIndex\n    ) internal pure returns (uint256) {\n         // get the prize fraction at that index\n        uint256 prizeFraction = _prizeDistribution.tiers[_prizeTierIndex];\n\n        // calculate number of prizes for that index\n        uint256 numberOfPrizesForIndex = _numberOfPrizesForIndex(\n            _prizeDistribution.bitRangeSize,\n            _prizeTierIndex\n        );\n\n        return prizeFraction / numberOfPrizesForIndex;\n    }\n\n    /**\n     * @notice Generates an array of prize tiers fractions\n     * @param _prizeDistribution prizeDistribution struct for Draw\n     * @param maxWinningTierIndex Max length of the prize tiers array\n     * @return returns an array of prize tiers fractions\n     */\n    function _calculatePrizeTierFractions(\n        IPrizeDistributionSource.PrizeDistribution memory _prizeDistribution,\n        uint8 maxWinningTierIndex\n    ) internal pure returns (uint256[] memory) {\n        uint256[] memory prizeDistributionFractions = new uint256[](\n            maxWinningTierIndex + 1\n        );\n\n        for (uint8 i = 0; i <= maxWinningTierIndex; i++) {\n            prizeDistributionFractions[i] = _calculatePrizeTierFraction(\n                _prizeDistribution,\n                i\n            );\n        }\n\n        return prizeDistributionFractions;\n    }\n\n    /**\n     * @notice Calculates the number of prizes for a given prizeDistributionIndex\n     * @param _bitRangeSize Bit range size for Draw\n     * @param _prizeTierIndex Index of the prize tier array to calculate\n     * @return returns the fraction of the total prize (base 1e18)\n     */\n    function _numberOfPrizesForIndex(uint8 _bitRangeSize, uint256 _prizeTierIndex)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (_prizeTierIndex > 0) {\n            return ( 1 << _bitRangeSize * _prizeTierIndex ) - ( 1 << _bitRangeSize * (_prizeTierIndex - 1) );\n        } else {\n            return 1;\n        }\n    }\n}\n"
    },
    "contracts/test/DrawCalculatorV2Harness.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"../DrawCalculatorV2.sol\";\n\ncontract DrawCalculatorV2Harness is DrawCalculatorV2 {\n    constructor(\n        ITicket _ticket,\n        IDrawBuffer _drawBuffer,\n        IPrizeDistributionSource _prizeDistributionSource\n    ) DrawCalculatorV2(_ticket, _drawBuffer, _prizeDistributionSource) {}\n\n    function calculateTierIndex(\n        uint256 _randomNumberThisPick,\n        uint256 _winningRandomNumber,\n        uint256[] memory _masks\n    ) public pure returns (uint256) {\n        return _calculateTierIndex(_randomNumberThisPick, _winningRandomNumber, _masks);\n    }\n\n    function createBitMasks(IPrizeDistributionSource.PrizeDistribution calldata _prizeDistribution)\n        public\n        pure\n        returns (uint256[] memory)\n    {\n        return _createBitMasks(_prizeDistribution);\n    }\n\n    ///@notice Calculates the expected prize fraction per prizeDistribution and prizeTierIndex\n    ///@param _prizeDistribution prizeDistribution struct for Draw\n    ///@param _prizeTierIndex Index of the prize tiers array to calculate\n    ///@return returns the fraction of the total prize\n    function calculatePrizeTierFraction(\n        IPrizeDistributionSource.PrizeDistribution calldata _prizeDistribution,\n        uint256 _prizeTierIndex\n    ) external pure returns (uint256) {\n        return _calculatePrizeTierFraction(_prizeDistribution, _prizeTierIndex);\n    }\n\n    function numberOfPrizesForIndex(uint8 _bitRangeSize, uint256 _prizeTierIndex)\n        external\n        pure\n        returns (uint256)\n    {\n        return _numberOfPrizesForIndex(_bitRangeSize, _prizeTierIndex);\n    }\n\n    function calculateNumberOfUserPicks(\n        IPrizeDistributionSource.PrizeDistribution memory _prizeDistribution,\n        uint256 _normalizedUserBalance\n    ) external pure returns (uint64) {\n        return _calculateNumberOfUserPicks(_prizeDistribution, _normalizedUserBalance);\n    }\n}\n"
    },
    "contracts/test/DrawBufferHarness.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"../DrawBuffer.sol\";\nimport \"../interfaces/IDrawBeacon.sol\";\n\ncontract DrawBufferHarness is DrawBuffer {\n    constructor(address owner, uint8 card) DrawBuffer(owner, card) {}\n\n    function addMultipleDraws(\n        uint256 _start,\n        uint256 _numberOfDraws,\n        uint32 _timestamp,\n        uint256 _winningRandomNumber\n    ) external {\n        for (uint256 index = _start; index <= _numberOfDraws; index++) {\n            IDrawBeacon.Draw memory _draw = IDrawBeacon.Draw({\n                winningRandomNumber: _winningRandomNumber,\n                drawId: uint32(index),\n                timestamp: _timestamp,\n                beaconPeriodSeconds: 10,\n                beaconPeriodStartedAt: 20\n            });\n\n            _pushDraw(_draw);\n        }\n    }\n}\n"
    },
    "contracts/DrawBuffer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\";\n\nimport \"./interfaces/IDrawBuffer.sol\";\nimport \"./interfaces/IDrawBeacon.sol\";\nimport \"./libraries/DrawRingBufferLib.sol\";\n\n/**\n  * @title  PoolTogether V4 DrawBuffer\n  * @author PoolTogether Inc Team\n  * @notice The DrawBuffer provides historical lookups of Draws via a circular ring buffer.\n            Historical Draws can be accessed on-chain using a drawId to calculate ring buffer storage slot.\n            The Draw settings can be created by manager/owner and existing Draws can only be updated the owner.\n            Once a starting Draw has been added to the ring buffer, all following draws must have a sequential Draw ID.\n    @dev    A DrawBuffer store a limited number of Draws before beginning to overwrite (managed via the cardinality) previous Draws.\n    @dev    All mainnet DrawBuffer(s) are updated directly from a DrawBeacon, but non-mainnet DrawBuffer(s) (Matic, Optimism, Arbitrum, etc...)\n            will receive a cross-chain message, duplicating the mainnet Draw configuration - enabling a prize savings liquidity network.\n*/\ncontract DrawBuffer is IDrawBuffer, Manageable {\n    using DrawRingBufferLib for DrawRingBufferLib.Buffer;\n\n    /// @notice Draws ring buffer max length.\n    uint16 public constant MAX_CARDINALITY = 256;\n\n    /// @notice Draws ring buffer array.\n    IDrawBeacon.Draw[MAX_CARDINALITY] private drawRingBuffer;\n\n    /// @notice Holds ring buffer information\n    DrawRingBufferLib.Buffer internal bufferMetadata;\n\n    /* ============ Deploy ============ */\n\n    /**\n     * @notice Deploy DrawBuffer smart contract.\n     * @param _owner Address of the owner of the DrawBuffer.\n     * @param _cardinality Draw ring buffer cardinality.\n     */\n    constructor(address _owner, uint8 _cardinality) Ownable(_owner) {\n        bufferMetadata.cardinality = _cardinality;\n    }\n\n    /* ============ External Functions ============ */\n\n    /// @inheritdoc IDrawBuffer\n    function getBufferCardinality() external view override returns (uint32) {\n        return bufferMetadata.cardinality;\n    }\n\n    /// @inheritdoc IDrawBuffer\n    function getDraw(uint32 drawId) external view override returns (IDrawBeacon.Draw memory) {\n        return drawRingBuffer[_drawIdToDrawIndex(bufferMetadata, drawId)];\n    }\n\n    /// @inheritdoc IDrawBuffer\n    function getDraws(uint32[] calldata _drawIds)\n        external\n        view\n        override\n        returns (IDrawBeacon.Draw[] memory)\n    {\n        IDrawBeacon.Draw[] memory draws = new IDrawBeacon.Draw[](_drawIds.length);\n        DrawRingBufferLib.Buffer memory buffer = bufferMetadata;\n\n        for (uint256 index = 0; index < _drawIds.length; index++) {\n            draws[index] = drawRingBuffer[_drawIdToDrawIndex(buffer, _drawIds[index])];\n        }\n\n        return draws;\n    }\n\n    /// @inheritdoc IDrawBuffer\n    function getDrawCount() external view override returns (uint32) {\n        DrawRingBufferLib.Buffer memory buffer = bufferMetadata;\n\n        if (buffer.lastDrawId == 0) {\n            return 0;\n        }\n\n        uint32 bufferNextIndex = buffer.nextIndex;\n\n        if (drawRingBuffer[bufferNextIndex].timestamp != 0) {\n            return buffer.cardinality;\n        } else {\n            return bufferNextIndex;\n        }\n    }\n\n    /// @inheritdoc IDrawBuffer\n    function getNewestDraw() external view override returns (IDrawBeacon.Draw memory) {\n        return _getNewestDraw(bufferMetadata);\n    }\n\n    /// @inheritdoc IDrawBuffer\n    function getOldestDraw() external view override returns (IDrawBeacon.Draw memory) {\n        // oldest draw should be next available index, otherwise it's at 0\n        DrawRingBufferLib.Buffer memory buffer = bufferMetadata;\n        IDrawBeacon.Draw memory draw = drawRingBuffer[buffer.nextIndex];\n\n        if (draw.timestamp == 0) {\n            // if draw is not init, then use draw at 0\n            draw = drawRingBuffer[0];\n        }\n\n        return draw;\n    }\n\n    /// @inheritdoc IDrawBuffer\n    function pushDraw(IDrawBeacon.Draw memory _draw)\n        external\n        override\n        onlyManagerOrOwner\n        returns (uint32)\n    {\n        return _pushDraw(_draw);\n    }\n\n    /// @inheritdoc IDrawBuffer\n    function setDraw(IDrawBeacon.Draw memory _newDraw) external override onlyOwner returns (uint32) {\n        DrawRingBufferLib.Buffer memory buffer = bufferMetadata;\n        uint32 index = buffer.getIndex(_newDraw.drawId);\n        drawRingBuffer[index] = _newDraw;\n        emit DrawSet(_newDraw.drawId, _newDraw);\n        return _newDraw.drawId;\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * @notice Convert a Draw.drawId to a Draws ring buffer index pointer.\n     * @dev    The getNewestDraw.drawId() is used to calculate a Draws ID delta position.\n     * @param _drawId Draw.drawId\n     * @return Draws ring buffer index pointer\n     */\n    function _drawIdToDrawIndex(DrawRingBufferLib.Buffer memory _buffer, uint32 _drawId)\n        internal\n        pure\n        returns (uint32)\n    {\n        return _buffer.getIndex(_drawId);\n    }\n\n    /**\n     * @notice Read newest Draw from the draws ring buffer.\n     * @dev    Uses the lastDrawId to calculate the most recently added Draw.\n     * @param _buffer Draw ring buffer\n     * @return IDrawBeacon.Draw\n     */\n    function _getNewestDraw(DrawRingBufferLib.Buffer memory _buffer)\n        internal\n        view\n        returns (IDrawBeacon.Draw memory)\n    {\n        return drawRingBuffer[_buffer.getIndex(_buffer.lastDrawId)];\n    }\n\n    /**\n     * @notice Push Draw onto draws ring buffer history.\n     * @dev    Push new draw onto draws list via authorized manager or owner.\n     * @param _newDraw IDrawBeacon.Draw\n     * @return Draw.drawId\n     */\n    function _pushDraw(IDrawBeacon.Draw memory _newDraw) internal returns (uint32) {\n        DrawRingBufferLib.Buffer memory _buffer = bufferMetadata;\n        drawRingBuffer[_buffer.nextIndex] = _newDraw;\n        bufferMetadata = _buffer.push(_newDraw.drawId);\n\n        emit DrawSet(_newDraw.drawId, _newDraw);\n\n        return _newDraw.drawId;\n    }\n}\n"
    },
    "contracts/test/libraries/DrawRingBufferLibHarness.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"../../libraries/DrawRingBufferLib.sol\";\n\n/**\n * @title  Expose the DrawRingBufferLib for unit tests\n * @author PoolTogether Inc.\n */\ncontract DrawRingBufferLibHarness {\n    using DrawRingBufferLib for DrawRingBufferLib.Buffer;\n\n    uint16 public constant MAX_CARDINALITY = 256;\n    DrawRingBufferLib.Buffer internal bufferMetadata;\n\n    constructor(uint8 _cardinality) {\n        bufferMetadata.cardinality = _cardinality;\n    }\n\n    function _push(DrawRingBufferLib.Buffer memory _buffer, uint32 _drawId)\n        external\n        pure\n        returns (DrawRingBufferLib.Buffer memory)\n    {\n        return DrawRingBufferLib.push(_buffer, _drawId);\n    }\n\n    function _getIndex(DrawRingBufferLib.Buffer memory _buffer, uint32 _drawId)\n        external\n        pure\n        returns (uint32)\n    {\n        return DrawRingBufferLib.getIndex(_buffer, _drawId);\n    }\n\n    function _isInitialized(DrawRingBufferLib.Buffer memory _buffer) external pure returns (bool) {\n        return DrawRingBufferLib.isInitialized(_buffer);\n    }\n}\n"
    },
    "contracts/test/DrawRingBufferExposed.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"../libraries/DrawRingBufferLib.sol\";\n\n/**\n * @title  Expose the DrawRingBufferLibrary for unit tests\n * @author PoolTogether Inc.\n */\ncontract DrawRingBufferLibExposed {\n    using DrawRingBufferLib for DrawRingBufferLib.Buffer;\n\n    uint16 public constant MAX_CARDINALITY = 256;\n    DrawRingBufferLib.Buffer internal bufferMetadata;\n\n    constructor(uint8 _cardinality) {\n        bufferMetadata.cardinality = _cardinality;\n    }\n\n    function _push(DrawRingBufferLib.Buffer memory _buffer, uint32 _drawId)\n        external\n        pure\n        returns (DrawRingBufferLib.Buffer memory)\n    {\n        return DrawRingBufferLib.push(_buffer, _drawId);\n    }\n\n    function _getIndex(DrawRingBufferLib.Buffer memory _buffer, uint32 _drawId)\n        external\n        pure\n        returns (uint32)\n    {\n        return DrawRingBufferLib.getIndex(_buffer, _drawId);\n    }\n}\n"
    },
    "contracts/DrawCalculator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"./interfaces/IDrawCalculator.sol\";\nimport \"./interfaces/ITicket.sol\";\nimport \"./interfaces/IDrawBuffer.sol\";\nimport \"./interfaces/IPrizeDistributionBuffer.sol\";\nimport \"./interfaces/IDrawBeacon.sol\";\n\n/**\n  * @title  PoolTogether V4 DrawCalculator\n  * @author PoolTogether Inc Team\n  * @notice The DrawCalculator calculates a user's prize by matching a winning random number against\n            their picks. A users picks are generated deterministically based on their address and balance\n            of tickets held. Prize payouts are divided into multiple tiers: grand prize, second place, etc...\n            A user with a higher average weighted balance (during each draw period) will be given a large number of\n            picks to choose from, and thus a higher chance to match the winning numbers.\n*/\ncontract DrawCalculator is IDrawCalculator {\n\n    /// @notice DrawBuffer address\n    IDrawBuffer public immutable drawBuffer;\n\n    /// @notice Ticket associated with DrawCalculator\n    ITicket public immutable ticket;\n\n    /// @notice The stored history of draw settings.  Stored as ring buffer.\n    IPrizeDistributionBuffer public immutable prizeDistributionBuffer;\n\n    /// @notice The tiers array length\n    uint8 public constant TIERS_LENGTH = 16;\n\n    /* ============ Constructor ============ */\n\n    /// @notice Constructor for DrawCalculator\n    /// @param _ticket Ticket associated with this DrawCalculator\n    /// @param _drawBuffer The address of the draw buffer to push draws to\n    /// @param _prizeDistributionBuffer PrizeDistributionBuffer address\n    constructor(\n        ITicket _ticket,\n        IDrawBuffer _drawBuffer,\n        IPrizeDistributionBuffer _prizeDistributionBuffer\n    ) {\n        require(address(_ticket) != address(0), \"DrawCalc/ticket-not-zero\");\n        require(address(_prizeDistributionBuffer) != address(0), \"DrawCalc/pdb-not-zero\");\n        require(address(_drawBuffer) != address(0), \"DrawCalc/dh-not-zero\");\n\n        ticket = _ticket;\n        drawBuffer = _drawBuffer;\n        prizeDistributionBuffer = _prizeDistributionBuffer;\n\n        emit Deployed(_ticket, _drawBuffer, _prizeDistributionBuffer);\n    }\n\n    /* ============ External Functions ============ */\n\n    /// @inheritdoc IDrawCalculator\n    function calculate(\n        address _user,\n        uint32[] calldata _drawIds,\n        bytes calldata _pickIndicesForDraws\n    ) external view override returns (uint256[] memory, bytes memory) {\n        uint64[][] memory pickIndices = abi.decode(_pickIndicesForDraws, (uint64 [][]));\n        require(pickIndices.length == _drawIds.length, \"DrawCalc/invalid-pick-indices-length\");\n\n        // READ list of IDrawBeacon.Draw using the drawIds from drawBuffer\n        IDrawBeacon.Draw[] memory draws = drawBuffer.getDraws(_drawIds);\n\n        // READ list of IPrizeDistributionBuffer.PrizeDistribution using the drawIds\n        IPrizeDistributionBuffer.PrizeDistribution[] memory _prizeDistributions = prizeDistributionBuffer\n            .getPrizeDistributions(_drawIds);\n\n        // The userBalances are fractions representing their portion of the liquidity for a draw.\n        uint256[] memory userBalances = _getNormalizedBalancesAt(_user, draws, _prizeDistributions);\n\n        // The users address is hashed once.\n        bytes32 _userRandomNumber = keccak256(abi.encodePacked(_user));\n\n        return _calculatePrizesAwardable(\n                userBalances,\n                _userRandomNumber,\n                draws,\n                pickIndices,\n                _prizeDistributions\n            );\n    }\n\n    /// @inheritdoc IDrawCalculator\n    function getDrawBuffer() external view override returns (IDrawBuffer) {\n        return drawBuffer;\n    }\n\n    /// @inheritdoc IDrawCalculator\n    function getPrizeDistributionBuffer()\n        external\n        view\n        override\n        returns (IPrizeDistributionBuffer)\n    {\n        return prizeDistributionBuffer;\n    }\n\n    /// @inheritdoc IDrawCalculator\n    function getNormalizedBalancesForDrawIds(address _user, uint32[] calldata _drawIds)\n        external\n        view\n        override\n        returns (uint256[] memory)\n    {\n        IDrawBeacon.Draw[] memory _draws = drawBuffer.getDraws(_drawIds);\n        IPrizeDistributionBuffer.PrizeDistribution[] memory _prizeDistributions = prizeDistributionBuffer\n            .getPrizeDistributions(_drawIds);\n\n        return _getNormalizedBalancesAt(_user, _draws, _prizeDistributions);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * @notice Calculates the prizes awardable for each Draw passed.\n     * @param _normalizedUserBalances Fractions representing the user's portion of the liquidity for each draw.\n     * @param _userRandomNumber       Random number of the user to consider over draws\n     * @param _draws                  List of Draws\n     * @param _pickIndicesForDraws    Pick indices for each Draw\n     * @param _prizeDistributions     PrizeDistribution for each Draw\n\n     */\n    function _calculatePrizesAwardable(\n        uint256[] memory _normalizedUserBalances,\n        bytes32 _userRandomNumber,\n        IDrawBeacon.Draw[] memory _draws,\n        uint64[][] memory _pickIndicesForDraws,\n        IPrizeDistributionBuffer.PrizeDistribution[] memory _prizeDistributions\n    ) internal view returns (uint256[] memory prizesAwardable, bytes memory prizeCounts) {\n\n        uint256[] memory _prizesAwardable = new uint256[](_normalizedUserBalances.length);\n        uint256[][] memory _prizeCounts = new uint256[][](_normalizedUserBalances.length);\n\n        uint64 timeNow = uint64(block.timestamp);\n\n        // calculate prizes awardable for each Draw passed\n        for (uint32 drawIndex = 0; drawIndex < _draws.length; drawIndex++) {\n            require(timeNow < _draws[drawIndex].timestamp + _prizeDistributions[drawIndex].expiryDuration, \"DrawCalc/draw-expired\");\n\n            uint64 totalUserPicks = _calculateNumberOfUserPicks(\n                _prizeDistributions[drawIndex],\n                _normalizedUserBalances[drawIndex]\n            );\n\n            (_prizesAwardable[drawIndex], _prizeCounts[drawIndex]) = _calculate(\n                _draws[drawIndex].winningRandomNumber,\n                totalUserPicks,\n                _userRandomNumber,\n                _pickIndicesForDraws[drawIndex],\n                _prizeDistributions[drawIndex]\n            );\n        }\n\n        prizeCounts = abi.encode(_prizeCounts);\n        prizesAwardable = _prizesAwardable;\n    }\n\n    /**\n     * @notice Calculates the number of picks a user gets for a Draw, considering the normalized user balance and the PrizeDistribution.\n     * @dev Divided by 1e18 since the normalized user balance is stored as a fixed point 18 number\n     * @param _prizeDistribution The PrizeDistribution to consider\n     * @param _normalizedUserBalance The normalized user balances to consider\n     * @return The number of picks a user gets for a Draw\n     */\n    function _calculateNumberOfUserPicks(\n        IPrizeDistributionBuffer.PrizeDistribution memory _prizeDistribution,\n        uint256 _normalizedUserBalance\n    ) internal pure returns (uint64) {\n        return uint64((_normalizedUserBalance * _prizeDistribution.numberOfPicks) / 1 ether);\n    }\n\n    /**\n     * @notice Calculates the normalized balance of a user against the total supply for timestamps\n     * @param _user The user to consider\n     * @param _draws The draws we are looking at\n     * @param _prizeDistributions The prize tiers to consider (needed for draw timestamp offsets)\n     * @return An array of normalized balances\n     */\n    function _getNormalizedBalancesAt(\n        address _user,\n        IDrawBeacon.Draw[] memory _draws,\n        IPrizeDistributionBuffer.PrizeDistribution[] memory _prizeDistributions\n    ) internal view returns (uint256[] memory) {\n        uint256 drawsLength = _draws.length;\n        uint64[] memory _timestampsWithStartCutoffTimes = new uint64[](drawsLength);\n        uint64[] memory _timestampsWithEndCutoffTimes = new uint64[](drawsLength);\n\n        // generate timestamps with draw cutoff offsets included\n        for (uint32 i = 0; i < drawsLength; i++) {\n            unchecked {\n                _timestampsWithStartCutoffTimes[i] =\n                    _draws[i].timestamp - _prizeDistributions[i].startTimestampOffset;\n                _timestampsWithEndCutoffTimes[i] =\n                    _draws[i].timestamp - _prizeDistributions[i].endTimestampOffset;\n            }\n        }\n\n        uint256[] memory balances = ticket.getAverageBalancesBetween(\n            _user,\n            _timestampsWithStartCutoffTimes,\n            _timestampsWithEndCutoffTimes\n        );\n\n        uint256[] memory totalSupplies = ticket.getAverageTotalSuppliesBetween(\n            _timestampsWithStartCutoffTimes,\n            _timestampsWithEndCutoffTimes\n        );\n\n        uint256[] memory normalizedBalances = new uint256[](drawsLength);\n\n        // divide balances by total supplies (normalize)\n        for (uint256 i = 0; i < drawsLength; i++) {\n            if(totalSupplies[i] == 0){\n                normalizedBalances[i] = 0;\n            }\n            else {\n                normalizedBalances[i] = (balances[i] * 1 ether) / totalSupplies[i];\n            }\n        }\n\n        return normalizedBalances;\n    }\n\n    /**\n     * @notice Calculates the prize amount for a PrizeDistribution over given picks\n     * @param _winningRandomNumber Draw's winningRandomNumber\n     * @param _totalUserPicks      number of picks the user gets for the Draw\n     * @param _userRandomNumber    users randomNumber for that draw\n     * @param _picks               users picks for that draw\n     * @param _prizeDistribution   PrizeDistribution for that draw\n     * @return prize (if any), prizeCounts (if any)\n     */\n    function _calculate(\n        uint256 _winningRandomNumber,\n        uint256 _totalUserPicks,\n        bytes32 _userRandomNumber,\n        uint64[] memory _picks,\n        IPrizeDistributionBuffer.PrizeDistribution memory _prizeDistribution\n    ) internal pure returns (uint256 prize, uint256[] memory prizeCounts) {\n\n        // create bitmasks for the PrizeDistribution\n        uint256[] memory masks = _createBitMasks(_prizeDistribution);\n        uint32 picksLength = uint32(_picks.length);\n        uint256[] memory _prizeCounts = new uint256[](_prizeDistribution.tiers.length);\n\n        uint8 maxWinningTierIndex = 0;\n\n        require(\n            picksLength <= _prizeDistribution.maxPicksPerUser,\n            \"DrawCalc/exceeds-max-user-picks\"\n        );\n\n        // for each pick, find number of matching numbers and calculate prize distributions index\n        for (uint32 index = 0; index < picksLength; index++) {\n            require(_picks[index] < _totalUserPicks, \"DrawCalc/insufficient-user-picks\");\n\n            if (index > 0) {\n                require(_picks[index] > _picks[index - 1], \"DrawCalc/picks-ascending\");\n            }\n\n            // hash the user random number with the pick value\n            uint256 randomNumberThisPick = uint256(\n                keccak256(abi.encode(_userRandomNumber, _picks[index]))\n            );\n\n            uint8 tiersIndex = _calculateTierIndex(\n                randomNumberThisPick,\n                _winningRandomNumber,\n                masks\n            );\n\n            // there is prize for this tier index\n            if (tiersIndex < TIERS_LENGTH) {\n                if (tiersIndex > maxWinningTierIndex) {\n                    maxWinningTierIndex = tiersIndex;\n                }\n                _prizeCounts[tiersIndex]++;\n            }\n        }\n\n        // now calculate prizeFraction given prizeCounts\n        uint256 prizeFraction = 0;\n        uint256[] memory prizeTiersFractions = _calculatePrizeTierFractions(\n            _prizeDistribution,\n            maxWinningTierIndex\n        );\n\n        // multiple the fractions by the prizeCounts and add them up\n        for (\n            uint256 prizeCountIndex = 0;\n            prizeCountIndex <= maxWinningTierIndex;\n            prizeCountIndex++\n        ) {\n            if (_prizeCounts[prizeCountIndex] > 0) {\n                prizeFraction +=\n                    prizeTiersFractions[prizeCountIndex] *\n                    _prizeCounts[prizeCountIndex];\n            }\n        }\n\n        // return the absolute amount of prize awardable\n        // div by 1e9 as prize tiers are base 1e9\n        prize = (prizeFraction * _prizeDistribution.prize) / 1e9;\n        prizeCounts = _prizeCounts;\n    }\n\n    ///@notice Calculates the tier index given the random numbers and masks\n    ///@param _randomNumberThisPick users random number for this Pick\n    ///@param _winningRandomNumber The winning number for this draw\n    ///@param _masks The pre-calculate bitmasks for the prizeDistributions\n    ///@return The position within the prize tier array (0 = top prize, 1 = runner-up prize, etc)\n    function _calculateTierIndex(\n        uint256 _randomNumberThisPick,\n        uint256 _winningRandomNumber,\n        uint256[] memory _masks\n    ) internal pure returns (uint8) {\n        uint8 numberOfMatches = 0;\n        uint8 masksLength = uint8(_masks.length);\n\n        // main number matching loop\n        for (uint8 matchIndex = 0; matchIndex < masksLength; matchIndex++) {\n            uint256 mask = _masks[matchIndex];\n\n            if ((_randomNumberThisPick & mask) != (_winningRandomNumber & mask)) {\n                // there are no more sequential matches since this comparison is not a match\n                if (masksLength == numberOfMatches) {\n                    return 0;\n                } else {\n                    return masksLength - numberOfMatches;\n                }\n            }\n\n            // else there was a match\n            numberOfMatches++;\n        }\n\n        return masksLength - numberOfMatches;\n    }\n\n    /**\n     * @notice Create an array of bitmasks equal to the PrizeDistribution.matchCardinality length\n     * @param _prizeDistribution The PrizeDistribution to use to calculate the masks\n     * @return An array of bitmasks\n     */\n    function _createBitMasks(IPrizeDistributionBuffer.PrizeDistribution memory _prizeDistribution)\n        internal\n        pure\n        returns (uint256[] memory)\n    {\n        uint256[] memory masks = new uint256[](_prizeDistribution.matchCardinality);\n        masks[0] =  (2**_prizeDistribution.bitRangeSize) - 1;\n\n        for (uint8 maskIndex = 1; maskIndex < _prizeDistribution.matchCardinality; maskIndex++) {\n            // shift mask bits to correct position and insert in result mask array\n            masks[maskIndex] = masks[maskIndex - 1] << _prizeDistribution.bitRangeSize;\n        }\n\n        return masks;\n    }\n\n    /**\n     * @notice Calculates the expected prize fraction per PrizeDistributions and distributionIndex\n     * @param _prizeDistribution prizeDistribution struct for Draw\n     * @param _prizeTierIndex Index of the prize tiers array to calculate\n     * @return returns the fraction of the total prize (fixed point 9 number)\n     */\n    function _calculatePrizeTierFraction(\n        IPrizeDistributionBuffer.PrizeDistribution memory _prizeDistribution,\n        uint256 _prizeTierIndex\n    ) internal pure returns (uint256) {\n         // get the prize fraction at that index\n        uint256 prizeFraction = _prizeDistribution.tiers[_prizeTierIndex];\n\n        // calculate number of prizes for that index\n        uint256 numberOfPrizesForIndex = _numberOfPrizesForIndex(\n            _prizeDistribution.bitRangeSize,\n            _prizeTierIndex\n        );\n\n        return prizeFraction / numberOfPrizesForIndex;\n    }\n\n    /**\n     * @notice Generates an array of prize tiers fractions\n     * @param _prizeDistribution prizeDistribution struct for Draw\n     * @param maxWinningTierIndex Max length of the prize tiers array\n     * @return returns an array of prize tiers fractions\n     */\n    function _calculatePrizeTierFractions(\n        IPrizeDistributionBuffer.PrizeDistribution memory _prizeDistribution,\n        uint8 maxWinningTierIndex\n    ) internal pure returns (uint256[] memory) {\n        uint256[] memory prizeDistributionFractions = new uint256[](\n            maxWinningTierIndex + 1\n        );\n\n        for (uint8 i = 0; i <= maxWinningTierIndex; i++) {\n            prizeDistributionFractions[i] = _calculatePrizeTierFraction(\n                _prizeDistribution,\n                i\n            );\n        }\n\n        return prizeDistributionFractions;\n    }\n\n    /**\n     * @notice Calculates the number of prizes for a given prizeDistributionIndex\n     * @param _bitRangeSize Bit range size for Draw\n     * @param _prizeTierIndex Index of the prize tier array to calculate\n     * @return returns the fraction of the total prize (base 1e18)\n     */\n    function _numberOfPrizesForIndex(uint8 _bitRangeSize, uint256 _prizeTierIndex)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (_prizeTierIndex > 0) {\n            return ( 1 << _bitRangeSize * _prizeTierIndex ) - ( 1 << _bitRangeSize * (_prizeTierIndex - 1) );\n        } else {\n            return 1;\n        }\n    }\n}\n"
    },
    "contracts/test/DrawCalculatorHarness.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"../DrawCalculator.sol\";\n\ncontract DrawCalculatorHarness is DrawCalculator {\n    constructor(\n        ITicket _ticket,\n        IDrawBuffer _drawBuffer,\n        IPrizeDistributionBuffer _prizeDistributionBuffer\n    ) DrawCalculator(_ticket, _drawBuffer, _prizeDistributionBuffer) {}\n\n    function calculateTierIndex(\n        uint256 _randomNumberThisPick,\n        uint256 _winningRandomNumber,\n        uint256[] memory _masks\n    ) public pure returns (uint256) {\n        return _calculateTierIndex(_randomNumberThisPick, _winningRandomNumber, _masks);\n    }\n\n    function createBitMasks(IPrizeDistributionBuffer.PrizeDistribution calldata _prizeDistribution)\n        public\n        pure\n        returns (uint256[] memory)\n    {\n        return _createBitMasks(_prizeDistribution);\n    }\n\n    ///@notice Calculates the expected prize fraction per prizeDistribution and prizeTierIndex\n    ///@param _prizeDistribution prizeDistribution struct for Draw\n    ///@param _prizeTierIndex Index of the prize tiers array to calculate\n    ///@return returns the fraction of the total prize\n    function calculatePrizeTierFraction(\n        IPrizeDistributionBuffer.PrizeDistribution calldata _prizeDistribution,\n        uint256 _prizeTierIndex\n    ) external pure returns (uint256) {\n        return _calculatePrizeTierFraction(_prizeDistribution, _prizeTierIndex);\n    }\n\n    function numberOfPrizesForIndex(uint8 _bitRangeSize, uint256 _prizeTierIndex)\n        external\n        pure\n        returns (uint256)\n    {\n        return _numberOfPrizesForIndex(_bitRangeSize, _prizeTierIndex);\n    }\n\n    function calculateNumberOfUserPicks(\n        IPrizeDistributionBuffer.PrizeDistribution memory _prizeDistribution,\n        uint256 _normalizedUserBalance\n    ) external pure returns (uint64) {\n        return _calculateNumberOfUserPicks(_prizeDistribution, _normalizedUserBalance);\n    }\n}\n"
    },
    "contracts/test/DrawBeaconHarness.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@pooltogether/pooltogether-rng-contracts/contracts/RNGInterface.sol\";\n\nimport \"../DrawBeacon.sol\";\nimport \"../interfaces/IDrawBuffer.sol\";\n\ncontract DrawBeaconHarness is DrawBeacon {\n    constructor(\n        address _owner,\n        IDrawBuffer _drawBuffer,\n        RNGInterface _rng,\n        uint32 _nextDrawId,\n        uint64 _beaconPeriodStart,\n        uint32 _drawPeriodSeconds,\n        uint32 _rngTimeout\n    ) DrawBeacon(_owner, _drawBuffer, _rng, _nextDrawId, _beaconPeriodStart, _drawPeriodSeconds, _rngTimeout) {}\n\n    uint64 internal time;\n\n    function setCurrentTime(uint64 _time) external {\n        time = _time;\n    }\n\n    function _currentTime() internal view override returns (uint64) {\n        return time;\n    }\n\n    function currentTime() external view returns (uint64) {\n        return _currentTime();\n    }\n\n    function _currentTimeInternal() external view returns (uint64) {\n        return super._currentTime();\n    }\n\n    function setRngRequest(uint32 requestId, uint32 lockBlock) external {\n        rngRequest.id = requestId;\n        rngRequest.lockBlock = lockBlock;\n    }\n}\n"
    },
    "contracts/DrawBeacon.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"@pooltogether/pooltogether-rng-contracts/contracts/RNGInterface.sol\";\nimport \"@pooltogether/owner-manager-contracts/contracts/Ownable.sol\";\n\nimport \"./interfaces/IDrawBeacon.sol\";\nimport \"./interfaces/IDrawBuffer.sol\";\n\n\n/**\n  * @title  PoolTogether V4 DrawBeacon\n  * @author PoolTogether Inc Team\n  * @notice Manages RNG (random number generator) requests and pushing Draws onto DrawBuffer.\n            The DrawBeacon has 3 major actions for requesting a random number: start, cancel and complete.\n            To create a new Draw, the user requests a new random number from the RNG service.\n            When the random number is available, the user can create the draw using the create() method\n            which will push the draw onto the DrawBuffer.\n            If the RNG service fails to deliver a rng, when the request timeout elapses, the user can cancel the request.\n*/\ncontract DrawBeacon is IDrawBeacon, Ownable {\n    using SafeCast for uint256;\n    using SafeERC20 for IERC20;\n\n    /* ============ Variables ============ */\n\n    /// @notice RNG contract interface\n    RNGInterface internal rng;\n\n    /// @notice Current RNG Request\n    RngRequest internal rngRequest;\n\n    /// @notice DrawBuffer address\n    IDrawBuffer internal drawBuffer;\n\n    /**\n     * @notice RNG Request Timeout.  In fact, this is really a \"complete draw\" timeout.\n     * @dev If the rng completes the award can still be cancelled.\n     */\n    uint32 internal rngTimeout;\n\n    /// @notice Seconds between beacon period request\n    uint32 internal beaconPeriodSeconds;\n\n    /// @notice Epoch timestamp when beacon period can start\n    uint64 internal beaconPeriodStartedAt;\n\n    /**\n     * @notice Next Draw ID to use when pushing a Draw onto DrawBuffer\n     * @dev Starts at 1. This way we know that no Draw has been recorded at 0.\n     */\n    uint32 internal nextDrawId;\n\n    /* ============ Structs ============ */\n\n    /**\n     * @notice RNG Request\n     * @param id          RNG request ID\n     * @param lockBlock   Block number that the RNG request is locked\n     * @param requestedAt Time when RNG is requested\n     */\n    struct RngRequest {\n        uint32 id;\n        uint32 lockBlock;\n        uint64 requestedAt;\n    }\n\n    /* ============ Events ============ */\n\n    /**\n     * @notice Emit when the DrawBeacon is deployed.\n     * @param nextDrawId Draw ID at which the DrawBeacon should start. Can't be inferior to 1.\n     * @param beaconPeriodStartedAt Timestamp when beacon period starts.\n     */\n    event Deployed(\n        uint32 nextDrawId,\n        uint64 beaconPeriodStartedAt\n    );\n\n    /* ============ Modifiers ============ */\n\n    modifier requireDrawNotStarted() {\n        _requireDrawNotStarted();\n        _;\n    }\n\n    modifier requireCanStartDraw() {\n        require(_isBeaconPeriodOver(), \"DrawBeacon/beacon-period-not-over\");\n        require(!isRngRequested(), \"DrawBeacon/rng-already-requested\");\n        _;\n    }\n\n    modifier requireCanCompleteRngRequest() {\n        require(isRngRequested(), \"DrawBeacon/rng-not-requested\");\n        require(isRngCompleted(), \"DrawBeacon/rng-not-complete\");\n        _;\n    }\n\n    /* ============ Constructor ============ */\n\n    /**\n     * @notice Deploy the DrawBeacon smart contract.\n     * @param _owner Address of the DrawBeacon owner\n     * @param _drawBuffer The address of the draw buffer to push draws to\n     * @param _rng The RNG service to use\n     * @param _nextDrawId Draw ID at which the DrawBeacon should start. Can't be inferior to 1.\n     * @param _beaconPeriodStart The starting timestamp of the beacon period.\n     * @param _beaconPeriodSeconds The duration of the beacon period in seconds\n     */\n    constructor(\n        address _owner,\n        IDrawBuffer _drawBuffer,\n        RNGInterface _rng,\n        uint32 _nextDrawId,\n        uint64 _beaconPeriodStart,\n        uint32 _beaconPeriodSeconds,\n        uint32 _rngTimeout\n    ) Ownable(_owner) {\n        require(_beaconPeriodStart > 0, \"DrawBeacon/beacon-period-greater-than-zero\");\n        require(address(_rng) != address(0), \"DrawBeacon/rng-not-zero\");\n        require(_nextDrawId >= 1, \"DrawBeacon/next-draw-id-gte-one\");\n\n        beaconPeriodStartedAt = _beaconPeriodStart;\n        nextDrawId = _nextDrawId;\n\n        _setBeaconPeriodSeconds(_beaconPeriodSeconds);\n        _setDrawBuffer(_drawBuffer);\n        _setRngService(_rng);\n        _setRngTimeout(_rngTimeout);\n\n        emit Deployed(_nextDrawId, _beaconPeriodStart);\n        emit BeaconPeriodStarted(_beaconPeriodStart);\n    }\n\n    /* ============ Public Functions ============ */\n\n    /**\n     * @notice Returns whether the random number request has completed.\n     * @return True if a random number request has completed, false otherwise.\n     */\n    function isRngCompleted() public view override returns (bool) {\n        return rng.isRequestComplete(rngRequest.id);\n    }\n\n    /**\n     * @notice Returns whether a random number has been requested\n     * @return True if a random number has been requested, false otherwise.\n     */\n    function isRngRequested() public view override returns (bool) {\n        return rngRequest.id != 0;\n    }\n\n    /**\n     * @notice Returns whether the random number request has timed out.\n     * @return True if a random number request has timed out, false otherwise.\n     */\n    function isRngTimedOut() public view override returns (bool) {\n        if (rngRequest.requestedAt == 0) {\n            return false;\n        } else {\n            return rngTimeout + rngRequest.requestedAt < _currentTime();\n        }\n    }\n\n    /* ============ External Functions ============ */\n\n    /// @inheritdoc IDrawBeacon\n    function canStartDraw() external view override returns (bool) {\n        return _isBeaconPeriodOver() && !isRngRequested();\n    }\n\n    /// @inheritdoc IDrawBeacon\n    function canCompleteDraw() external view override returns (bool) {\n        return isRngRequested() && isRngCompleted();\n    }\n\n    /// @notice Calculates the next beacon start time, assuming all beacon periods have occurred between the last and now.\n    /// @return The next beacon period start time\n    function calculateNextBeaconPeriodStartTimeFromCurrentTime() external view returns (uint64) {\n        return\n            _calculateNextBeaconPeriodStartTime(\n                beaconPeriodStartedAt,\n                beaconPeriodSeconds,\n                _currentTime()\n            );\n    }\n\n    /// @inheritdoc IDrawBeacon\n    function calculateNextBeaconPeriodStartTime(uint64 _time)\n        external\n        view\n        override\n        returns (uint64)\n    {\n        return\n            _calculateNextBeaconPeriodStartTime(\n                beaconPeriodStartedAt,\n                beaconPeriodSeconds,\n                _time\n            );\n    }\n\n    /// @inheritdoc IDrawBeacon\n    function cancelDraw() external override {\n        require(isRngTimedOut(), \"DrawBeacon/rng-not-timedout\");\n        uint32 requestId = rngRequest.id;\n        uint32 lockBlock = rngRequest.lockBlock;\n        delete rngRequest;\n        emit DrawCancelled(requestId, lockBlock);\n    }\n\n    /// @inheritdoc IDrawBeacon\n    function completeDraw() external override requireCanCompleteRngRequest {\n        uint256 randomNumber = rng.randomNumber(rngRequest.id);\n        uint32 _nextDrawId = nextDrawId;\n        uint64 _beaconPeriodStartedAt = beaconPeriodStartedAt;\n        uint32 _beaconPeriodSeconds = beaconPeriodSeconds;\n        uint64 _time = _currentTime();\n\n        // create Draw struct\n        IDrawBeacon.Draw memory _draw = IDrawBeacon.Draw({\n            winningRandomNumber: randomNumber,\n            drawId: _nextDrawId,\n            timestamp: rngRequest.requestedAt, // must use the startAward() timestamp to prevent front-running\n            beaconPeriodStartedAt: _beaconPeriodStartedAt,\n            beaconPeriodSeconds: _beaconPeriodSeconds\n        });\n\n        drawBuffer.pushDraw(_draw);\n\n        // to avoid clock drift, we should calculate the start time based on the previous period start time.\n        uint64 nextBeaconPeriodStartedAt = _calculateNextBeaconPeriodStartTime(\n            _beaconPeriodStartedAt,\n            _beaconPeriodSeconds,\n            _time\n        );\n        beaconPeriodStartedAt = nextBeaconPeriodStartedAt;\n        nextDrawId = _nextDrawId + 1;\n\n        // Reset the rngRequest state so Beacon period can start again.\n        delete rngRequest;\n\n        emit DrawCompleted(randomNumber);\n        emit BeaconPeriodStarted(nextBeaconPeriodStartedAt);\n    }\n\n    /// @inheritdoc IDrawBeacon\n    function beaconPeriodRemainingSeconds() external view override returns (uint64) {\n        return _beaconPeriodRemainingSeconds();\n    }\n\n    /// @inheritdoc IDrawBeacon\n    function beaconPeriodEndAt() external view override returns (uint64) {\n        return _beaconPeriodEndAt();\n    }\n\n    function getBeaconPeriodSeconds() external view returns (uint32) {\n        return beaconPeriodSeconds;\n    }\n\n    function getBeaconPeriodStartedAt() external view returns (uint64) {\n        return beaconPeriodStartedAt;\n    }\n\n    function getDrawBuffer() external view returns (IDrawBuffer) {\n        return drawBuffer;\n    }\n\n    function getNextDrawId() external view returns (uint32) {\n        return nextDrawId;\n    }\n\n    /// @inheritdoc IDrawBeacon\n    function getLastRngLockBlock() external view override returns (uint32) {\n        return rngRequest.lockBlock;\n    }\n\n    function getLastRngRequestId() external view override returns (uint32) {\n        return rngRequest.id;\n    }\n\n    function getRngService() external view returns (RNGInterface) {\n        return rng;\n    }\n\n    function getRngTimeout() external view returns (uint32) {\n        return rngTimeout;\n    }\n\n    /// @inheritdoc IDrawBeacon\n    function isBeaconPeriodOver() external view override returns (bool) {\n        return _isBeaconPeriodOver();\n    }\n\n    /// @inheritdoc IDrawBeacon\n    function setDrawBuffer(IDrawBuffer newDrawBuffer)\n        external\n        override\n        onlyOwner\n        returns (IDrawBuffer)\n    {\n        return _setDrawBuffer(newDrawBuffer);\n    }\n\n    /// @inheritdoc IDrawBeacon\n    function startDraw() external override requireCanStartDraw {\n        (address feeToken, uint256 requestFee) = rng.getRequestFee();\n\n        if (feeToken != address(0) && requestFee > 0) {\n            IERC20(feeToken).safeIncreaseAllowance(address(rng), requestFee);\n        }\n\n        (uint32 requestId, uint32 lockBlock) = rng.requestRandomNumber();\n        rngRequest.id = requestId;\n        rngRequest.lockBlock = lockBlock;\n        rngRequest.requestedAt = _currentTime();\n\n        emit DrawStarted(requestId, lockBlock);\n    }\n\n    /// @inheritdoc IDrawBeacon\n    function setBeaconPeriodSeconds(uint32 _beaconPeriodSeconds)\n        external\n        override\n        onlyOwner\n        requireDrawNotStarted\n    {\n        _setBeaconPeriodSeconds(_beaconPeriodSeconds);\n    }\n\n    /// @inheritdoc IDrawBeacon\n    function setRngTimeout(uint32 _rngTimeout) external override onlyOwner requireDrawNotStarted {\n        _setRngTimeout(_rngTimeout);\n    }\n\n    /// @inheritdoc IDrawBeacon\n    function setRngService(RNGInterface _rngService)\n        external\n        override\n        onlyOwner\n        requireDrawNotStarted\n    {\n        _setRngService(_rngService);\n    }\n\n    /**\n     * @notice Sets the RNG service that the Prize Strategy is connected to\n     * @param _rngService The address of the new RNG service interface\n     */\n    function _setRngService(RNGInterface _rngService) internal\n    {\n        rng = _rngService;\n        emit RngServiceUpdated(_rngService);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * @notice Calculates when the next beacon period will start\n     * @param _beaconPeriodStartedAt The timestamp at which the beacon period started\n     * @param _beaconPeriodSeconds The duration of the beacon period in seconds\n     * @param _time The timestamp to use as the current time\n     * @return The timestamp at which the next beacon period would start\n     */\n    function _calculateNextBeaconPeriodStartTime(\n        uint64 _beaconPeriodStartedAt,\n        uint32 _beaconPeriodSeconds,\n        uint64 _time\n    ) internal pure returns (uint64) {\n        uint64 elapsedPeriods = (_time - _beaconPeriodStartedAt) / _beaconPeriodSeconds;\n        return _beaconPeriodStartedAt + (elapsedPeriods * _beaconPeriodSeconds);\n    }\n\n    /**\n     * @notice returns the current time.  Used for testing.\n     * @return The current time (block.timestamp)\n     */\n    function _currentTime() internal view virtual returns (uint64) {\n        return uint64(block.timestamp);\n    }\n\n    /**\n     * @notice Returns the timestamp at which the beacon period ends\n     * @return The timestamp at which the beacon period ends\n     */\n    function _beaconPeriodEndAt() internal view returns (uint64) {\n        return beaconPeriodStartedAt + beaconPeriodSeconds;\n    }\n\n    /**\n     * @notice Returns the number of seconds remaining until the prize can be awarded.\n     * @return The number of seconds remaining until the prize can be awarded.\n     */\n    function _beaconPeriodRemainingSeconds() internal view returns (uint64) {\n        uint64 endAt = _beaconPeriodEndAt();\n        uint64 time = _currentTime();\n\n        if (endAt <= time) {\n            return 0;\n        }\n\n        return endAt - time;\n    }\n\n    /**\n     * @notice Returns whether the beacon period is over.\n     * @return True if the beacon period is over, false otherwise\n     */\n    function _isBeaconPeriodOver() internal view returns (bool) {\n        return _beaconPeriodEndAt() <= _currentTime();\n    }\n\n    /**\n     * @notice Check to see draw is in progress.\n     */\n    function _requireDrawNotStarted() internal view {\n        uint256 currentBlock = block.number;\n\n        require(\n            rngRequest.lockBlock == 0 || currentBlock < rngRequest.lockBlock,\n            \"DrawBeacon/rng-in-flight\"\n        );\n    }\n\n    /**\n     * @notice Set global DrawBuffer variable.\n     * @dev    All subsequent Draw requests/completions will be pushed to the new DrawBuffer.\n     * @param _newDrawBuffer  DrawBuffer address\n     * @return DrawBuffer\n     */\n    function _setDrawBuffer(IDrawBuffer _newDrawBuffer) internal returns (IDrawBuffer) {\n        IDrawBuffer _previousDrawBuffer = drawBuffer;\n        require(address(_newDrawBuffer) != address(0), \"DrawBeacon/draw-history-not-zero-address\");\n\n        require(\n            address(_newDrawBuffer) != address(_previousDrawBuffer),\n            \"DrawBeacon/existing-draw-history-address\"\n        );\n\n        drawBuffer = _newDrawBuffer;\n\n        emit DrawBufferUpdated(_newDrawBuffer);\n\n        return _newDrawBuffer;\n    }\n\n    /**\n     * @notice Sets the beacon period in seconds.\n     * @param _beaconPeriodSeconds The new beacon period in seconds.  Must be greater than zero.\n     */\n    function _setBeaconPeriodSeconds(uint32 _beaconPeriodSeconds) internal {\n        require(_beaconPeriodSeconds > 0, \"DrawBeacon/beacon-period-greater-than-zero\");\n        beaconPeriodSeconds = _beaconPeriodSeconds;\n\n        emit BeaconPeriodSecondsUpdated(_beaconPeriodSeconds);\n    }\n\n    /**\n     * @notice Sets the RNG request timeout in seconds.  This is the time that must elapsed before the RNG request can be cancelled and the pool unlocked.\n     * @param _rngTimeout The RNG request timeout in seconds.\n     */\n    function _setRngTimeout(uint32 _rngTimeout) internal {\n        require(_rngTimeout > 60, \"DrawBeacon/rng-timeout-gt-60-secs\");\n        rngTimeout = _rngTimeout;\n\n        emit RngTimeoutSet(_rngTimeout);\n    }\n}\n"
    },
    "contracts/test/RNGServiceMock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@pooltogether/pooltogether-rng-contracts/contracts/RNGInterface.sol\";\n\ncontract RNGServiceMock is RNGInterface {\n    uint256 internal random;\n    address internal feeToken;\n    uint256 internal requestFee;\n\n    function getLastRequestId() external pure override returns (uint32 requestId) {\n        return 1;\n    }\n\n    function setRequestFee(address _feeToken, uint256 _requestFee) external {\n        feeToken = _feeToken;\n        requestFee = _requestFee;\n    }\n\n    /// @return _feeToken\n    /// @return _requestFee\n    function getRequestFee()\n        external\n        view\n        override\n        returns (address _feeToken, uint256 _requestFee)\n    {\n        return (feeToken, requestFee);\n    }\n\n    function setRandomNumber(uint256 _random) external {\n        random = _random;\n    }\n\n    function requestRandomNumber() external pure override returns (uint32, uint32) {\n        return (1, 1);\n    }\n\n    function isRequestComplete(uint32) external pure override returns (bool) {\n        return true;\n    }\n\n    function randomNumber(uint32) external view override returns (uint256) {\n        return random;\n    }\n}\n"
    },
    "contracts/test/TicketHarness.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\nimport \"../Ticket.sol\";\n\ncontract TicketHarness is Ticket {\n    using SafeCast for uint256;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 decimals_,\n        address _controller\n    ) Ticket(_name, _symbol, decimals_, _controller) {}\n\n    function flashLoan(address _to, uint256 _amount) external {\n        _mint(_to, _amount);\n        _burn(_to, _amount);\n    }\n\n    function burn(address _from, uint256 _amount) external {\n        _burn(_from, _amount);\n    }\n\n    function mint(address _to, uint256 _amount) external {\n        _mint(_to, _amount);\n    }\n\n    function mintTwice(address _to, uint256 _amount) external {\n        _mint(_to, _amount);\n        _mint(_to, _amount);\n    }\n\n    /// @dev we need to use a different function name than `transfer`\n    /// otherwise it collides with the `transfer` function of the `ERC20` contract\n    function transferTo(\n        address _sender,\n        address _recipient,\n        uint256 _amount\n    ) external {\n        _transfer(_sender, _recipient, _amount);\n    }\n\n    function getBalanceTx(address _user, uint32 _target) external view returns (uint256) {\n        TwabLib.Account storage account = userTwabs[_user];\n\n        return\n            TwabLib.getBalanceAt(account.twabs, account.details, _target, uint32(block.timestamp));\n    }\n\n    function getAverageBalanceTx(\n        address _user,\n        uint32 _startTime,\n        uint32 _endTime\n    ) external view returns (uint256) {\n        TwabLib.Account storage account = userTwabs[_user];\n\n        return\n            TwabLib.getAverageBalanceBetween(\n                account.twabs,\n                account.details,\n                uint32(_startTime),\n                uint32(_endTime),\n                uint32(block.timestamp)\n            );\n    }\n}\n"
    },
    "contracts/test/libraries/VirtualCpmmLibHarness.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@prb/math/contracts/PRBMathSD59x18.sol\";\n\nimport \"../../libraries/VirtualCpmmLib.sol\";\n\ncontract VirtualCpmmLibHarness {\n  using SafeCast for uint256;\n\n  function newCpmm(\n    int256 maxSlippage,\n    int256 exchangeRate,\n    uint256 haveAmount\n  ) external pure returns (VirtualCpmmLib.Cpmm memory) {\n    return VirtualCpmmLib.newCpmm(\n        PRBMath.SD59x18(maxSlippage),\n        PRBMath.SD59x18(exchangeRate),\n        PRBMathSD59x18Typed.fromInt(haveAmount.toInt256())\n    );\n  }\n\n  // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n  function getAmountOut(uint amountIn, uint x, uint y) external pure returns (uint amountOut) {\n      return VirtualCpmmLib.getAmountOut(amountIn, x, y);\n  }\n\n  // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n  function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn) {\n      return VirtualCpmmLib.getAmountIn(amountOut, reserveIn, reserveOut);\n  }\n\n}\n"
    },
    "@prb/math/contracts/PRBMathSD59x18.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.4;\n\nimport \"./PRBMath.sol\";\n\n/// @title PRBMathSD59x18\n/// @author Paul Razvan Berg\n/// @notice Smart contract library for advanced fixed-point math that works with int256 numbers considered to have 18\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\nlibrary PRBMathSD59x18 {\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\n    int256 internal constant LOG2_E = 1_442695040888963407;\n\n    /// @dev Half the SCALE number.\n    int256 internal constant HALF_SCALE = 5e17;\n\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\n    int256 internal constant MAX_SD59x18 =\n        57896044618658097711785492504343953926634992332820282019728_792003956564819967;\n\n    /// @dev The maximum whole value a signed 59.18-decimal fixed-point number can have.\n    int256 internal constant MAX_WHOLE_SD59x18 =\n        57896044618658097711785492504343953926634992332820282019728_000000000000000000;\n\n    /// @dev The minimum value a signed 59.18-decimal fixed-point number can have.\n    int256 internal constant MIN_SD59x18 =\n        -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\n\n    /// @dev The minimum whole value a signed 59.18-decimal fixed-point number can have.\n    int256 internal constant MIN_WHOLE_SD59x18 =\n        -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\n\n    /// @dev How many trailing decimals can be represented.\n    int256 internal constant SCALE = 1e18;\n\n    /// INTERNAL FUNCTIONS ///\n\n    /// @notice Calculate the absolute value of x.\n    ///\n    /// @dev Requirements:\n    /// - x must be greater than MIN_SD59x18.\n    ///\n    /// @param x The number to calculate the absolute value for.\n    /// @param result The absolute value of x.\n    function abs(int256 x) internal pure returns (int256 result) {\n        unchecked {\n            if (x == MIN_SD59x18) {\n                revert PRBMathSD59x18__AbsInputTooSmall();\n            }\n            result = x < 0 ? -x : x;\n        }\n    }\n\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\n    /// @return result The arithmetic average as a signed 59.18-decimal fixed-point number.\n    function avg(int256 x, int256 y) internal pure returns (int256 result) {\n        // The operations can never overflow.\n        unchecked {\n            int256 sum = (x >> 1) + (y >> 1);\n            if (sum < 0) {\n                // If at least one of x and y is odd, we add 1 to the result. This is because shifting negative numbers to the\n                // right rounds down to infinity.\n                assembly {\n                    result := add(sum, and(or(x, y), 1))\n                }\n            } else {\n                // If both x and y are odd, we add 1 to the result. This is because if both numbers are odd, the 0.5\n                // remainder gets truncated twice.\n                result = sum + (x & y & 1);\n            }\n        }\n    }\n\n    /// @notice Yields the least greatest signed 59.18 decimal fixed-point number greater than or equal to x.\n    ///\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    ///\n    /// Requirements:\n    /// - x must be less than or equal to MAX_WHOLE_SD59x18.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number to ceil.\n    /// @param result The least integer greater than or equal to x, as a signed 58.18-decimal fixed-point number.\n    function ceil(int256 x) internal pure returns (int256 result) {\n        if (x > MAX_WHOLE_SD59x18) {\n            revert PRBMathSD59x18__CeilOverflow(x);\n        }\n        unchecked {\n            int256 remainder = x % SCALE;\n            if (remainder == 0) {\n                result = x;\n            } else {\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\n                result = x - remainder;\n                if (x > 0) {\n                    result += SCALE;\n                }\n            }\n        }\n    }\n\n    /// @notice Divides two signed 59.18-decimal fixed-point numbers, returning a new signed 59.18-decimal fixed-point number.\n    ///\n    /// @dev Variant of \"mulDiv\" that works with signed numbers. Works by computing the signs and the absolute values separately.\n    ///\n    /// Requirements:\n    /// - All from \"PRBMath.mulDiv\".\n    /// - None of the inputs can be MIN_SD59x18.\n    /// - The denominator cannot be zero.\n    /// - The result must fit within int256.\n    ///\n    /// Caveats:\n    /// - All from \"PRBMath.mulDiv\".\n    ///\n    /// @param x The numerator as a signed 59.18-decimal fixed-point number.\n    /// @param y The denominator as a signed 59.18-decimal fixed-point number.\n    /// @param result The quotient as a signed 59.18-decimal fixed-point number.\n    function div(int256 x, int256 y) internal pure returns (int256 result) {\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\n            revert PRBMathSD59x18__DivInputTooSmall();\n        }\n\n        // Get hold of the absolute values of x and y.\n        uint256 ax;\n        uint256 ay;\n        unchecked {\n            ax = x < 0 ? uint256(-x) : uint256(x);\n            ay = y < 0 ? uint256(-y) : uint256(y);\n        }\n\n        // Compute the absolute value of (x*SCALE)÷y. The result must fit within int256.\n        uint256 rAbs = PRBMath.mulDiv(ax, uint256(SCALE), ay);\n        if (rAbs > uint256(MAX_SD59x18)) {\n            revert PRBMathSD59x18__DivOverflow(rAbs);\n        }\n\n        // Get the signs of x and y.\n        uint256 sx;\n        uint256 sy;\n        assembly {\n            sx := sgt(x, sub(0, 1))\n            sy := sgt(y, sub(0, 1))\n        }\n\n        // XOR over sx and sy. This is basically checking whether the inputs have the same sign. If yes, the result\n        // should be positive. Otherwise, it should be negative.\n        result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\n    }\n\n    /// @notice Returns Euler's number as a signed 59.18-decimal fixed-point number.\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\n    function e() internal pure returns (int256 result) {\n        result = 2_718281828459045235;\n    }\n\n    /// @notice Calculates the natural exponent of x.\n    ///\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    /// - x must be less than 133.084258667509499441.\n    ///\n    /// Caveats:\n    /// - All from \"exp2\".\n    /// - For any x less than -41.446531673892822322, the result is zero.\n    ///\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function exp(int256 x) internal pure returns (int256 result) {\n        // Without this check, the value passed to \"exp2\" would be less than -59.794705707972522261.\n        if (x < -41_446531673892822322) {\n            return 0;\n        }\n\n        // Without this check, the value passed to \"exp2\" would be greater than 192.\n        if (x >= 133_084258667509499441) {\n            revert PRBMathSD59x18__ExpInputTooBig(x);\n        }\n\n        // Do the fixed-point multiplication inline to save gas.\n        unchecked {\n            int256 doubleScaleProduct = x * LOG2_E;\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\n        }\n    }\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    ///\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\n    ///\n    /// Requirements:\n    /// - x must be 192 or less.\n    /// - The result must fit within MAX_SD59x18.\n    ///\n    /// Caveats:\n    /// - For any x less than -59.794705707972522261, the result is zero.\n    ///\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function exp2(int256 x) internal pure returns (int256 result) {\n        // This works because 2^(-x) = 1/2^x.\n        if (x < 0) {\n            // 2^59.794705707972522262 is the maximum number whose inverse does not truncate down to zero.\n            if (x < -59_794705707972522261) {\n                return 0;\n            }\n\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\n            unchecked {\n                result = 1e36 / exp2(-x);\n            }\n        } else {\n            // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\n            if (x >= 192e18) {\n                revert PRBMathSD59x18__Exp2InputTooBig(x);\n            }\n\n            unchecked {\n                // Convert x to the 192.64-bit fixed-point format.\n                uint256 x192x64 = (uint256(x) << 64) / uint256(SCALE);\n\n                // Safe to convert the result to int256 directly because the maximum input allowed is 192.\n                result = int256(PRBMath.exp2(x192x64));\n            }\n        }\n    }\n\n    /// @notice Yields the greatest signed 59.18 decimal fixed-point number less than or equal to x.\n    ///\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    ///\n    /// Requirements:\n    /// - x must be greater than or equal to MIN_WHOLE_SD59x18.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number to floor.\n    /// @param result The greatest integer less than or equal to x, as a signed 58.18-decimal fixed-point number.\n    function floor(int256 x) internal pure returns (int256 result) {\n        if (x < MIN_WHOLE_SD59x18) {\n            revert PRBMathSD59x18__FloorUnderflow(x);\n        }\n        unchecked {\n            int256 remainder = x % SCALE;\n            if (remainder == 0) {\n                result = x;\n            } else {\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\n                result = x - remainder;\n                if (x < 0) {\n                    result -= SCALE;\n                }\n            }\n        }\n    }\n\n    /// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right\n    /// of the radix point for negative numbers.\n    /// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\n    /// @param x The signed 59.18-decimal fixed-point number to get the fractional part of.\n    /// @param result The fractional part of x as a signed 59.18-decimal fixed-point number.\n    function frac(int256 x) internal pure returns (int256 result) {\n        unchecked {\n            result = x % SCALE;\n        }\n    }\n\n    /// @notice Converts a number from basic integer form to signed 59.18-decimal fixed-point representation.\n    ///\n    /// @dev Requirements:\n    /// - x must be greater than or equal to MIN_SD59x18 divided by SCALE.\n    /// - x must be less than or equal to MAX_SD59x18 divided by SCALE.\n    ///\n    /// @param x The basic integer to convert.\n    /// @param result The same number in signed 59.18-decimal fixed-point representation.\n    function fromInt(int256 x) internal pure returns (int256 result) {\n        unchecked {\n            if (x < MIN_SD59x18 / SCALE) {\n                revert PRBMathSD59x18__FromIntUnderflow(x);\n            }\n            if (x > MAX_SD59x18 / SCALE) {\n                revert PRBMathSD59x18__FromIntOverflow(x);\n            }\n            result = x * SCALE;\n        }\n    }\n\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\n    ///\n    /// @dev Requirements:\n    /// - x * y must fit within MAX_SD59x18, lest it overflows.\n    /// - x * y cannot be negative.\n    ///\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function gm(int256 x, int256 y) internal pure returns (int256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        unchecked {\n            // Checking for overflow this way is faster than letting Solidity do it.\n            int256 xy = x * y;\n            if (xy / x != y) {\n                revert PRBMathSD59x18__GmOverflow(x, y);\n            }\n\n            // The product cannot be negative.\n            if (xy < 0) {\n                revert PRBMathSD59x18__GmNegativeProduct(x, y);\n            }\n\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\n            // during multiplication. See the comments within the \"sqrt\" function.\n            result = int256(PRBMath.sqrt(uint256(xy)));\n        }\n    }\n\n    /// @notice Calculates 1 / x, rounding toward zero.\n    ///\n    /// @dev Requirements:\n    /// - x cannot be zero.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the inverse.\n    /// @return result The inverse as a signed 59.18-decimal fixed-point number.\n    function inv(int256 x) internal pure returns (int256 result) {\n        unchecked {\n            // 1e36 is SCALE * SCALE.\n            result = 1e36 / x;\n        }\n    }\n\n    /// @notice Calculates the natural logarithm of x.\n    ///\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    /// - This doesn't return exactly 1 for 2718281828459045235, for that we would need more fine-grained precision.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the natural logarithm.\n    /// @return result The natural logarithm as a signed 59.18-decimal fixed-point number.\n    function ln(int256 x) internal pure returns (int256 result) {\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\n        // can return is 195205294292027477728.\n        unchecked {\n            result = (log2(x) * SCALE) / LOG2_E;\n        }\n    }\n\n    /// @notice Calculates the common logarithm of x.\n    ///\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the common logarithm.\n    /// @return result The common logarithm as a signed 59.18-decimal fixed-point number.\n    function log10(int256 x) internal pure returns (int256 result) {\n        if (x <= 0) {\n            revert PRBMathSD59x18__LogInputTooSmall(x);\n        }\n\n        // Note that the \"mul\" in this block is the assembly mul operation, not the \"mul\" function defined in this contract.\n        // prettier-ignore\n        assembly {\n            switch x\n            case 1 { result := mul(SCALE, sub(0, 18)) }\n            case 10 { result := mul(SCALE, sub(1, 18)) }\n            case 100 { result := mul(SCALE, sub(2, 18)) }\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\n            case 1000000000000000000 { result := 0 }\n            case 10000000000000000000 { result := SCALE }\n            case 100000000000000000000 { result := mul(SCALE, 2) }\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\n            default {\n                result := MAX_SD59x18\n            }\n        }\n\n        if (result == MAX_SD59x18) {\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\n            unchecked {\n                result = (log2(x) * SCALE) / 3_321928094887362347;\n            }\n        }\n    }\n\n    /// @notice Calculates the binary logarithm of x.\n    ///\n    /// @dev Based on the iterative approximation algorithm.\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\n    ///\n    /// Requirements:\n    /// - x must be greater than zero.\n    ///\n    /// Caveats:\n    /// - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the binary logarithm.\n    /// @return result The binary logarithm as a signed 59.18-decimal fixed-point number.\n    function log2(int256 x) internal pure returns (int256 result) {\n        if (x <= 0) {\n            revert PRBMathSD59x18__LogInputTooSmall(x);\n        }\n        unchecked {\n            // This works because log2(x) = -log2(1/x).\n            int256 sign;\n            if (x >= SCALE) {\n                sign = 1;\n            } else {\n                sign = -1;\n                // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\n                assembly {\n                    x := div(1000000000000000000000000000000000000, x)\n                }\n            }\n\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\n            uint256 n = PRBMath.mostSignificantBit(uint256(x / SCALE));\n\n            // The integer part of the logarithm as a signed 59.18-decimal fixed-point number. The operation can't overflow\n            // because n is maximum 255, SCALE is 1e18 and sign is either 1 or -1.\n            result = int256(n) * SCALE;\n\n            // This is y = x * 2^(-n).\n            int256 y = x >> n;\n\n            // If y = 1, the fractional part is zero.\n            if (y == SCALE) {\n                return result * sign;\n            }\n\n            // Calculate the fractional part via the iterative approximation.\n            // The \"delta >>= 1\" part is equivalent to \"delta /= 2\", but shifting bits is faster.\n            for (int256 delta = int256(HALF_SCALE); delta > 0; delta >>= 1) {\n                y = (y * y) / SCALE;\n\n                // Is y^2 > 2 and so in the range [2,4)?\n                if (y >= 2 * SCALE) {\n                    // Add the 2^(-m) factor to the logarithm.\n                    result += delta;\n\n                    // Corresponds to z/2 on Wikipedia.\n                    y >>= 1;\n                }\n            }\n            result *= sign;\n        }\n    }\n\n    /// @notice Multiplies two signed 59.18-decimal fixed-point numbers together, returning a new signed 59.18-decimal\n    /// fixed-point number.\n    ///\n    /// @dev Variant of \"mulDiv\" that works with signed numbers and employs constant folding, i.e. the denominator is\n    /// always 1e18.\n    ///\n    /// Requirements:\n    /// - All from \"PRBMath.mulDivFixedPoint\".\n    /// - None of the inputs can be MIN_SD59x18\n    /// - The result must fit within MAX_SD59x18.\n    ///\n    /// Caveats:\n    /// - The body is purposely left uncommented; see the NatSpec comments in \"PRBMath.mulDiv\" to understand how this works.\n    ///\n    /// @param x The multiplicand as a signed 59.18-decimal fixed-point number.\n    /// @param y The multiplier as a signed 59.18-decimal fixed-point number.\n    /// @return result The product as a signed 59.18-decimal fixed-point number.\n    function mul(int256 x, int256 y) internal pure returns (int256 result) {\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\n            revert PRBMathSD59x18__MulInputTooSmall();\n        }\n\n        unchecked {\n            uint256 ax;\n            uint256 ay;\n            ax = x < 0 ? uint256(-x) : uint256(x);\n            ay = y < 0 ? uint256(-y) : uint256(y);\n\n            uint256 rAbs = PRBMath.mulDivFixedPoint(ax, ay);\n            if (rAbs > uint256(MAX_SD59x18)) {\n                revert PRBMathSD59x18__MulOverflow(rAbs);\n            }\n\n            uint256 sx;\n            uint256 sy;\n            assembly {\n                sx := sgt(x, sub(0, 1))\n                sy := sgt(y, sub(0, 1))\n            }\n            result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\n        }\n    }\n\n    /// @notice Returns PI as a signed 59.18-decimal fixed-point number.\n    function pi() internal pure returns (int256 result) {\n        result = 3_141592653589793238;\n    }\n\n    /// @notice Raises x to the power of y.\n    ///\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\n    ///\n    /// Requirements:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    /// - z cannot be zero.\n    ///\n    /// Caveats:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x Number to raise to given power y, as a signed 59.18-decimal fixed-point number.\n    /// @param y Exponent to raise x to, as a signed 59.18-decimal fixed-point number.\n    /// @return result x raised to power y, as a signed 59.18-decimal fixed-point number.\n    function pow(int256 x, int256 y) internal pure returns (int256 result) {\n        if (x == 0) {\n            result = y == 0 ? SCALE : int256(0);\n        } else {\n            result = exp2(mul(log2(x), y));\n        }\n    }\n\n    /// @notice Raises x (signed 59.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\n    /// famous algorithm \"exponentiation by squaring\".\n    ///\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    ///\n    /// Requirements:\n    /// - All from \"abs\" and \"PRBMath.mulDivFixedPoint\".\n    /// - The result must fit within MAX_SD59x18.\n    ///\n    /// Caveats:\n    /// - All from \"PRBMath.mulDivFixedPoint\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x The base as a signed 59.18-decimal fixed-point number.\n    /// @param y The exponent as an uint256.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function powu(int256 x, uint256 y) internal pure returns (int256 result) {\n        uint256 xAbs = uint256(abs(x));\n\n        // Calculate the first iteration of the loop in advance.\n        uint256 rAbs = y & 1 > 0 ? xAbs : uint256(SCALE);\n\n        // Equivalent to \"for(y /= 2; y > 0; y /= 2)\" but faster.\n        uint256 yAux = y;\n        for (yAux >>= 1; yAux > 0; yAux >>= 1) {\n            xAbs = PRBMath.mulDivFixedPoint(xAbs, xAbs);\n\n            // Equivalent to \"y % 2 == 1\" but faster.\n            if (yAux & 1 > 0) {\n                rAbs = PRBMath.mulDivFixedPoint(rAbs, xAbs);\n            }\n        }\n\n        // The result must fit within the 59.18-decimal fixed-point representation.\n        if (rAbs > uint256(MAX_SD59x18)) {\n            revert PRBMathSD59x18__PowuOverflow(rAbs);\n        }\n\n        // Is the base negative and the exponent an odd number?\n        bool isNegative = x < 0 && y & 1 == 1;\n        result = isNegative ? -int256(rAbs) : int256(rAbs);\n    }\n\n    /// @notice Returns 1 as a signed 59.18-decimal fixed-point number.\n    function scale() internal pure returns (int256 result) {\n        result = SCALE;\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Requirements:\n    /// - x cannot be negative.\n    /// - x must be less than MAX_SD59x18 / SCALE.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the square root.\n    /// @return result The result as a signed 59.18-decimal fixed-point .\n    function sqrt(int256 x) internal pure returns (int256 result) {\n        unchecked {\n            if (x < 0) {\n                revert PRBMathSD59x18__SqrtNegativeInput(x);\n            }\n            if (x > MAX_SD59x18 / SCALE) {\n                revert PRBMathSD59x18__SqrtOverflow(x);\n            }\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two signed\n            // 59.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\n            result = int256(PRBMath.sqrt(uint256(x * SCALE)));\n        }\n    }\n\n    /// @notice Converts a signed 59.18-decimal fixed-point number to basic integer form, rounding down in the process.\n    /// @param x The signed 59.18-decimal fixed-point number to convert.\n    /// @return result The same number in basic integer form.\n    function toInt(int256 x) internal pure returns (int256 result) {\n        unchecked {\n            result = x / SCALE;\n        }\n    }\n}\n"
    },
    "contracts/test/libraries/LiquidatorLibHarness.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"../../libraries/LiquidatorLib.sol\";\n\ncontract LiquidatorLibHarness {\n  using LiquidatorLib for LiquidatorLib.State;\n  using SafeMath for uint256;\n  using SafeCast for uint256;\n  using PRBMathSD59x18Typed for PRBMath.SD59x18;\n\n  LiquidatorLib.State public state;\n\n  event SwapResult(\n    uint256 amount\n  );\n\n  function setState(\n    int256 exchangeRate,\n    uint256 lastSaleTime,\n    int256 deltaRatePerSecond,\n    int256 maxSlippage\n  ) external {\n    state = LiquidatorLib.State({\n      exchangeRate: PRBMath.SD59x18(exchangeRate),\n      lastSaleTime: lastSaleTime,\n      deltaRatePerSecond: PRBMath.SD59x18(deltaRatePerSecond),\n      maxSlippage: PRBMath.SD59x18(maxSlippage)\n    });\n  }\n\n  function computeExchangeRate(uint256 _currentTime) external view returns (int256) {\n    return state.computeExchangeRate(_currentTime).value;\n  }\n\n  function computeExactAmountInAtTime(uint256 availableBalance, uint256 amountOut, uint256 currentTime) external view returns (uint256) {\n    return state.computeExactAmountInAtTime(availableBalance, amountOut, currentTime);\n  }\n\n  function computeExactAmountOutAtTime(uint256 availableBalance, uint256 amountIn, uint256 currentTime) external view returns (uint256) {\n    return state.computeExactAmountOutAtTime(availableBalance, amountIn, currentTime);\n  }\n\n  function swapExactAmountInAtTime(\n    uint256 availableBalance,\n    uint256 amountIn,\n    uint256 currentTime\n  ) external returns (uint256) {\n    uint256 result = state.swapExactAmountInAtTime(availableBalance, amountIn, currentTime);\n    emit SwapResult(result);\n    return result;\n  }\n\n  function swapExactAmountOutAtTime(\n    uint256 availableBalance,\n    uint256 amountOut,\n    uint256 currentTime\n  ) external returns (uint256) {\n    uint256 result = state.swapExactAmountOutAtTime(availableBalance, amountOut, currentTime);\n    emit SwapResult(result);\n    return result;\n  }\n}\n"
    },
    "contracts/test/libraries/ObservationLibHarness.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"../../libraries/ObservationLib.sol\";\n\n/// @title Time-Weighted Average Balance Library\n/// @notice This library allows you to efficiently track a user's historic balance.  You can get a\n/// @author PoolTogether Inc.\ncontract ObservationLibHarness {\n    /// @notice The maximum number of twab entries\n    uint24 public constant MAX_CARDINALITY = 16777215; // 2**24\n\n    ObservationLib.Observation[MAX_CARDINALITY] observations;\n\n    function setObservations(ObservationLib.Observation[] calldata _observations) external {\n        for (uint256 i = 0; i < _observations.length; i++) {\n            observations[i] = _observations[i];\n        }\n    }\n\n    function binarySearch(\n        uint24 _observationIndex,\n        uint24 _oldestObservationIndex,\n        uint32 _target,\n        uint24 _cardinality,\n        uint32 _time\n    )\n        external\n        view\n        returns (\n            ObservationLib.Observation memory beforeOrAt,\n            ObservationLib.Observation memory atOrAfter\n        )\n    {\n        return\n            ObservationLib.binarySearch(\n                observations,\n                _observationIndex,\n                _oldestObservationIndex,\n                _target,\n                _cardinality,\n                _time\n            );\n    }\n}\n"
    },
    "contracts/test/libraries/OverflowSafeComparatorLibHarness.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"../../libraries/OverflowSafeComparatorLib.sol\";\n\ncontract OverflowSafeComparatorLibHarness {\n    using OverflowSafeComparatorLib for uint32;\n\n    function ltHarness(\n        uint32 _a,\n        uint32 _b,\n        uint32 _timestamp\n    ) external pure returns (bool) {\n        return _a.lt(_b, _timestamp);\n    }\n\n    function lteHarness(\n        uint32 _a,\n        uint32 _b,\n        uint32 _timestamp\n    ) external pure returns (bool) {\n        return _a.lte(_b, _timestamp);\n    }\n\n    function checkedSub(\n        uint256 _a,\n        uint256 _b,\n        uint256 _timestamp\n    ) external pure returns (uint32) {\n        return uint32(_a).checkedSub(uint32(_b), uint32(_timestamp));\n    }\n}\n"
    },
    "contracts/permit/EIP2612PermitAndDeposit.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../interfaces/IPrizePool.sol\";\nimport \"../interfaces/ITicket.sol\";\n\n/**\n * @notice Secp256k1 signature values.\n * @param deadline Timestamp at which the signature expires\n * @param v `v` portion of the signature\n * @param r `r` portion of the signature\n * @param s `s` portion of the signature\n */\nstruct Signature {\n    uint256 deadline;\n    uint8 v;\n    bytes32 r;\n    bytes32 s;\n}\n\n/**\n * @notice Delegate signature to allow delegation of tickets to delegate.\n * @param delegate Address to delegate the prize pool tickets to\n * @param signature Delegate signature\n */\nstruct DelegateSignature {\n    address delegate;\n    Signature signature;\n}\n\n/// @title Allows users to approve and deposit EIP-2612 compatible tokens into a prize pool in a single transaction.\n/// @custom:experimental This contract has not been fully audited yet.\ncontract EIP2612PermitAndDeposit {\n    using SafeERC20 for IERC20;\n\n    /**\n     * @notice Permits this contract to spend on a user's behalf and deposits into the prize pool.\n     * @dev The `spender` address required by the permit function is the address of this contract.\n     * @param _prizePool Address of the prize pool to deposit into\n     * @param _amount Amount of tokens to deposit into the prize pool\n     * @param _to Address that will receive the tickets\n     * @param _permitSignature Permit signature\n     * @param _delegateSignature Delegate signature\n     */\n    function permitAndDepositToAndDelegate(\n        IPrizePool _prizePool,\n        uint256 _amount,\n        address _to,\n        Signature calldata _permitSignature,\n        DelegateSignature calldata _delegateSignature\n    ) external {\n        ITicket _ticket = _prizePool.getTicket();\n        address _token = _prizePool.getToken();\n\n        IERC20Permit(_token).permit(\n            msg.sender,\n            address(this),\n            _amount,\n            _permitSignature.deadline,\n            _permitSignature.v,\n            _permitSignature.r,\n            _permitSignature.s\n        );\n\n        _depositToAndDelegate(\n            address(_prizePool),\n            _ticket,\n            _token,\n            _amount,\n            _to,\n            _delegateSignature\n        );\n    }\n\n    /**\n     * @notice Deposits user's token into the prize pool and delegate tickets.\n     * @param _prizePool Address of the prize pool to deposit into\n     * @param _amount Amount of tokens to deposit into the prize pool\n     * @param _to Address that will receive the tickets\n     * @param _delegateSignature Delegate signature\n     */\n    function depositToAndDelegate(\n        IPrizePool _prizePool,\n        uint256 _amount,\n        address _to,\n        DelegateSignature calldata _delegateSignature\n    ) external {\n        ITicket _ticket = _prizePool.getTicket();\n        address _token = _prizePool.getToken();\n\n        _depositToAndDelegate(\n            address(_prizePool),\n            _ticket,\n            _token,\n            _amount,\n            _to,\n            _delegateSignature\n        );\n    }\n\n    /**\n     * @notice Deposits user's token into the prize pool and delegate tickets.\n     * @param _prizePool Address of the prize pool to deposit into\n     * @param _ticket Address of the ticket minted by the prize pool\n     * @param _token Address of the token used to deposit into the prize pool\n     * @param _amount Amount of tokens to deposit into the prize pool\n     * @param _to Address that will receive the tickets\n     * @param _delegateSignature Delegate signature\n     */\n    function _depositToAndDelegate(\n        address _prizePool,\n        ITicket _ticket,\n        address _token,\n        uint256 _amount,\n        address _to,\n        DelegateSignature calldata _delegateSignature\n    ) internal {\n        _depositTo(_token, msg.sender, _amount, _prizePool, _to);\n\n        Signature memory signature = _delegateSignature.signature;\n\n        _ticket.delegateWithSignature(\n            _to,\n            _delegateSignature.delegate,\n            signature.deadline,\n            signature.v,\n            signature.r,\n            signature.s\n        );\n    }\n\n    /**\n     * @notice Deposits user's token into the prize pool.\n     * @param _token Address of the EIP-2612 token to approve and deposit\n     * @param _owner Token owner's address (Authorizer)\n     * @param _amount Amount of tokens to deposit\n     * @param _prizePool Address of the prize pool to deposit into\n     * @param _to Address that will receive the tickets\n     */\n    function _depositTo(\n        address _token,\n        address _owner,\n        uint256 _amount,\n        address _prizePool,\n        address _to\n    ) internal {\n        IERC20(_token).safeTransferFrom(_owner, address(this), _amount);\n        IERC20(_token).safeIncreaseAllowance(_prizePool, _amount);\n        IPrizePool(_prizePool).depositTo(_to, _amount);\n    }\n}\n"
    },
    "contracts/test/EIP2612PermitMintable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\n\n/**\n * @dev Extension of {ERC20Permit} that adds a set of accounts with the {MinterRole},\n * which have permission to mint (create) new tokens as they see fit.\n *\n * At construction, the deployer of the contract is the only minter.\n */\ncontract EIP2612PermitMintable is ERC20Permit {\n    constructor(string memory _name, string memory _symbol)\n        ERC20(_name, _symbol)\n        ERC20Permit(_name)\n    {}\n\n    /**\n     * @dev See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the {MinterRole}.\n     */\n    function mint(address account, uint256 amount) public returns (bool) {\n        _mint(account, amount);\n        return true;\n    }\n\n    function burn(address account, uint256 amount) public returns (bool) {\n        _burn(account, amount);\n        return true;\n    }\n\n    function masterTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) public {\n        _transfer(from, to, amount);\n    }\n}\n"
    },
    "contracts/prize-pool/StakePrizePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./PrizePool.sol\";\n\n/**\n * @title  PoolTogether V4 StakePrizePool\n * @author PoolTogether Inc Team\n * @notice The Stake Prize Pool is a prize pool in which users can deposit an ERC20 token.\n *         These tokens are simply held by the Stake Prize Pool and become eligible for prizes.\n *         Prizes are added manually by the Stake Prize Pool owner and are distributed to users at the end of the prize period.\n */\ncontract StakePrizePool is PrizePool {\n    /// @notice Address of the stake token.\n    IERC20 private stakeToken;\n\n    /// @dev Emitted when stake prize pool is deployed.\n    /// @param stakeToken Address of the stake token.\n    event Deployed(IERC20 indexed stakeToken);\n\n    /// @notice Deploy the Stake Prize Pool\n    /// @param _owner Address of the Stake Prize Pool owner\n    /// @param _stakeToken Address of the stake token\n    constructor(address _owner, IERC20 _stakeToken) PrizePool(_owner) {\n        require(address(_stakeToken) != address(0), \"StakePrizePool/stake-token-not-zero-address\");\n        stakeToken = _stakeToken;\n\n        emit Deployed(_stakeToken);\n    }\n\n    /// @notice Determines whether the passed token can be transferred out as an external award.\n    /// @dev Different yield sources will hold the deposits as another kind of token: such a Compound's cToken.  The\n    /// prize strategy should not be allowed to move those tokens.\n    /// @param _externalToken The address of the token to check\n    /// @return True if the token may be awarded, false otherwise\n    function _canAwardExternal(address _externalToken) internal view override returns (bool) {\n        return address(stakeToken) != _externalToken;\n    }\n\n    /// @notice Returns the total balance (in asset tokens).  This includes the deposits and interest.\n    /// @return The underlying balance of asset tokens\n    function _balance() internal view override returns (uint256) {\n        return stakeToken.balanceOf(address(this));\n    }\n\n    /// @notice Returns the address of the ERC20 asset token used for deposits.\n    /// @return Address of the ERC20 asset token.\n    function _token() internal view override returns (IERC20) {\n        return stakeToken;\n    }\n\n    /// @notice Supplies asset tokens to the yield source.\n    /// @param _mintAmount The amount of asset tokens to be supplied\n    function _supply(uint256 _mintAmount) internal pure override {\n        // no-op because nothing else needs to be done\n    }\n\n    /// @notice Redeems asset tokens from the yield source.\n    /// @param _redeemAmount The amount of yield-bearing tokens to be redeemed\n    /// @return The actual amount of tokens that were redeemed.\n    function _redeem(uint256 _redeemAmount) internal pure override returns (uint256) {\n        return _redeemAmount;\n    }\n}\n"
    },
    "contracts/interfaces/IVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title  PoolTogether V4 IVault\n * @author PoolTogether Inc Team\n * @notice The GaugeReward interface.\n */\ninterface IVault {\n    /**\n     * @notice Decrease allowance of ERC20 tokens held by this contract.\n     * @dev Only callable by the owner or asset manager.\n     * @dev Current allowance should be computed off-chain to avoid any underflow.\n     * @param token Address of the ERC20 token to decrease allowance for\n     * @param spender Address of the spender of the tokens\n     * @param amount Amount of tokens to decrease allowance by\n     */\n    function decreaseERC20Allowance(\n        IERC20 token,\n        address spender,\n        uint256 amount\n    ) external;\n\n    /**\n     * @notice Increase allowance of ERC20 tokens held by this contract.\n     * @dev Only callable by the owner or asset manager.\n     * @dev Current allowance should be computed off-chain to avoid any overflow.\n     * @param token Address of the ERC20 token to increase allowance for\n     * @param spender Address of the spender of the tokens\n     * @param amount Amount of tokens to increase allowance by\n     */\n    function increaseERC20Allowance(\n        IERC20 token,\n        address spender,\n        uint256 amount\n    ) external;\n}\n"
    },
    "contracts/external/compound/CTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface CTokenInterface is IERC20 {\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view override returns (uint256);\n\n    function underlying() external view returns (address);\n\n    function balanceOfUnderlying(address owner) external returns (uint256);\n\n    function supplyRatePerBlock() external returns (uint256);\n\n    function exchangeRateCurrent() external returns (uint256);\n\n    function mint(uint256 mintAmount) external returns (uint256);\n\n    function redeem(uint256 amount) external returns (uint256);\n\n    function balanceOf(address user) external view override returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n}\n"
    },
    "contracts/test/ERC721Mintable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\n/**\n * @dev Extension of {ERC721} for Minting/Burning\n */\ncontract ERC721Mintable is ERC721 {\n    constructor() ERC721(\"ERC 721\", \"NFT\") {}\n\n    /**\n     * @dev See {ERC721-_mint}.\n     */\n    function mint(address to, uint256 tokenId) public {\n        _mint(to, tokenId);\n    }\n\n    /**\n     * @dev See {ERC721-_burn}.\n     */\n    function burn(uint256 tokenId) public {\n        _burn(tokenId);\n    }\n}\n"
    },
    "@pooltogether/yield-source-interface/contracts/test/MockYieldSource.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.6.0;\n\nimport \"../IYieldSource.sol\";\nimport \"./ERC20Mintable.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\n * which have permission to mint (create) new tokens as they see fit.\n *\n * At construction, the deployer of the contract is the only minter.\n */\ncontract MockYieldSource is ERC20, IYieldSource {\n    ERC20Mintable public token;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) ERC20(\"YIELD\", \"YLD\", 18) {\n        token = new ERC20Mintable(_name, _symbol, _decimals);\n    }\n\n    function yield(uint256 amount) external {\n        token.mint(address(this), amount);\n    }\n\n    /// @notice Returns the ERC20 asset token used for deposits.\n    /// @return The ERC20 asset token address.\n    function depositToken() external view override returns (address) {\n        return address(token);\n    }\n\n    /// @notice Returns the total balance (in asset tokens).  This includes the deposits and interest.\n    /// @return The underlying balance of asset tokens.\n    function balanceOfToken(address addr) external view override returns (uint256) {\n        return sharesToTokens(balanceOf(addr));\n    }\n\n    /// @notice Supplies tokens to the yield source.  Allows assets to be supplied on other user's behalf using the `to` param.\n    /// @param amount The amount of asset tokens to be supplied.  Denominated in `depositToken()` as above.\n    /// @param to The user whose balance will receive the tokens\n    function supplyTokenTo(uint256 amount, address to) external override {\n        uint256 shares = tokensToShares(amount);\n        token.transferFrom(msg.sender, address(this), amount);\n        _mint(to, shares);\n    }\n\n    /// @notice Redeems tokens from the yield source.\n    /// @param amount The amount of asset tokens to withdraw.  Denominated in `depositToken()` as above.\n    /// @return The actual amount of interst bearing tokens that were redeemed.\n    function redeemToken(uint256 amount) external override returns (uint256) {\n        uint256 shares = tokensToShares(amount);\n        _burn(msg.sender, shares);\n        token.transfer(msg.sender, amount);\n\n        return amount;\n    }\n\n    function tokensToShares(uint256 tokens) public view returns (uint256) {\n        uint256 tokenBalance = token.balanceOf(address(this));\n\n        if (tokenBalance == 0) {\n            return tokens;\n        } else {\n            return (tokens * totalSupply()) / tokenBalance;\n        }\n    }\n\n    function sharesToTokens(uint256 shares) public view returns (uint256) {\n        uint256 supply = totalSupply();\n\n        if (supply == 0) {\n            return shares;\n        } else {\n            return (shares * token.balanceOf(address(this))) / supply;\n        }\n    }\n}\n"
    },
    "@pooltogether/yield-source-interface/contracts/test/ERC20Mintable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.6.0;\n\nimport \"./ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\n * which have permission to mint (create) new tokens as they see fit.\n *\n * At construction, the deployer of the contract is the only minter.\n */\ncontract ERC20Mintable is ERC20 {\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) ERC20(_name, _symbol, _decimals) {}\n\n    /**\n     * @dev See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the {MinterRole}.\n     */\n    function mint(address account, uint256 amount) public returns (bool) {\n        _mint(account, amount);\n        return true;\n    }\n\n    function burn(address account, uint256 amount) public returns (bool) {\n        _burn(account, amount);\n        return true;\n    }\n\n    function masterTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) public {\n        _transfer(from, to, amount);\n    }\n}\n"
    },
    "@pooltogether/yield-source-interface/contracts/test/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * NOTE: Copied from OpenZeppelin\n *\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][msg.sender];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, msg.sender, currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        uint256 currentAllowance = _allowances[msg.sender][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(msg.sender, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    uint256[45] private __gap;\n}\n"
    },
    "contracts/hardhat-dependency-compiler/@pooltogether/yield-source-interface/contracts/test/MockYieldSource.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@pooltogether/yield-source-interface/contracts/test/MockYieldSource.sol';\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "evmVersion": "berlin",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}