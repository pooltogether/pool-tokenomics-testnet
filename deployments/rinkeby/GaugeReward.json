{
  "address": "0xfc0E5d492cd1f3C18401c3FCEe8F7B25CAf025c7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IGaugeController",
          "name": "_gaugeController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidator",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_stakerCut",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IGaugeController",
          "name": "gaugeController",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "stakerCut",
          "type": "uint32"
        }
      ],
      "name": "Deployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RewardTokenPushed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakerRewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exchangeRate",
          "type": "uint256"
        }
      ],
      "name": "RewardsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exchangeRate",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsRedeemed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_oldStakeBalance",
          "type": "uint256"
        }
      ],
      "name": "afterDecreaseGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_oldStakeBalance",
          "type": "uint256"
        }
      ],
      "name": "afterIncreaseGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPrizePool",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract ITicket",
          "name": "_ticket",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "afterSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            }
          ],
          "internalType": "struct GaugeReward.RewardToken",
          "name": "_rewardToken",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "claimAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "currentRewardToken",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            }
          ],
          "internalType": "struct GaugeReward.RewardToken",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gaugeController",
      "outputs": [
        {
          "internalType": "contract IGaugeController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "gaugeRewardTokenExchangeRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gaugeRewardTokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            }
          ],
          "internalType": "struct GaugeReward.RewardToken",
          "name": "_rewardToken",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakerCut",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "userGaugeRewardTokenExchangeRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userGaugeRewardTokenLastClaimedTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardTokenBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2aa8e6c5f67b74cd48d759ded8ae58c1ec3a1c674fbbbe9eb8287f679c163e08",
  "receipt": {
    "to": null,
    "from": "0x3A791e828fDd420fbE16416efDF509E4b9088Dd4",
    "contractAddress": "0xfc0E5d492cd1f3C18401c3FCEe8F7B25CAf025c7",
    "transactionIndex": 3,
    "gasUsed": "1618312",
    "logsBloom": "0x
    "blockHash": "0x7feeb2b408a2c373d32c4bbbf4426671769da143e71557c1fa45bebf5aaeeea3",
    "transactionHash": "0x2aa8e6c5f67b74cd48d759ded8ae58c1ec3a1c674fbbbe9eb8287f679c163e08",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 10807284,
        "transactionHash": "0x2aa8e6c5f67b74cd48d759ded8ae58c1ec3a1c674fbbbe9eb8287f679c163e08",
        "address": "0xfc0E5d492cd1f3C18401c3FCEe8F7B25CAf025c7",
        "topics": [
          "0x048ccaf1264df58374a01de5614345aa417e2d16af0f2e86b97729dc752e253f",
          "0x000000000000000000000000d40c3806ba42b4d5d1082321a6b30f9481b45412",
          "0x0000000000000000000000006bc0301c159306ff06e4039660f169aed458c13d",
          "0x0000000000000000000000000c8a87436dd0f97f28bf46f330802dfd36aab155"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000005f5e100",
        "logIndex": 6,
        "blockHash": "0x7feeb2b408a2c373d32c4bbbf4426671769da143e71557c1fa45bebf5aaeeea3"
      }
    ],
    "blockNumber": 10807284,
    "cumulativeGasUsed": "1994392",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD40C3806BA42b4D5D1082321a6b30f9481b45412",
    "0x6BC0301c159306FF06E4039660F169aed458C13D",
    "0x0C8a87436dd0f97F28bF46F330802DfD36aAB155",
    "100000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "46a7ec46315ece58f9d4c4ea7316a87f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IGaugeController\",\"name\":\"_gaugeController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_stakerCut\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IGaugeController\",\"name\":\"gaugeController\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"stakerCut\",\"type\":\"uint32\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RewardTokenPushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakerRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"}],\"name\":\"RewardsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsRedeemed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_oldStakeBalance\",\"type\":\"uint256\"}],\"name\":\"afterDecreaseGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_oldStakeBalance\",\"type\":\"uint256\"}],\"name\":\"afterIncreaseGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPrizePool\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract ITicket\",\"name\":\"_ticket\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"afterSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"internalType\":\"struct GaugeReward.RewardToken\",\"name\":\"_rewardToken\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"currentRewardToken\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"internalType\":\"struct GaugeReward.RewardToken\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeController\",\"outputs\":[{\"internalType\":\"contract IGaugeController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"gaugeRewardTokenExchangeRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gaugeRewardTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"internalType\":\"struct GaugeReward.RewardToken\",\"name\":\"_rewardToken\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCut\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"userGaugeRewardTokenExchangeRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userGaugeRewardTokenLastClaimedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardTokenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"PoolTogether Inc Team\",\"details\":\"This contract is only keeping track of the rewards. Reward tokens are actually stored in the TokenVault contract.\",\"events\":{\"Deployed(address,address,address,uint32)\":{\"params\":{\"gaugeController\":\"Address of the GaugeController\",\"liquidator\":\"Address of the Liquidator\",\"stakerCut\":\"Percentage of rewards that goes to stakers\",\"vault\":\"Address of the Vault\"}},\"RewardTokenPushed(address,address,uint256)\":{\"params\":{\"gauge\":\"Address of the gauge for which the reward token is added\",\"timestamp\":\"Timestamp at which the reward token was pushed\",\"token\":\"Address of the token being pushed\"}},\"RewardsAdded(address,address,uint256,uint256,uint256)\":{\"params\":{\"amount\":\"Amount of tokens sent to the vault\",\"exchangeRate\":\"New exchange rate for this `token` in this `gauge`\",\"gauge\":\"Address of the gauge for which tokens were added\",\"stakerRewards\":\"Amount of rewards allocated to stakers\",\"token\":\"Address of the token sent to the vault\"}},\"RewardsClaimed(address,address,address,uint256,uint256)\":{\"params\":{\"amount\":\"Total amount of rewards claimed\",\"exchangeRate\":\"Exchange rate at which the rewards were claimed\",\"gauge\":\"Address of the gauge for which the user claimed rewards\",\"token\":\"Address of the token for which the user claimed rewards\",\"user\":\"Address of the user for which the rewards were claimed\"}},\"RewardsRedeemed(address,address,address,uint256)\":{\"params\":{\"amount\":\"Total amount of rewards redeemed\",\"caller\":\"Address who called the redeem function\",\"token\":\"Address of the token for which the user redeemed rewards\",\"user\":\"Address of the user for which the rewards were redeemed\"}}},\"kind\":\"dev\",\"methods\":{\"afterDecreaseGauge(address,address,uint256)\":{\"params\":{\"gauge\":\"Address of the gauge to decrease stake for\",\"oldStakeBalance\":\"Old stake balance of the user\",\"user\":\"Address of the user to decrease stake for\"}},\"afterIncreaseGauge(address,address,uint256)\":{\"params\":{\"gauge\":\"Address of the gauge to increase stake for\",\"oldStakeBalance\":\"Old stake balance of the user\",\"user\":\"Address of the user to increase stake for\"}},\"afterSwap(address,address,uint256,address,uint256)\":{\"details\":\"Called by the liquidator contract anytime tokens are liquidated.Will push `token` to the `gaugeRewardTokens` mapping if different from the current one.\",\"params\":{\"_ticket\":\"Address of the tickets that were sold\",\"_token\":\"Address of the token that the tickets were sold for\",\"_tokenAmount\":\"Amount of tokens that the tickets were sold for\"}},\"claim(address,(address,uint64),address)\":{\"params\":{\"_gauge\":\"Address of the gauge to claim rewards for\",\"_rewardToken\":\"Reward token to claim rewards for\",\"_user\":\"Address of the user to claim rewards for\"}},\"claimAll(address,address)\":{\"params\":{\"_gauge\":\"Address of the gauge to claim rewards for\",\"_user\":\"Address of the user to claim rewards for\"}},\"constructor\":{\"params\":{\"_gaugeController\":\"Address of the GaugeController\",\"_liquidator\":\"Address of the Liquidator\",\"_stakerCut\":\"Percentage of rewards that goes to stakers\",\"_vault\":\"Address of the Vault\"}},\"currentRewardToken(address)\":{\"params\":{\"_gauge\":\"Address of the gauge to get current reward token for\"},\"returns\":{\"_0\":\"Current reward token for the given gauge\"}},\"getRewards(address,(address,uint64),address)\":{\"params\":{\"_gauge\":\"Address of the gauge to get rewards for\",\"_rewardToken\":\"Reward token to get rewards for\",\"_user\":\"Address of the user to get rewards for\"},\"returns\":{\"_0\":\"Amount of rewards for the given gauge and token\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"redeem(address,address)\":{\"details\":\"Rewards can be redeemed on behalf of a user.\",\"params\":{\"_token\":\"Address of the token to redeem rewards for\",\"_user\":\"Address of the user to redeem rewards for\"},\"returns\":{\"_0\":\"Amount of rewards redeemed\"}}},\"stateVariables\":{\"gaugeRewardTokenExchangeRates\":{\"details\":\"gauge => reward token address => reward token timestamp => exchange rate\"},\"gaugeRewardTokens\":{\"details\":\"gauge => reward tokens array\"},\"userGaugeRewardTokenExchangeRates\":{\"details\":\"user => gauge => reward token address => reward token timestamp => exchange rate\"},\"userGaugeRewardTokenLastClaimedTimestamp\":{\"details\":\"user => gauge => reward token address => timestamp\"},\"userRewardTokenBalances\":{\"details\":\"user => reward token address => balance\"}},\"title\":\"PoolTogether V4 GaugeReward\",\"version\":1},\"userdoc\":{\"events\":{\"Deployed(address,address,address,uint32)\":{\"notice\":\"Emitted when the contract is deployed\"},\"RewardTokenPushed(address,address,uint256)\":{\"notice\":\"Emitted when a new reward token is pushed onto the `gaugeRewardTokens` mapping\"},\"RewardsAdded(address,address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when tickets are swapped for tokens\"},\"RewardsClaimed(address,address,address,uint256,uint256)\":{\"notice\":\"Emitted when a user claimed their rewards for a given gauge and token\"},\"RewardsRedeemed(address,address,address,uint256)\":{\"notice\":\"Emitted when a user redeemed their rewards for a given token\"}},\"kind\":\"user\",\"methods\":{\"afterDecreaseGauge(address,address,uint256)\":{\"notice\":\"Callback function to call in GaugeController after a user has decreased his gauge stake.\"},\"afterIncreaseGauge(address,address,uint256)\":{\"notice\":\"Fallback function to call in GaugeController after a user has increased their gauge stake.Callback function to call in GaugeController after a user has increased their gauge stake.\"},\"afterSwap(address,address,uint256,address,uint256)\":{\"notice\":\"Records exchange rate after swapping an amount of `ticket` for `token`.\"},\"claim(address,(address,uint64),address)\":{\"notice\":\"Claim user rewards for a given gauge and reward token.\"},\"claimAll(address,address)\":{\"notice\":\"Claim all user rewards for a given gauge.\"},\"constructor\":{\"notice\":\"GaugeReward constructor\"},\"currentRewardToken(address)\":{\"notice\":\"Return the current reward token for the given gauge.\"},\"gaugeController()\":{\"notice\":\"GaugeController contract address\"},\"gaugeRewardTokenExchangeRates(address,address,uint64)\":{\"notice\":\"Tracks reward token exchange rates per gauge\"},\"gaugeRewardTokens(address,uint256)\":{\"notice\":\"Tracks reward tokens per gauge\"},\"getRewards(address,(address,uint64),address)\":{\"notice\":\"Get user rewards for a given gauge and token.\"},\"liquidator()\":{\"notice\":\"Address of the liquidator that this contract is listening to\"},\"redeem(address,address)\":{\"notice\":\"Redeem user rewards for a given token.\"},\"stakerCut()\":{\"notice\":\"Percentage of rewards that goes to stakers. Fixed point 9 number that is less than 1.\"},\"userGaugeRewardTokenExchangeRates(address,address,address,uint64)\":{\"notice\":\"Tracks reward token exchange rate per user and gauge\"},\"userGaugeRewardTokenLastClaimedTimestamp(address,address,address)\":{\"notice\":\"Tracks user last claimed timestamp per gauge and reward token\"},\"userRewardTokenBalances(address,address)\":{\"notice\":\"Tracks user token reward balances\"},\"vault()\":{\"notice\":\"Vault contract address\"}},\"notice\":\"The GaugeReward contract handles rewards for users who staked in one or several gauges on the GaugeController contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GaugeReward.sol\":\"GaugeReward\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x88a02b447e0fb6354bebcb4e1e98f2add4352e203d862a484c4947570944bebb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"contracts/GaugeReward.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\n\\nimport \\\"./interfaces/IGaugeReward.sol\\\";\\nimport \\\"./interfaces/IGaugeController.sol\\\";\\nimport \\\"./interfaces/IPrizePoolLiquidatorListener.sol\\\";\\n\\n/**\\n  * @title  PoolTogether V4 GaugeReward\\n  * @author PoolTogether Inc Team\\n  * @notice The GaugeReward contract handles rewards for users\\n            who staked in one or several gauges on the GaugeController contract.\\n  * @dev    This contract is only keeping track of the rewards.\\n            Reward tokens are actually stored in the TokenVault contract.\\n*/\\ncontract GaugeReward is IGaugeReward, IPrizePoolLiquidatorListener, Multicall {\\n    using SafeERC20 for IERC20;\\n\\n    /* ============ Variables ============ */\\n\\n    /**\\n     * @notice Tracks user token reward balances\\n     * @dev user => reward token address => balance\\n     */\\n    mapping(address => mapping(IERC20 => uint256)) public userRewardTokenBalances;\\n\\n    /**\\n     * @notice Tracks reward token exchange rate per user and gauge\\n     * @dev user => gauge => reward token address => reward token timestamp => exchange rate\\n     */\\n    mapping(address => mapping(address => mapping(IERC20 => mapping(uint64 => uint256))))\\n        public userGaugeRewardTokenExchangeRates;\\n\\n    /**\\n     * @notice Tracks user last claimed timestamp per gauge and reward token\\n     * @dev user => gauge => reward token address => timestamp\\n     */\\n    mapping(address => mapping(address => mapping(address => uint256)))\\n        public userGaugeRewardTokenLastClaimedTimestamp;\\n\\n    /**\\n     * @notice Tracks reward token exchange rates per gauge\\n     * @dev gauge => reward token address => reward token timestamp => exchange rate\\n     */\\n    mapping(address => mapping(IERC20 => mapping(uint64 => uint256)))\\n        public gaugeRewardTokenExchangeRates;\\n\\n    /**\\n     * @notice RewardToken struct\\n     * @param token Address of the reward token\\n     * @param timestamp Timestamp at which the reward token was added\\n     */\\n    struct RewardToken {\\n        IERC20 token;\\n        uint64 timestamp;\\n    }\\n\\n    /**\\n     * @notice Tracks reward tokens per gauge\\n     * @dev gauge => reward tokens array\\n     */\\n    mapping(address => RewardToken[]) public gaugeRewardTokens;\\n\\n    /// @notice GaugeController contract address\\n    IGaugeController public gaugeController;\\n\\n    /// @notice Vault contract address\\n    address public vault;\\n\\n    /// @notice Address of the liquidator that this contract is listening to\\n    address public liquidator;\\n\\n    /// @notice Percentage of rewards that goes to stakers. Fixed point 9 number that is less than 1.\\n    uint32 public stakerCut;\\n\\n    /* ============ Events ============ */\\n\\n    /**\\n     * @notice Emitted when the contract is deployed\\n     * @param gaugeController Address of the GaugeController\\n     * @param vault Address of the Vault\\n     * @param liquidator Address of the Liquidator\\n     * @param stakerCut Percentage of rewards that goes to stakers\\n     */\\n    event Deployed(\\n        IGaugeController indexed gaugeController,\\n        address indexed vault,\\n        address indexed liquidator,\\n        uint32 stakerCut\\n    );\\n\\n    /**\\n     * @notice Emitted when tickets are swapped for tokens\\n     * @param gauge Address of the gauge for which tokens were added\\n     * @param token Address of the token sent to the vault\\n     * @param amount Amount of tokens sent to the vault\\n     * @param stakerRewards Amount of rewards allocated to stakers\\n     * @param exchangeRate New exchange rate for this `token` in this `gauge`\\n     */\\n    event RewardsAdded(\\n        address indexed gauge,\\n        IERC20 indexed token,\\n        uint256 amount,\\n        uint256 stakerRewards,\\n        uint256 exchangeRate\\n    );\\n\\n    /**\\n     * @notice Emitted when a user claimed their rewards for a given gauge and token\\n     * @param gauge Address of the gauge for which the user claimed rewards\\n     * @param token Address of the token for which the user claimed rewards\\n     * @param user Address of the user for which the rewards were claimed\\n     * @param amount Total amount of rewards claimed\\n     * @param exchangeRate Exchange rate at which the rewards were claimed\\n     */\\n    event RewardsClaimed(\\n        address indexed gauge,\\n        IERC20 indexed token,\\n        address indexed user,\\n        uint256 amount,\\n        uint256 exchangeRate\\n    );\\n\\n    /**\\n     * @notice Emitted when a user redeemed their rewards for a given token\\n     * @param caller Address who called the redeem function\\n     * @param user Address of the user for which the rewards were redeemed\\n     * @param token Address of the token for which the user redeemed rewards\\n     * @param amount Total amount of rewards redeemed\\n     */\\n    event RewardsRedeemed(\\n        address indexed caller,\\n        address indexed user,\\n        IERC20 indexed token,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice Emitted when a new reward token is pushed onto the `gaugeRewardTokens` mapping\\n     * @param gauge Address of the gauge for which the reward token is added\\n     * @param token Address of the token being pushed\\n     * @param timestamp Timestamp at which the reward token was pushed\\n     */\\n    event RewardTokenPushed(address indexed gauge, IERC20 indexed token, uint256 timestamp);\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * @notice GaugeReward constructor\\n     * @param _gaugeController Address of the GaugeController\\n     * @param _vault Address of the Vault\\n     * @param _liquidator Address of the Liquidator\\n     * @param _stakerCut Percentage of rewards that goes to stakers\\n     */\\n    constructor(\\n        IGaugeController _gaugeController,\\n        address _vault,\\n        address _liquidator,\\n        uint32 _stakerCut\\n    ) {\\n        require(address(_gaugeController) != address(0), \\\"GReward/GC-not-zero-address\\\");\\n        require(_vault != address(0), \\\"GReward/Vault-not-zero-address\\\");\\n        require(_liquidator != address(0), \\\"GReward/Liq-not-zero-address\\\");\\n        require(_stakerCut < 1e9, \\\"GReward/staker-cut-lt-1e9\\\");\\n\\n        gaugeController = _gaugeController;\\n        vault = _vault;\\n        stakerCut = _stakerCut;\\n        liquidator = _liquidator;\\n\\n        emit Deployed(_gaugeController, _vault, _liquidator, _stakerCut);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @notice Return the current reward token for the given gauge.\\n     * @param _gauge Address of the gauge to get current reward token for\\n     * @return Current reward token for the given gauge\\n     */\\n    function currentRewardToken(address _gauge) external view returns (RewardToken memory) {\\n        return _currentRewardToken(_gauge);\\n    }\\n\\n    /**\\n     * @notice Get user rewards for a given gauge and token.\\n     * @param _gauge Address of the gauge to get rewards for\\n     * @param _rewardToken Reward token to get rewards for\\n     * @param _user Address of the user to get rewards for\\n     * @return Amount of rewards for the given gauge and token\\n     */\\n    function getRewards(\\n        address _gauge,\\n        RewardToken memory _rewardToken,\\n        address _user\\n    ) external view returns (uint256) {\\n        uint256 _stakeBalance = gaugeController.getUserGaugeBalance(_gauge, _user);\\n        (uint256 _rewards, ) = _getRewards(_gauge, _rewardToken, _user, _stakeBalance);\\n\\n        return _rewards;\\n    }\\n\\n    /**\\n     * @notice Records exchange rate after swapping an amount of `ticket` for `token`.\\n     * @dev Called by the liquidator contract anytime tokens are liquidated.\\n     * @dev Will push `token` to the `gaugeRewardTokens` mapping if different from the current one.\\n     * @param _ticket Address of the tickets that were sold\\n     * @param _token Address of the token that the tickets were sold for\\n     * @param _tokenAmount Amount of tokens that the tickets were sold for\\n     */\\n    function afterSwap(\\n        IPrizePool,\\n        ITicket _ticket,\\n        uint256,\\n        IERC20 _token,\\n        uint256 _tokenAmount\\n    ) external override {\\n        require(msg.sender == liquidator, \\\"GReward/only-liquidator\\\");\\n\\n        address _gauge = address(_ticket);\\n\\n        RewardToken memory _rewardToken = _currentRewardToken(_gauge);\\n\\n        if (_token != _rewardToken.token) {\\n            uint256 _currentTimestamp = block.timestamp;\\n\\n            gaugeRewardTokens[_gauge].push(\\n                RewardToken({ token: _token, timestamp: uint64(_currentTimestamp) })\\n            );\\n\\n            emit RewardTokenPushed(_gauge, _token, _currentTimestamp);\\n\\n            _rewardToken = _currentRewardToken(_gauge);\\n        }\\n\\n        uint256 _gaugeRewards = (_tokenAmount * stakerCut) / 1e9;\\n\\n        // Exchange rate = amount / current staked amount on gauge\\n        uint256 _exchangeRate = (_gaugeRewards * 1e18) / gaugeController.getGaugeBalance(_gauge);\\n\\n        gaugeRewardTokenExchangeRates[_gauge][_rewardToken.token][\\n            _rewardToken.timestamp\\n        ] += _exchangeRate;\\n\\n        emit RewardsAdded(_gauge, _token, _tokenAmount, _gaugeRewards, _exchangeRate);\\n    }\\n\\n    /// @inheritdoc IGaugeReward\\n    function afterIncreaseGauge(\\n        address _gauge,\\n        address _user,\\n        uint256 _oldStakeBalance\\n    ) external override onlyGaugeController {\\n        _claimAll(_gauge, _user, _oldStakeBalance);\\n    }\\n\\n    /// @inheritdoc IGaugeReward\\n    function afterDecreaseGauge(\\n        address _gauge,\\n        address _user,\\n        uint256 _oldStakeBalance\\n    ) external override onlyGaugeController {\\n        _claimAll(_gauge, _user, _oldStakeBalance);\\n    }\\n\\n    /**\\n     * @notice Claim user rewards for a given gauge and reward token.\\n     * @param _gauge Address of the gauge to claim rewards for\\n     * @param _rewardToken Reward token to claim rewards for\\n     * @param _user Address of the user to claim rewards for\\n     */\\n    function claim(\\n        address _gauge,\\n        RewardToken memory _rewardToken,\\n        address _user\\n    ) external {\\n        uint256 _stakeBalance = gaugeController.getUserGaugeBalance(_gauge, _user);\\n        _claim(_gauge, _rewardToken, _user, _stakeBalance);\\n    }\\n\\n    /**\\n     * @notice Claim all user rewards for a given gauge.\\n     * @param _gauge Address of the gauge to claim rewards for\\n     * @param _user Address of the user to claim rewards for\\n     */\\n    function claimAll(address _gauge, address _user) external {\\n        uint256 _stakeBalance = gaugeController.getUserGaugeBalance(_gauge, _user);\\n        _claimAll(_gauge, _user, _stakeBalance);\\n    }\\n\\n    /**\\n     * @notice Redeem user rewards for a given token.\\n     * @dev Rewards can be redeemed on behalf of a user.\\n     * @param _user Address of the user to redeem rewards for\\n     * @param _token Address of the token to redeem rewards for\\n     * @return Amount of rewards redeemed\\n     */\\n    function redeem(address _user, IERC20 _token) external returns (uint256) {\\n        uint256 _rewards = userRewardTokenBalances[_user][_token];\\n\\n        userRewardTokenBalances[_user][_token] = 0;\\n        _token.safeTransferFrom(vault, _user, _rewards);\\n\\n        emit RewardsRedeemed(msg.sender, _user, _token, _rewards);\\n\\n        return _rewards;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Return the current reward token for the given gauge\\n     * @param _gauge Address of the gauge to get current reward token for\\n     * @return Current reward token for the given gauge\\n     */\\n    function _currentRewardToken(address _gauge) internal view returns (RewardToken memory) {\\n        RewardToken[] memory _gaugeRewardTokens = gaugeRewardTokens[_gauge];\\n        uint256 _gaugeRewardTokensLength = _gaugeRewardTokens.length;\\n\\n        if (_gaugeRewardTokensLength > 0) {\\n            return _gaugeRewardTokens[_gaugeRewardTokensLength - 1];\\n        } else {\\n            return RewardToken(IERC20(address(0)), 0);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get user last claimed timestamp for a given gauge and reward token\\n     * @param _user Address of the user to set last claimed timestamp for\\n     * @param _gauge Address of the gauge to set last claimed timestamp for\\n     * @param _rewardTokenAddress Address of the reward token to set last claimed timestamp for\\n     * @return Last claimed timestamp for the given gauge and reward token\\n     */\\n    function _getUserGaugeRewardTokenLastClaimedTimestamp(\\n        address _user,\\n        address _gauge,\\n        address _rewardTokenAddress\\n    ) internal view returns (uint256) {\\n        return userGaugeRewardTokenLastClaimedTimestamp[_user][_gauge][_rewardTokenAddress];\\n    }\\n\\n    /**\\n     * @notice Set user last claimed timestamp for a given gauge and reward token\\n     * @param _user Address of the user to set last claimed timestamp for\\n     * @param _gauge Address of the gauge to set last claimed timestamp for\\n     * @param _rewardTokenAddress Address of the reward token to set last claimed timestamp for\\n     */\\n    function _setUserGaugeRewardTokenLastClaimedTimestamp(\\n        address _user,\\n        address _gauge,\\n        address _rewardTokenAddress\\n    ) internal {\\n        userGaugeRewardTokenLastClaimedTimestamp[_user][_gauge][_rewardTokenAddress] = uint64(\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Get user rewards for a given gauge and token.\\n     * @param _gauge Address of the gauge to get rewards for\\n     * @param _rewardToken Reward token to get rewards for\\n     * @param _user Address of the user to get rewards for\\n     * @param _stakeBalance User stake balance\\n     * @return _rewards Amount of rewards for the given gauge and token\\n     * @return _exchangeRate Current exchange rate for the given gauge and token\\n     */\\n    function _getRewards(\\n        address _gauge,\\n        RewardToken memory _rewardToken,\\n        address _user,\\n        uint256 _stakeBalance\\n    ) internal view returns (uint256 _rewards, uint256 _exchangeRate) {\\n        uint256 _previousExchangeRate = userGaugeRewardTokenExchangeRates[_user][_gauge][\\n            _rewardToken.token\\n        ][_rewardToken.timestamp];\\n\\n        uint256 _currentExchangeRate = gaugeRewardTokenExchangeRates[_gauge][_rewardToken.token][\\n            _rewardToken.timestamp\\n        ];\\n\\n        uint256 _userLastClaimedTimestamp = _getUserGaugeRewardTokenLastClaimedTimestamp(\\n            _user,\\n            _gauge,\\n            address(_rewardToken.token)\\n        );\\n\\n        if (_userLastClaimedTimestamp == 0) {\\n            RewardToken[] memory _gaugeRewardTokens = gaugeRewardTokens[_gauge];\\n            uint256 _gaugeRewardTokensLength = _gaugeRewardTokens.length;\\n\\n            if (_gaugeRewardTokensLength > 1) {\\n                RewardToken memory _previousRewardToken = _gaugeRewardTokens[\\n                    _gaugeRewardTokensLength - 1\\n                ];\\n\\n                // User may have claimed rewards for the previous reward token\\n                _userLastClaimedTimestamp = _getUserGaugeRewardTokenLastClaimedTimestamp(\\n                    _user,\\n                    _gauge,\\n                    address(_previousRewardToken.token)\\n                );\\n            }\\n\\n            if (_userLastClaimedTimestamp == 0) {\\n                // User may have claimed rewards before any tokens were set for the gauge\\n                _userLastClaimedTimestamp = _getUserGaugeRewardTokenLastClaimedTimestamp(\\n                    _user,\\n                    _gauge,\\n                    address(0)\\n                );\\n            }\\n        }\\n\\n        bool _isEligibleForPastRewards = _userLastClaimedTimestamp > 0 &&\\n            _rewardToken.timestamp > _userLastClaimedTimestamp;\\n\\n        // User is not eligible for any rewards, we return early\\n        if (!_isEligibleForPastRewards && _previousExchangeRate == 0) {\\n            return (0, _currentExchangeRate);\\n        }\\n\\n        return (\\n            // Rewards = deltaExchangeRate * stakeBalance\\n            ((_currentExchangeRate - _previousExchangeRate) * _stakeBalance) / 1e18,\\n            _currentExchangeRate\\n        );\\n    }\\n\\n    /**\\n     * @notice Claim user rewards for a given gauge and token.\\n     * @param _gauge Address of the gauge to claim rewards for\\n     * @param _rewardToken Reward token to get rewards for\\n     * @param _user Address of the user to claim rewards for\\n     * @param _stakeBalance User stake balance\\n     */\\n    function _claimRewards(\\n        address _gauge,\\n        RewardToken memory _rewardToken,\\n        address _user,\\n        uint256 _stakeBalance\\n    ) internal returns (uint256) {\\n        (uint256 _rewards, uint256 _exchangeRate) = _getRewards(\\n            _gauge,\\n            _rewardToken,\\n            _user,\\n            _stakeBalance\\n        );\\n\\n        userGaugeRewardTokenExchangeRates[_user][_gauge][_rewardToken.token][\\n            _rewardToken.timestamp\\n        ] = _exchangeRate;\\n\\n        if (_rewards > 0) {\\n            userRewardTokenBalances[_user][_rewardToken.token] += _rewards;\\n            emit RewardsClaimed(_gauge, _rewardToken.token, _user, _rewards, _exchangeRate);\\n        }\\n\\n        return _rewards;\\n    }\\n\\n    /**\\n     * @notice Claim user rewards for a given gauge and token.\\n     * @param _gauge Address of the gauge to claim rewards for\\n     * @param _rewardToken Reward token to claim rewards for\\n     * @param _user Address of the user to claim rewards for\\n     * @param _stakeBalance User stake balance\\n     */\\n    function _claim(\\n        address _gauge,\\n        RewardToken memory _rewardToken,\\n        address _user,\\n        uint256 _stakeBalance\\n    ) internal {\\n        _claimRewards(_gauge, _rewardToken, _user, _stakeBalance);\\n        _setUserGaugeRewardTokenLastClaimedTimestamp(_user, _gauge, address(_rewardToken.token));\\n    }\\n\\n    /**\\n     * @notice Claim all user rewards for a given gauge.\\n     * @dev Go through all the reward tokens for the given gauge and claim rewards.\\n     * @param _gauge Address of the gauge to claim rewards for\\n     * @param _user Address of the user to claim rewards for\\n     * @param _stakeBalance User stake balance\\n     */\\n    function _claimAll(\\n        address _gauge,\\n        address _user,\\n        uint256 _stakeBalance\\n    ) internal {\\n        uint256 _gaugeRewardTokensLength = gaugeRewardTokens[_gauge].length;\\n\\n        RewardToken memory _rewardToken;\\n\\n        if (_gaugeRewardTokensLength > 0) {\\n            uint256 i = _gaugeRewardTokensLength;\\n\\n            while (i > 0) {\\n                i = i - 1;\\n                _rewardToken = gaugeRewardTokens[_gauge][i];\\n                _claimRewards(_gauge, _rewardToken, _user, _stakeBalance);\\n                _setUserGaugeRewardTokenLastClaimedTimestamp(\\n                    _user,\\n                    _gauge,\\n                    address(_rewardToken.token)\\n                );\\n            }\\n        } else {\\n            // If no reward token has been added yet, set claimed timestamp for reward token 0\\n            _setUserGaugeRewardTokenLastClaimedTimestamp(_user, _gauge, address(0));\\n        }\\n    }\\n\\n    /* ============ Modifiers ============ */\\n\\n    /// @notice Restricts call to GaugeController contract\\n    modifier onlyGaugeController() {\\n        require(msg.sender == address(gaugeController), \\\"GReward/only-GaugeController\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x7a15b486161339d16af76797550ec38efc134aa24298cce5b9100093017d47ae\",\"license\":\"GPL-3.0\"},\"contracts/external/compound/ICompLike.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICompLike is IERC20 {\\n    function getCurrentVotes(address account) external view returns (uint96);\\n\\n    function delegate(address delegate) external;\\n}\\n\",\"keccak256\":\"0x34d2c8a57ca27b9c58ec07c4bd8d263c71a25d194068ad9403f3895dc99a7122\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IControlledToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/** @title IControlledToken\\n  * @author PoolTogether Inc Team\\n  * @notice ERC20 Tokens with a controller for minting & burning.\\n*/\\ninterface IControlledToken is IERC20 {\\n\\n    /** \\n        @notice Interface to the contract responsible for controlling mint/burn\\n    */\\n    function controller() external view returns (address);\\n\\n    /** \\n      * @notice Allows the controller to mint tokens for a user account\\n      * @dev May be overridden to provide more granular control over minting\\n      * @param user Address of the receiver of the minted tokens\\n      * @param amount Amount of tokens to mint\\n    */\\n    function controllerMint(address user, uint256 amount) external;\\n\\n    /** \\n      * @notice Allows the controller to burn tokens from a user account\\n      * @dev May be overridden to provide more granular control over burning\\n      * @param user Address of the holder account to burn tokens from\\n      * @param amount Amount of tokens to burn\\n    */\\n    function controllerBurn(address user, uint256 amount) external;\\n\\n    /** \\n      * @notice Allows an operator via the controller to burn tokens on behalf of a user account\\n      * @dev May be overridden to provide more granular control over operator-burning\\n      * @param operator Address of the operator performing the burn action via the controller contract\\n      * @param user Address of the holder account to burn tokens from\\n      * @param amount Amount of tokens to burn\\n    */\\n    function controllerBurnFrom(\\n        address operator,\\n        address user,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x90dceeec1eea6e49021e8db88b084f3f0c503c60b6f7e0bbecd2529ffde87ef3\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGaugeController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\ninterface IGaugeController {\\n    /**\\n     * @notice Get the gauge scaled average balance between two timestamps.\\n     * @param _gauge Address of the gauge to get the average scaled balance for\\n     * @param _startTime Start timestamp at which to get the average scaled balance\\n     * @param _endTime End timestamp at which to get the average scaled balance\\n     * @return The gauge scaled average balance between the two timestamps\\n     */\\n    function getScaledAverageGaugeBalanceBetween(\\n        address _gauge,\\n        uint256 _startTime,\\n        uint256 _endTime\\n    ) external view returns (uint256);\\n    \\n    /**\\n     * @notice Read Gauge balance.\\n     * @param _gauge Address of existing Gauge\\n     * @return uint256 GaugeTWAB.details.balance\\n     */\\n     function getGaugeBalance(address _gauge) external view returns (uint256);\\n\\n     /**\\n      * @notice Read Gauge scaled balance.\\n      * @param _gauge Address of existing Gauge\\n      * @return uint256 GaugeScaleTWAB.details.balance\\n      */\\n     function getGaugeScaleBalance(address _gauge) external view returns (uint256);\\n \\n     /**\\n      * @notice Get the user stake balance for a given gauge\\n      * @param _gauge Address of the gauge to get stake balance for\\n      * @param _user Address of the user to get stake balance for\\n      * @return The user gauge balance\\n      */\\n     function getUserGaugeBalance(address _gauge, address _user) external view returns (uint256);\\n}\",\"keccak256\":\"0xd9963bccaa220e4c3527aaa7cb77b5da7900311a5fb94ab3d7eb26f13288abd8\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IGaugeReward.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\n/**\\n * @title  PoolTogether V4 IGaugeReward\\n * @author PoolTogether Inc Team\\n * @notice The GaugeReward interface.\\n */\\ninterface IGaugeReward {\\n    /**\\n     * @notice Fallback function to call in GaugeController after a user has increased their gauge stake.\\n     * @notice Callback function to call in GaugeController after a user has increased their gauge stake.\\n     * @param gauge Address of the gauge to increase stake for\\n     * @param user Address of the user to increase stake for\\n     * @param oldStakeBalance Old stake balance of the user\\n     */\\n    function afterIncreaseGauge(\\n        address gauge,\\n        address user,\\n        uint256 oldStakeBalance\\n    ) external;\\n\\n    /**\\n     * @notice Callback function to call in GaugeController after a user has decreased his gauge stake.\\n     * @param gauge Address of the gauge to decrease stake for\\n     * @param user Address of the user to decrease stake for\\n     * @param oldStakeBalance Old stake balance of the user\\n     */\\n    function afterDecreaseGauge(\\n        address gauge,\\n        address user,\\n        uint256 oldStakeBalance\\n    ) external;\\n}\\n\",\"keccak256\":\"0x826190a5356dcf82b37edfd14432e297853ec1c5a1923b23d751ef4026cfd9f2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPrizePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"../external/compound/ICompLike.sol\\\";\\nimport \\\"../interfaces/ITicket.sol\\\";\\n\\ninterface IPrizePool {\\n    /// @dev Event emitted when controlled token is added\\n    event ControlledTokenAdded(ITicket indexed token);\\n\\n    event AwardCaptured(uint256 amount);\\n\\n    /// @dev Event emitted when assets are deposited\\n    event Deposited(\\n        address indexed operator,\\n        address indexed to,\\n        ITicket indexed token,\\n        uint256 amount\\n    );\\n\\n    /// @dev Event emitted when interest is awarded to a winner\\n    event Awarded(address indexed winner, ITicket indexed token, uint256 amount);\\n\\n    /// @dev Event emitted when external ERC20s are awarded to a winner\\n    event AwardedExternalERC20(address indexed winner, address indexed token, uint256 amount);\\n\\n    /// @dev Event emitted when external ERC20s are transferred out\\n    event TransferredExternalERC20(address indexed to, address indexed token, uint256 amount);\\n\\n    /// @dev Event emitted when external ERC721s are awarded to a winner\\n    event AwardedExternalERC721(address indexed winner, address indexed token, uint256[] tokenIds);\\n\\n    /// @dev Event emitted when assets are withdrawn\\n    event Withdrawal(\\n        address indexed operator,\\n        address indexed from,\\n        ITicket indexed token,\\n        uint256 amount,\\n        uint256 redeemed\\n    );\\n\\n    /// @dev Event emitted when the Balance Cap is set\\n    event BalanceCapSet(uint256 balanceCap);\\n\\n    /// @dev Event emitted when the Liquidity Cap is set\\n    event LiquidityCapSet(uint256 liquidityCap);\\n\\n    /// @dev Event emitted when the Prize Strategy is set\\n    event PrizeStrategySet(address indexed prizeStrategy);\\n\\n    /// @dev Event emitted when the Ticket is set\\n    event TicketSet(ITicket indexed ticket);\\n\\n    /// @dev Emitted when there was an error thrown awarding an External ERC721\\n    event ErrorAwardingExternalERC721(bytes error);\\n\\n    /// @notice Deposit assets into the Prize Pool in exchange for tokens\\n    /// @param to The address receiving the newly minted tokens\\n    /// @param amount The amount of assets to deposit\\n    function depositTo(address to, uint256 amount) external;\\n\\n    /// @notice Deposit assets into the Prize Pool in exchange for tokens,\\n    /// then sets the delegate on behalf of the caller.\\n    /// @param to The address receiving the newly minted tokens\\n    /// @param amount The amount of assets to deposit\\n    /// @param delegate The address to delegate to for the caller\\n    function depositToAndDelegate(address to, uint256 amount, address delegate) external;\\n\\n    /// @notice Withdraw assets from the Prize Pool instantly.\\n    /// @param from The address to redeem tokens from.\\n    /// @param amount The amount of tokens to redeem for assets.\\n    /// @return The actual amount withdrawn\\n    function withdrawFrom(address from, uint256 amount) external returns (uint256);\\n\\n    /// @notice Called by the prize strategy to award prizes.\\n    /// @dev The amount awarded must be less than the awardBalance()\\n    /// @param to The address of the winner that receives the award\\n    /// @param amount The amount of assets to be awarded\\n    function award(address to, uint256 amount) external;\\n\\n    /// @notice Returns the balance that is available to award.\\n    /// @dev captureAwardBalance() should be called first\\n    /// @return The total amount of assets to be awarded for the current prize\\n    function awardBalance() external view returns (uint256);\\n\\n    /// @notice Captures any available interest as award balance.\\n    /// @dev This function also captures the reserve fees.\\n    /// @return The total amount of assets to be awarded for the current prize\\n    function captureAwardBalance() external returns (uint256);\\n\\n    /// @dev Checks with the Prize Pool if a specific token type may be awarded as an external prize\\n    /// @param externalToken The address of the token to check\\n    /// @return True if the token may be awarded, false otherwise\\n    function canAwardExternal(address externalToken) external view returns (bool);\\n\\n    // @dev Returns the total underlying balance of all assets. This includes both principal and interest.\\n    /// @return The underlying balance of assets\\n    function balance() external returns (uint256);\\n\\n    /**\\n     * @notice Read internal Ticket accounted balance.\\n     * @return uint256 accountBalance\\n     */\\n    function getAccountedBalance() external view returns (uint256);\\n\\n    /**\\n     * @notice Read internal balanceCap variable\\n     */\\n    function getBalanceCap() external view returns (uint256);\\n\\n    /**\\n     * @notice Read internal liquidityCap variable\\n     */\\n    function getLiquidityCap() external view returns (uint256);\\n\\n    /**\\n     * @notice Read ticket variable\\n     */\\n    function getTicket() external view returns (ITicket);\\n\\n    /**\\n     * @notice Read token variable\\n     */\\n    function getToken() external view returns (address);\\n\\n    /**\\n     * @notice Read prizeStrategy variable\\n     */\\n    function getPrizeStrategy() external view returns (address);\\n\\n    /// @dev Checks if a specific token is controlled by the Prize Pool\\n    /// @param controlledToken The address of the token to check\\n    /// @return True if the token is a controlled token, false otherwise\\n    function isControlled(ITicket controlledToken) external view returns (bool);\\n\\n    /// @notice Called by the Prize-Strategy to transfer out external ERC20 tokens\\n    /// @dev Used to transfer out tokens held by the Prize Pool.  Could be liquidated, or anything.\\n    /// @param to The address of the winner that receives the award\\n    /// @param externalToken The address of the external asset token being awarded\\n    /// @param amount The amount of external assets to be awarded\\n    function transferExternalERC20(\\n        address to,\\n        address externalToken,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Called by the Prize-Strategy to award external ERC20 prizes\\n    /// @dev Used to award any arbitrary tokens held by the Prize Pool\\n    /// @param to The address of the winner that receives the award\\n    /// @param amount The amount of external assets to be awarded\\n    /// @param externalToken The address of the external asset token being awarded\\n    function awardExternalERC20(\\n        address to,\\n        address externalToken,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Called by the prize strategy to award external ERC721 prizes\\n    /// @dev Used to award any arbitrary NFTs held by the Prize Pool\\n    /// @param to The address of the winner that receives the award\\n    /// @param externalToken The address of the external NFT token being awarded\\n    /// @param tokenIds An array of NFT Token IDs to be transferred\\n    function awardExternalERC721(\\n        address to,\\n        address externalToken,\\n        uint256[] calldata tokenIds\\n    ) external;\\n\\n    /// @notice Allows the owner to set a balance cap per `token` for the pool.\\n    /// @dev If a user wins, his balance can go over the cap. He will be able to withdraw the excess but not deposit.\\n    /// @dev Needs to be called after deploying a prize pool to be able to deposit into it.\\n    /// @param balanceCap New balance cap.\\n    /// @return True if new balance cap has been successfully set.\\n    function setBalanceCap(uint256 balanceCap) external returns (bool);\\n\\n    /// @notice Allows the Governor to set a cap on the amount of liquidity that he pool can hold\\n    /// @param liquidityCap The new liquidity cap for the prize pool\\n    function setLiquidityCap(uint256 liquidityCap) external;\\n\\n    /// @notice Sets the prize strategy of the prize pool.  Only callable by the owner.\\n    /// @param _prizeStrategy The new prize strategy.\\n    function setPrizeStrategy(address _prizeStrategy) external;\\n\\n    /// @notice Set prize pool ticket.\\n    /// @param ticket Address of the ticket to set.\\n    /// @return True if ticket has been successfully set.\\n    function setTicket(ITicket ticket) external returns (bool);\\n\\n    /// @notice Delegate the votes for a Compound COMP-like token held by the prize pool\\n    /// @param compLike The COMP-like token held by the prize pool that should be delegated\\n    /// @param to The address to delegate to\\n    function compLikeDelegate(ICompLike compLike, address to) external;\\n}\\n\",\"keccak256\":\"0xa3cc6bff882d541d6642bbff0988fc592ff513a682dde6888ab55eaec29df7a9\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPrizePoolLiquidatorListener.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IPrizePool.sol\\\";\\nimport \\\"./ITicket.sol\\\";\\n\\n/**\\n * @author PoolTogether Inc Team\\n */\\ninterface IPrizePoolLiquidatorListener {\\n    function afterSwap(IPrizePool prizePool, ITicket ticket, uint256 ticketAmount, IERC20 token, uint256 tokenAmount) external;\\n}\",\"keccak256\":\"0x1ef7bba5f9a03825f60713f60eb2c96e58ddd20517046faf4a41d7fc8278e017\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITicket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"../libraries/TwabLib.sol\\\";\\nimport \\\"./IControlledToken.sol\\\";\\n\\ninterface ITicket is IControlledToken {\\n    /**\\n     * @notice A struct containing details for an Account.\\n     * @param balance The current balance for an Account.\\n     * @param nextTwabIndex The next available index to store a new twab.\\n     * @param cardinality The number of recorded twabs (plus one!).\\n     */\\n    struct AccountDetails {\\n        uint224 balance;\\n        uint16 nextTwabIndex;\\n        uint16 cardinality;\\n    }\\n\\n    /**\\n     * @notice Combines account details with their twab history.\\n     * @param details The account details.\\n     * @param twabs The history of twabs for this account.\\n     */\\n    struct Account {\\n        AccountDetails details;\\n        ObservationLib.Observation[65535] twabs;\\n    }\\n\\n    /**\\n     * @notice Emitted when TWAB balance has been delegated to another user.\\n     * @param delegator Address of the delegator.\\n     * @param delegate Address of the delegate.\\n     */\\n    event Delegated(address indexed delegator, address indexed delegate);\\n\\n    /**\\n     * @notice Emitted when ticket is initialized.\\n     * @param name Ticket name (eg: PoolTogether Dai Ticket (Compound)).\\n     * @param symbol Ticket symbol (eg: PcDAI).\\n     * @param decimals Ticket decimals.\\n     * @param controller Token controller address.\\n     */\\n    event TicketInitialized(string name, string symbol, uint8 decimals, address indexed controller);\\n\\n    /**\\n     * @notice Emitted when a new TWAB has been recorded.\\n     * @param delegate The recipient of the ticket power (may be the same as the user).\\n     * @param newTwab Updated TWAB of a ticket holder after a successful TWAB recording.\\n     */\\n    event NewUserTwab(\\n        address indexed delegate,\\n        ObservationLib.Observation newTwab\\n    );\\n\\n    /**\\n     * @notice Emitted when a new total supply TWAB has been recorded.\\n     * @param newTotalSupplyTwab Updated TWAB of tickets total supply after a successful total supply TWAB recording.\\n     */\\n    event NewTotalSupplyTwab(ObservationLib.Observation newTotalSupplyTwab);\\n\\n    /**\\n     * @notice Retrieves the address of the delegate to whom `user` has delegated their tickets.\\n     * @dev Address of the delegate will be the zero address if `user` has not delegated their tickets.\\n     * @param user Address of the delegator.\\n     * @return Address of the delegate.\\n     */\\n    function delegateOf(address user) external view returns (address);\\n\\n    /**\\n    * @notice Delegate time-weighted average balances to an alternative address.\\n    * @dev    Transfers (including mints) trigger the storage of a TWAB in delegate(s) account, instead of the\\n              targetted sender and/or recipient address(s).\\n    * @dev    To reset the delegate, pass the zero address (0x000.000) as `to` parameter.\\n    * @dev Current delegate address should be different from the new delegate address `to`.\\n    * @param  to Recipient of delegated TWAB.\\n    */\\n    function delegate(address to) external;\\n\\n    /**\\n     * @notice Allows the controller to delegate on a users behalf.\\n     * @param user The user for whom to delegate\\n     * @param delegate The new delegate\\n     */\\n    function controllerDelegateFor(address user, address delegate) external;\\n\\n    /**\\n     * @notice Allows a user to delegate via signature\\n     * @param user The user who is delegating\\n     * @param delegate The new delegate\\n     * @param deadline The timestamp by which this must be submitted\\n     * @param v The v portion of the ECDSA sig\\n     * @param r The r portion of the ECDSA sig\\n     * @param s The s portion of the ECDSA sig\\n     */\\n    function delegateWithSignature(\\n        address user,\\n        address delegate,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @notice Gets a users twab context.  This is a struct with their balance, next twab index, and cardinality.\\n     * @param user The user for whom to fetch the TWAB context.\\n     * @return The TWAB context, which includes { balance, nextTwabIndex, cardinality }\\n     */\\n    function getAccountDetails(address user) external view returns (TwabLib.AccountDetails memory);\\n\\n    /**\\n     * @notice Gets the TWAB at a specific index for a user.\\n     * @param user The user for whom to fetch the TWAB.\\n     * @param index The index of the TWAB to fetch.\\n     * @return The TWAB, which includes the twab amount and the timestamp.\\n     */\\n    function getTwab(address user, uint16 index)\\n        external\\n        view\\n        returns (ObservationLib.Observation memory);\\n\\n    /**\\n     * @notice Retrieves `user` TWAB balance.\\n     * @param user Address of the user whose TWAB is being fetched.\\n     * @param timestamp Timestamp at which we want to retrieve the TWAB balance.\\n     * @return The TWAB balance at the given timestamp.\\n     */\\n    function getBalanceAt(address user, uint64 timestamp) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves `user` TWAB balances.\\n     * @param user Address of the user whose TWABs are being fetched.\\n     * @param timestamps Timestamps range at which we want to retrieve the TWAB balances.\\n     * @return `user` TWAB balances.\\n     */\\n    function getBalancesAt(address user, uint64[] calldata timestamps)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Retrieves the average balance held by a user for a given time frame.\\n     * @param user The user whose balance is checked.\\n     * @param startTime The start time of the time frame.\\n     * @param endTime The end time of the time frame.\\n     * @return The average balance that the user held during the time frame.\\n     */\\n    function getAverageBalanceBetween(\\n        address user,\\n        uint64 startTime,\\n        uint64 endTime\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the average balances held by a user for a given time frame.\\n     * @param user The user whose balance is checked.\\n     * @param startTimes The start time of the time frame.\\n     * @param endTimes The end time of the time frame.\\n     * @return The average balance that the user held during the time frame.\\n     */\\n    function getAverageBalancesBetween(\\n        address user,\\n        uint64[] calldata startTimes,\\n        uint64[] calldata endTimes\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Retrieves the total supply TWAB balance at the given timestamp.\\n     * @param timestamp Timestamp at which we want to retrieve the total supply TWAB balance.\\n     * @return The total supply TWAB balance at the given timestamp.\\n     */\\n    function getTotalSupplyAt(uint64 timestamp) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the total supply TWAB balance between the given timestamps range.\\n     * @param timestamps Timestamps range at which we want to retrieve the total supply TWAB balance.\\n     * @return Total supply TWAB balances.\\n     */\\n    function getTotalSuppliesAt(uint64[] calldata timestamps)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Retrieves the average total supply balance for a set of given time frames.\\n     * @param startTimes Array of start times.\\n     * @param endTimes Array of end times.\\n     * @return The average total supplies held during the time frame.\\n     */\\n    function getAverageTotalSuppliesBetween(\\n        uint64[] calldata startTimes,\\n        uint64[] calldata endTimes\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xb9f6423a8a9c7394941cb84723b82cc66c5f815d689dc0562e612ae4d9f1cc27\",\"license\":\"GPL-3.0\"},\"contracts/libraries/ExtendedSafeCastLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary ExtendedSafeCastLib {\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 _value) internal pure returns (uint104) {\\n        require(_value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(_value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 _value) internal pure returns (uint208) {\\n        require(_value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(_value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 _value) internal pure returns (uint224) {\\n        require(_value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(_value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x9dae48760b4f78e5418ea8f44abe51fd40570b3159fac80ff17935b6451dcacd\",\"license\":\"GPL-3.0\"},\"contracts/libraries/ObservationLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"./OverflowSafeComparatorLib.sol\\\";\\nimport \\\"./RingBufferLib.sol\\\";\\n\\n/**\\n* @title Observation Library\\n* @notice This library allows one to store an array of timestamped values and efficiently binary search them.\\n* @dev Largely pulled from Uniswap V3 Oracle.sol: https://github.com/Uniswap/v3-core/blob/c05a0e2c8c08c460fb4d05cfdda30b3ad8deeaac/contracts/libraries/Oracle.sol\\n* @author PoolTogether Inc.\\n*/\\nlibrary ObservationLib {\\n    using OverflowSafeComparatorLib for uint32;\\n    using SafeCast for uint256;\\n\\n    /// @notice The maximum number of observations\\n    uint24 public constant MAX_CARDINALITY = 16777215; // 2**24\\n\\n    /**\\n    * @notice Observation, which includes an amount and timestamp.\\n    * @param amount `amount` at `timestamp`.\\n    * @param timestamp Recorded `timestamp`.\\n    */\\n    struct Observation {\\n        uint224 amount;\\n        uint32 timestamp;\\n    }\\n\\n    /**\\n    * @notice Fetches Observations `beforeOrAt` and `atOrAfter` a `_target`, eg: where [`beforeOrAt`, `atOrAfter`] is satisfied.\\n    * The result may be the same Observation, or adjacent Observations.\\n    * @dev The answer must be contained in the array used when the target is located within the stored Observation.\\n    * boundaries: older than the most recent Observation and younger, or the same age as, the oldest Observation.\\n    * @dev  If `_newestObservationIndex` is less than `_oldestObservationIndex`, it means that we've wrapped around the circular buffer.\\n    *       So the most recent observation will be at `_oldestObservationIndex + _cardinality - 1`, at the beginning of the circular buffer.\\n    * @param _observations List of Observations to search through.\\n    * @param _newestObservationIndex Index of the newest Observation. Right side of the circular buffer.\\n    * @param _oldestObservationIndex Index of the oldest Observation. Left side of the circular buffer.\\n    * @param _target Timestamp at which we are searching the Observation.\\n    * @param _cardinality Cardinality of the circular buffer we are searching through.\\n    * @param _time Timestamp at which we perform the binary search.\\n    * @return beforeOrAt Observation recorded before, or at, the target.\\n    * @return atOrAfter Observation recorded at, or after, the target.\\n    */\\n    function binarySearch(\\n        Observation[MAX_CARDINALITY] storage _observations,\\n        uint24 _newestObservationIndex,\\n        uint24 _oldestObservationIndex,\\n        uint32 _target,\\n        uint24 _cardinality,\\n        uint32 _time\\n    ) internal view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n        uint256 leftSide = _oldestObservationIndex;\\n        uint256 rightSide = _newestObservationIndex < leftSide\\n            ? leftSide + _cardinality - 1\\n            : _newestObservationIndex;\\n        uint256 currentIndex;\\n\\n        while (true) {\\n            // We start our search in the middle of the `leftSide` and `rightSide`.\\n            // After each iteration, we narrow down the search to the left or the right side while still starting our search in the middle.\\n            currentIndex = (leftSide + rightSide) / 2;\\n\\n            beforeOrAt = _observations[uint24(RingBufferLib.wrap(currentIndex, _cardinality))];\\n            uint32 beforeOrAtTimestamp = beforeOrAt.timestamp;\\n\\n            // We've landed on an uninitialized timestamp, keep searching higher (more recently).\\n            if (beforeOrAtTimestamp == 0) {\\n                leftSide = currentIndex + 1;\\n                continue;\\n            }\\n\\n            atOrAfter = _observations[uint24(RingBufferLib.nextIndex(currentIndex, _cardinality))];\\n\\n            bool targetAtOrAfter = beforeOrAtTimestamp.lte(_target, _time);\\n\\n            // Check if we've found the corresponding Observation.\\n            if (targetAtOrAfter && _target.lte(atOrAfter.timestamp, _time)) {\\n                break;\\n            }\\n\\n            // If `beforeOrAtTimestamp` is greater than `_target`, then we keep searching lower. To the left of the current index.\\n            if (!targetAtOrAfter) {\\n                rightSide = currentIndex - 1;\\n            } else {\\n                // Otherwise, we keep searching higher. To the left of the current index.\\n                leftSide = currentIndex + 1;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x225592b42013fc0af60822e75bc047d53b42a5fcf15f2173cdc3b50bea334b0a\",\"license\":\"GPL-3.0\"},\"contracts/libraries/OverflowSafeComparatorLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\n/// @title OverflowSafeComparatorLib library to share comparator functions between contracts\\n/// @dev Code taken from Uniswap V3 Oracle.sol: https://github.com/Uniswap/v3-core/blob/3e88af408132fc957e3e406f65a0ce2b1ca06c3d/contracts/libraries/Oracle.sol\\n/// @author PoolTogether Inc.\\nlibrary OverflowSafeComparatorLib {\\n    /// @notice 32-bit timestamps comparator.\\n    /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\\n    /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\\n    /// @param _b Timestamp to compare against `_a`.\\n    /// @param _timestamp A timestamp truncated to 32 bits.\\n    /// @return bool Whether `_a` is chronologically < `_b`.\\n    function lt(\\n        uint32 _a,\\n        uint32 _b,\\n        uint32 _timestamp\\n    ) internal pure returns (bool) {\\n        // No need to adjust if there hasn't been an overflow\\n        if (_a <= _timestamp && _b <= _timestamp) return _a < _b;\\n\\n        uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n        uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n        return aAdjusted < bAdjusted;\\n    }\\n\\n    /// @notice 32-bit timestamps comparator.\\n    /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\\n    /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\\n    /// @param _b Timestamp to compare against `_a`.\\n    /// @param _timestamp A timestamp truncated to 32 bits.\\n    /// @return bool Whether `_a` is chronologically <= `_b`.\\n    function lte(\\n        uint32 _a,\\n        uint32 _b,\\n        uint32 _timestamp\\n    ) internal pure returns (bool) {\\n\\n        // No need to adjust if there hasn't been an overflow\\n        if (_a <= _timestamp && _b <= _timestamp) return _a <= _b;\\n\\n        uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n        uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n        return aAdjusted <= bAdjusted;\\n    }\\n\\n    /// @notice 32-bit timestamp subtractor\\n    /// @dev safe for 0 or 1 overflows, where `_a` and `_b` must be chronologically before or equal to time\\n    /// @param _a The subtraction left operand\\n    /// @param _b The subtraction right operand\\n    /// @param _timestamp The current time.  Expected to be chronologically after both.\\n    /// @return The difference between a and b, adjusted for overflow\\n    function checkedSub(\\n        uint32 _a,\\n        uint32 _b,\\n        uint32 _timestamp\\n    ) internal pure returns (uint32) {\\n        // No need to adjust if there hasn't been an overflow\\n\\n        if (_a <= _timestamp && _b <= _timestamp) return _a - _b;\\n\\n        uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n        uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n        return uint32(aAdjusted - bAdjusted);\\n    }\\n}\\n\",\"keccak256\":\"0x20630cf89e7b92462946defe979fd0e69fa119841d55886121948ad810778c74\",\"license\":\"GPL-3.0\"},\"contracts/libraries/RingBufferLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nlibrary RingBufferLib {\\n    /**\\n    * @notice Returns wrapped TWAB index.\\n    * @dev  In order to navigate the TWAB circular buffer, we need to use the modulo operator.\\n    * @dev  For example, if `_index` is equal to 32 and the TWAB circular buffer is of `_cardinality` 32,\\n    *       it will return 0 and will point to the first element of the array.\\n    * @param _index Index used to navigate through the TWAB circular buffer.\\n    * @param _cardinality TWAB buffer cardinality.\\n    * @return TWAB index.\\n    */\\n    function wrap(uint256 _index, uint256 _cardinality) internal pure returns (uint256) {\\n        return _index % _cardinality;\\n    }\\n\\n    /**\\n    * @notice Computes the negative offset from the given index, wrapped by the cardinality.\\n    * @dev  We add `_cardinality` to `_index` to be able to offset even if `_amount` is superior to `_cardinality`.\\n    * @param _index The index from which to offset\\n    * @param _amount The number of indices to offset.  This is subtracted from the given index.\\n    * @param _cardinality The number of elements in the ring buffer\\n    * @return Offsetted index.\\n     */\\n    function offset(\\n        uint256 _index,\\n        uint256 _amount,\\n        uint256 _cardinality\\n    ) internal pure returns (uint256) {\\n        return wrap(_index + _cardinality - _amount, _cardinality);\\n    }\\n\\n    /// @notice Returns the index of the last recorded TWAB\\n    /// @param _nextIndex The next available twab index.  This will be recorded to next.\\n    /// @param _cardinality The cardinality of the TWAB history.\\n    /// @return The index of the last recorded TWAB\\n    function newestIndex(uint256 _nextIndex, uint256 _cardinality)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_cardinality == 0) {\\n            return 0;\\n        }\\n\\n        return wrap(_nextIndex + _cardinality - 1, _cardinality);\\n    }\\n\\n    /// @notice Computes the ring buffer index that follows the given one, wrapped by cardinality\\n    /// @param _index The index to increment\\n    /// @param _cardinality The number of elements in the Ring Buffer\\n    /// @return The next index relative to the given index.  Will wrap around to 0 if the next index == cardinality\\n    function nextIndex(uint256 _index, uint256 _cardinality)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return wrap(_index + 1, _cardinality);\\n    }\\n}\\n\",\"keccak256\":\"0x052e3bf6bfb30f32950e322c853589a8d153cf34f4b1ee292b17eb46f2ae656c\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TwabLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"./ExtendedSafeCastLib.sol\\\";\\nimport \\\"./OverflowSafeComparatorLib.sol\\\";\\nimport \\\"./RingBufferLib.sol\\\";\\nimport \\\"./ObservationLib.sol\\\";\\n\\n/**\\n  * @title  PoolTogether V4 TwabLib (Library)\\n  * @author PoolTogether Inc Team\\n  * @dev    Time-Weighted Average Balance Library for ERC20 tokens.\\n  * @notice This TwabLib adds on-chain historical lookups to a user(s) time-weighted average balance.\\n            Each user is mapped to an Account struct containing the TWAB history (ring buffer) and\\n            ring buffer parameters. Every token.transfer() creates a new TWAB checkpoint. The new TWAB\\n            checkpoint is stored in the circular ring buffer, as either a new checkpoint or rewriting\\n            a previous checkpoint with new parameters. The TwabLib (using existing blocktimes of 1block/15sec)\\n            guarantees minimum 7.4 years of search history.\\n */\\nlibrary TwabLib {\\n    using OverflowSafeComparatorLib for uint32;\\n    using ExtendedSafeCastLib for uint256;\\n\\n    /**\\n      * @notice Sets max ring buffer length in the Account.twabs Observation list.\\n                As users transfer/mint/burn tickets new Observation checkpoints are\\n                recorded. The current max cardinality guarantees a seven year minimum,\\n                of accurate historical lookups with current estimates of 1 new block\\n                every 15 seconds - assuming each block contains a transfer to trigger an\\n                observation write to storage.\\n      * @dev    The user Account.AccountDetails.cardinality parameter can NOT exceed\\n                the max cardinality variable. Preventing \\\"corrupted\\\" ring buffer lookup\\n                pointers and new observation checkpoints.\\n\\n                The MAX_CARDINALITY in fact guarantees at least 7.4 years of records:\\n                If 14 = block time in seconds\\n                (2**24) * 14 = 234881024 seconds of history\\n                234881024 / (365 * 24 * 60 * 60) ~= 7.44 years\\n    */\\n    uint24 public constant MAX_CARDINALITY = 16777215; // 2**24\\n\\n    /** @notice Struct ring buffer parameters for single user Account\\n      * @param balance       Current balance for an Account\\n      * @param nextTwabIndex Next uninitialized or updatable ring buffer checkpoint storage slot\\n      * @param cardinality   Current total \\\"initialized\\\" ring buffer checkpoints for single user AccountDetails.\\n                             Used to set initial boundary conditions for an efficient binary search.\\n    */\\n    struct AccountDetails {\\n        uint208 balance;\\n        uint24 nextTwabIndex;\\n        uint24 cardinality;\\n    }\\n\\n    /// @notice Combines account details with their twab history\\n    /// @param details The account details\\n    /// @param twabs The history of twabs for this account\\n    struct Account {\\n        AccountDetails details;\\n        ObservationLib.Observation[MAX_CARDINALITY] twabs;\\n    }\\n\\n    /// @notice Increases an account's balance and records a new twab.\\n    /// @param _account The account whose balance will be increased\\n    /// @param _amount The amount to increase the balance by\\n    /// @param _currentTime The current time\\n    /// @return accountDetails The new AccountDetails\\n    /// @return twab The user's latest TWAB\\n    /// @return isNew Whether the TWAB is new\\n    function increaseBalance(\\n        Account storage _account,\\n        uint208 _amount,\\n        uint32 _currentTime\\n    )\\n        internal\\n        returns (\\n            AccountDetails memory accountDetails,\\n            ObservationLib.Observation memory twab,\\n            bool isNew\\n        )\\n    {\\n        AccountDetails memory _accountDetails = _account.details;\\n        (accountDetails, twab, isNew) = _nextTwab(_account.twabs, _accountDetails, _currentTime);\\n        accountDetails.balance = _accountDetails.balance + _amount;\\n    }\\n\\n    /** @notice Calculates the next TWAB checkpoint for an account with a decreasing balance.\\n     * @dev    With Account struct and amount decreasing calculates the next TWAB observable checkpoint.\\n     * @param _account        Account whose balance will be decreased\\n     * @param _amount         Amount to decrease the balance by\\n     * @param _revertMessage  Revert message for insufficient balance\\n     * @return accountDetails Updated Account.details struct\\n     * @return twab           TWAB observation (with decreasing average)\\n     * @return isNew          Whether TWAB is new or calling twice in the same block\\n     */\\n    function decreaseBalance(\\n        Account storage _account,\\n        uint208 _amount,\\n        string memory _revertMessage,\\n        uint32 _currentTime\\n    )\\n        internal\\n        returns (\\n            AccountDetails memory accountDetails,\\n            ObservationLib.Observation memory twab,\\n            bool isNew\\n        )\\n    {\\n        AccountDetails memory _accountDetails = _account.details;\\n\\n        require(_accountDetails.balance >= _amount, _revertMessage);\\n\\n        (accountDetails, twab, isNew) = _nextTwab(_account.twabs, _accountDetails, _currentTime);\\n        unchecked {\\n            accountDetails.balance -= _amount;\\n        }\\n    }\\n\\n    /** @notice Calculates the average balance held by a user for a given time frame.\\n      * @dev    Finds the average balance between start and end timestamp epochs.\\n                Validates the supplied end time is within the range of elapsed time i.e. less then timestamp of now.\\n      * @param _twabs          Individual user Observation recorded checkpoints passed as storage pointer\\n      * @param _accountDetails User AccountDetails struct loaded in memory\\n      * @param _startTime      Start of timestamp range as an epoch\\n      * @param _endTime        End of timestamp range as an epoch\\n      * @param _currentTime    Block.timestamp\\n      * @return Average balance of user held between epoch timestamps start and end\\n    */\\n    function getAverageBalanceBetween(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _startTime,\\n        uint32 _endTime,\\n        uint32 _currentTime\\n    ) internal view returns (uint256) {\\n        uint32 endTime = _endTime > _currentTime ? _currentTime : _endTime;\\n\\n        return\\n            _getAverageBalanceBetween(_twabs, _accountDetails, _startTime, endTime, _currentTime);\\n    }\\n\\n    /// @notice Retrieves the oldest TWAB\\n    /// @param _twabs The storage array of twabs\\n    /// @param _accountDetails The TWAB account details\\n    /// @return index The index of the oldest TWAB in the twabs array\\n    /// @return twab The oldest TWAB\\n    function oldestTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails\\n    ) internal view returns (uint24 index, ObservationLib.Observation memory twab) {\\n        index = _accountDetails.nextTwabIndex;\\n        twab = _twabs[index];\\n\\n        // If the TWAB is not initialized we go to the beginning of the TWAB circular buffer at index 0\\n        if (twab.timestamp == 0) {\\n            index = 0;\\n            twab = _twabs[0];\\n        }\\n    }\\n\\n    /// @notice Retrieves the newest TWAB\\n    /// @param _twabs The storage array of twabs\\n    /// @param _accountDetails The TWAB account details\\n    /// @return index The index of the newest TWAB in the twabs array\\n    /// @return twab The newest TWAB\\n    function newestTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails\\n    ) internal view returns (uint24 index, ObservationLib.Observation memory twab) {\\n        index = uint24(RingBufferLib.newestIndex(_accountDetails.nextTwabIndex, MAX_CARDINALITY));\\n        twab = _twabs[index];\\n    }\\n\\n    /// @notice Retrieves amount at `_targetTime` timestamp\\n    /// @param _twabs List of TWABs to search through.\\n    /// @param _accountDetails Accounts details\\n    /// @param _targetTime Timestamp at which the reserved TWAB should be for.\\n    /// @return uint256 TWAB amount at `_targetTime`.\\n    function getBalanceAt(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _targetTime,\\n        uint32 _currentTime\\n    ) internal view returns (uint256) {\\n        uint32 timeToTarget = _targetTime > _currentTime ? _currentTime : _targetTime;\\n        return _getBalanceAt(_twabs, _accountDetails, timeToTarget, _currentTime);\\n    }\\n\\n    /// @notice Calculates the average balance held by a user for a given time frame.\\n    /// @param _startTime The start time of the time frame.\\n    /// @param _endTime The end time of the time frame.\\n    /// @return The average balance that the user held during the time frame.\\n    function _getAverageBalanceBetween(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _startTime,\\n        uint32 _endTime,\\n        uint32 _currentTime\\n    ) private view returns (uint256) {\\n        (uint24 oldestTwabIndex, ObservationLib.Observation memory oldTwab) = oldestTwab(\\n            _twabs,\\n            _accountDetails\\n        );\\n\\n        (uint24 newestTwabIndex, ObservationLib.Observation memory newTwab) = newestTwab(\\n            _twabs,\\n            _accountDetails\\n        );\\n\\n        ObservationLib.Observation memory startTwab = _calculateTwab(\\n            _twabs,\\n            _accountDetails,\\n            newTwab,\\n            oldTwab,\\n            newestTwabIndex,\\n            oldestTwabIndex,\\n            _startTime,\\n            _currentTime\\n        );\\n\\n        ObservationLib.Observation memory endTwab = _calculateTwab(\\n            _twabs,\\n            _accountDetails,\\n            newTwab,\\n            oldTwab,\\n            newestTwabIndex,\\n            oldestTwabIndex,\\n            _endTime,\\n            _currentTime\\n        );\\n\\n        // Difference in amount / time\\n        return (endTwab.amount - startTwab.amount) / OverflowSafeComparatorLib.checkedSub(endTwab.timestamp, startTwab.timestamp, _currentTime);\\n    }\\n\\n    /** @notice Searches TWAB history and calculate the difference between amount(s)/timestamp(s) to return average balance\\n                between the Observations closes to the supplied targetTime.\\n      * @param _twabs          Individual user Observation recorded checkpoints passed as storage pointer\\n      * @param _accountDetails User AccountDetails struct loaded in memory\\n      * @param _targetTime     Target timestamp to filter Observations in the ring buffer binary search\\n      * @param _currentTime    Block.timestamp\\n      * @return uint256 Time-weighted average amount between two closest observations.\\n    */\\n    function _getBalanceAt(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _targetTime,\\n        uint32 _currentTime\\n    ) private view returns (uint256) {\\n        uint24 newestTwabIndex;\\n        ObservationLib.Observation memory afterOrAt;\\n        ObservationLib.Observation memory beforeOrAt;\\n        (newestTwabIndex, beforeOrAt) = newestTwab(_twabs, _accountDetails);\\n\\n        // If `_targetTime` is chronologically after the newest TWAB, we can simply return the current balance\\n        if (beforeOrAt.timestamp.lte(_targetTime, _currentTime)) {\\n            return _accountDetails.balance;\\n        }\\n\\n        uint24 oldestTwabIndex;\\n        // Now, set before to the oldest TWAB\\n        (oldestTwabIndex, beforeOrAt) = oldestTwab(_twabs, _accountDetails);\\n\\n        // If `_targetTime` is chronologically before the oldest TWAB, we can early return\\n        if (_targetTime.lt(beforeOrAt.timestamp, _currentTime)) {\\n            return 0;\\n        }\\n\\n        // Otherwise, we perform the `binarySearch`\\n        (beforeOrAt, afterOrAt) = ObservationLib.binarySearch(\\n            _twabs,\\n            newestTwabIndex,\\n            oldestTwabIndex,\\n            _targetTime,\\n            _accountDetails.cardinality,\\n            _currentTime\\n        );\\n\\n        // Sum the difference in amounts and divide by the difference in timestamps.\\n        // The time-weighted average balance uses time measured between two epoch timestamps as\\n        // a constaint on the measurement when calculating the time weighted average balance.\\n        return\\n            (afterOrAt.amount - beforeOrAt.amount) / OverflowSafeComparatorLib.checkedSub(afterOrAt.timestamp, beforeOrAt.timestamp, _currentTime);\\n    }\\n\\n    /** @notice Calculates a user TWAB for a target timestamp using the historical TWAB records.\\n                The balance is linearly interpolated: amount differences / timestamp differences\\n                using the simple (after.amount - before.amount / end.timestamp - start.timestamp) formula.\\n    /** @dev    Binary search in _calculateTwab fails when searching out of bounds. Thus, before\\n                searching we exclude target timestamps out of range of newest/oldest TWAB(s).\\n                IF a search is before or after the range we \\\"extrapolate\\\" a Observation from the expected state.\\n      * @param _twabs           Individual user Observation recorded checkpoints passed as storage pointer\\n      * @param _accountDetails  User AccountDetails struct loaded in memory\\n      * @param _newestTwab      Newest TWAB in history (end of ring buffer)\\n      * @param _oldestTwab      Olderst TWAB in history (end of ring buffer)\\n      * @param _newestTwabIndex Pointer in ring buffer to newest TWAB\\n      * @param _oldestTwabIndex Pointer in ring buffer to oldest TWAB\\n      * @param _targetTimestamp Epoch timestamp to calculate for time (T) in the TWAB\\n      * @param _time            Block.timestamp\\n      * @return accountDetails Updated Account.details struct\\n    */\\n    function _calculateTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        ObservationLib.Observation memory _newestTwab,\\n        ObservationLib.Observation memory _oldestTwab,\\n        uint24 _newestTwabIndex,\\n        uint24 _oldestTwabIndex,\\n        uint32 _targetTimestamp,\\n        uint32 _time\\n    ) private view returns (ObservationLib.Observation memory) {\\n        // If `_targetTimestamp` is chronologically after the newest TWAB, we extrapolate a new one\\n        if (_newestTwab.timestamp.lt(_targetTimestamp, _time)) {\\n            return _computeNextTwab(_newestTwab, _accountDetails.balance, _targetTimestamp);\\n        }\\n\\n        if (_newestTwab.timestamp == _targetTimestamp) {\\n            return _newestTwab;\\n        }\\n\\n        if (_oldestTwab.timestamp == _targetTimestamp) {\\n            return _oldestTwab;\\n        }\\n\\n        // If `_targetTimestamp` is chronologically before the oldest TWAB, we create a zero twab\\n        if (_targetTimestamp.lt(_oldestTwab.timestamp, _time)) {\\n            return ObservationLib.Observation({ amount: 0, timestamp: _targetTimestamp });\\n        }\\n\\n        // Otherwise, both timestamps must be surrounded by twabs.\\n        (\\n            ObservationLib.Observation memory beforeOrAtStart,\\n            ObservationLib.Observation memory afterOrAtStart\\n        ) = ObservationLib.binarySearch(\\n                _twabs,\\n                _newestTwabIndex,\\n                _oldestTwabIndex,\\n                _targetTimestamp,\\n                _accountDetails.cardinality,\\n                _time\\n            );\\n\\n        uint224 heldBalance = (afterOrAtStart.amount - beforeOrAtStart.amount) /\\n            OverflowSafeComparatorLib.checkedSub(afterOrAtStart.timestamp, beforeOrAtStart.timestamp, _time);\\n\\n        return _computeNextTwab(beforeOrAtStart, heldBalance, _targetTimestamp);\\n    }\\n\\n    /**\\n     * @notice Calculates the next TWAB using the newestTwab and updated balance.\\n     * @dev    Storage of the TWAB obersation is managed by the calling function and not _computeNextTwab.\\n     * @param _currentTwab    Newest Observation in the Account.twabs list\\n     * @param _currentBalance User balance at time of most recent (newest) checkpoint write\\n     * @param _time           Current block.timestamp\\n     * @return TWAB Observation\\n     */\\n    function _computeNextTwab(\\n        ObservationLib.Observation memory _currentTwab,\\n        uint224 _currentBalance,\\n        uint32 _time\\n    ) private pure returns (ObservationLib.Observation memory) {\\n        // New twab amount = last twab amount (or zero) + (current amount * elapsed seconds)\\n        return\\n            ObservationLib.Observation({\\n                amount: _currentTwab.amount +\\n                    _currentBalance *\\n                    (_time.checkedSub(_currentTwab.timestamp, _time)),\\n                timestamp: _time\\n            });\\n    }\\n\\n    /// @notice Sets a new TWAB Observation at the next available index and returns the new account details.\\n    /// @dev Note that if _currentTime is before the last observation timestamp, it appears as an overflow\\n    /// @param _twabs The twabs array to insert into\\n    /// @param _accountDetails The current account details\\n    /// @param _currentTime The current time\\n    /// @return accountDetails The new account details\\n    /// @return twab The newest twab (may or may not be brand-new)\\n    /// @return isNew Whether the newest twab was created by this call\\n    function _nextTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _currentTime\\n    )\\n        private\\n        returns (\\n            AccountDetails memory accountDetails,\\n            ObservationLib.Observation memory twab,\\n            bool isNew\\n        )\\n    {\\n        (, ObservationLib.Observation memory _newestTwab) = newestTwab(_twabs, _accountDetails);\\n\\n        // if we're in the same block, return\\n        if (_newestTwab.timestamp == _currentTime) {\\n            return (_accountDetails, _newestTwab, false);\\n        }\\n\\n        ObservationLib.Observation memory newTwab = _computeNextTwab(\\n            _newestTwab,\\n            _accountDetails.balance,\\n            _currentTime\\n        );\\n\\n        _twabs[_accountDetails.nextTwabIndex] = newTwab;\\n\\n        AccountDetails memory nextAccountDetails = push(_accountDetails);\\n\\n        return (nextAccountDetails, newTwab, true);\\n    }\\n\\n    /// @notice \\\"Pushes\\\" a new element on the AccountDetails ring buffer, and returns the new AccountDetails\\n    /// @param _accountDetails The account details from which to pull the cardinality and next index\\n    /// @return The new AccountDetails\\n    function push(AccountDetails memory _accountDetails)\\n        internal\\n        pure\\n        returns (AccountDetails memory)\\n    {\\n        _accountDetails.nextTwabIndex = uint24(\\n            RingBufferLib.nextIndex(_accountDetails.nextTwabIndex, MAX_CARDINALITY)\\n        );\\n\\n        // Prevent the Account specific cardinality from exceeding the MAX_CARDINALITY.\\n        // The ring buffer length is limited by MAX_CARDINALITY. IF the account.cardinality\\n        // exceeds the max cardinality, new observations would be incorrectly set or the\\n        // observation would be out of \\\"bounds\\\" of the ring buffer. Once reached the\\n        // AccountDetails.cardinality will continue to be equal to max cardinality.\\n        if (_accountDetails.cardinality < MAX_CARDINALITY) {\\n            _accountDetails.cardinality += 1;\\n        }\\n\\n        return _accountDetails;\\n    }\\n}\\n\",\"keccak256\":\"0x446d8221329601d40464981a50a0e31f3fd48da0ebf0fea646c5a089ccfbdff4\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001dad38038062001dad833981016040819052620000349162000232565b6001600160a01b038416620000905760405162461bcd60e51b815260206004820152601b60248201527f475265776172642f47432d6e6f742d7a65726f2d61646472657373000000000060448201526064015b60405180910390fd5b6001600160a01b038316620000e85760405162461bcd60e51b815260206004820152601e60248201527f475265776172642f5661756c742d6e6f742d7a65726f2d616464726573730000604482015260640162000087565b6001600160a01b038216620001405760405162461bcd60e51b815260206004820152601c60248201527f475265776172642f4c69712d6e6f742d7a65726f2d6164647265737300000000604482015260640162000087565b633b9aca008163ffffffff16106200019b5760405162461bcd60e51b815260206004820152601960248201527f475265776172642f7374616b65722d6375742d6c742d31653900000000000000604482015260640162000087565b600580546001600160a01b03199081166001600160a01b03878116918217909355600680548316878516908117909155600780546001600160c01b031916600160a01b63ffffffff8816908102909516179487169485179055604051928352917f048ccaf1264df58374a01de5614345aa417e2d16af0f2e86b97729dc752e253f9060200160405180910390a450505050620002bb565b600080600080608085870312156200024957600080fd5b84516200025681620002a2565b60208601519094506200026981620002a2565b60408601519093506200027c81620002a2565b606086015190925063ffffffff811681146200029757600080fd5b939692955090935050565b6001600160a01b0381168114620002b857600080fd5b50565b611ae280620002cb6000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c8063ac9650d8116100b2578063f00b199711610081578063f741e08f11610066578063f741e08f14610366578063fbfa77cf14610379578063fd4016281461038c57600080fd5b8063f00b199714610322578063f1883e5d1461033557600080fd5b8063ac9650d814610289578063ac9fb71d146102a9578063bba06f27146102d5578063e5f744b8146102e857600080fd5b80635902fc3b1161010957806381d7af2e116100ee57806381d7af2e1461024557806395cebcd41461017657806399eecb3b1461027657600080fd5b80635902fc3b146101c95780636e8fc2d31461020457600080fd5b806306302ef11461013b57806331661930146101765780634046ebae1461018b5780635767bba5146101b6575b600080fd5b6101636101493660046114f5565b600060208181529281526040808220909352908152205481565b6040519081526020015b60405180910390f35b6101896101843660046115d3565b61039f565b005b60075461019e906001600160a01b031681565b6040516001600160a01b03909116815260200161016d565b6101896101c43660046114f5565b61040e565b6101dc6101d73660046116f6565b6104a1565b604080516001600160a01b03909316835267ffffffffffffffff90911660208301520161016d565b6102176102123660046114d8565b6104eb565b6040805182516001600160a01b0316815260209283015167ffffffffffffffff16928101929092520161016d565b61016361025336600461152e565b600260209081526000938452604080852082529284528284209052825290205481565b60055461019e906001600160a01b031681565b61029c610297366004611722565b61050e565b60405161016d9190611875565b6007546102c090600160a01b900463ffffffff1681565b60405163ffffffff909116815260200161016d565b6101636102e33660046114f5565b610603565b6101636102f6366004611579565b600160209081526000948552604080862082529385528385208152918452828420909152825290205481565b61016361033036600461165b565b61069f565b610163610343366004611614565b600360209081526000938452604080852082529284528284209052825290205481565b61018961037436600461165b565b610745565b60065461019e906001600160a01b031681565b61018961039a3660046117b9565b6107df565b6005546001600160a01b031633146103fe5760405162461bcd60e51b815260206004820152601c60248201527f475265776172642f6f6e6c792d4761756765436f6e74726f6c6c65720000000060448201526064015b60405180910390fd5b610409838383610ad4565b505050565b600554604051633c7d339760e11b81526001600160a01b038481166004830152838116602483015260009216906378fa672e9060440160206040518083038186803b15801561045c57600080fd5b505afa158015610470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104949190611814565b9050610409838383610ad4565b600460205281600052604060002081815481106104bd57600080fd5b6000918252602090912001546001600160a01b0381169250600160a01b900467ffffffffffffffff16905082565b604080518082019091526000808252602082015261050882610c22565b92915050565b60608167ffffffffffffffff81111561052957610529611a57565b60405190808252806020026020018201604052801561055c57816020015b60608152602001906001900390816105475790505b50905060005b828110156105fc576105cc3085858481811061058057610580611a41565b90506020028101906105929190611908565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d1092505050565b8282815181106105de576105de611a41565b602002602001018190525080806105f490611a10565b915050610562565b5092915050565b6001600160a01b0382811660009081526020818152604080832085851680855292528220805490839055600654929390926106419291168684610d35565b826001600160a01b0316846001600160a01b0316336001600160a01b03167f8ea6014d5675f425737c93493b7ab355a73eb41cf878f7315ac58f7753bcd7da8460405161069091815260200190565b60405180910390a49392505050565b600554604051633c7d339760e11b81526001600160a01b038581166004830152838116602483015260009283929116906378fa672e9060440160206040518083038186803b1580156106f057600080fd5b505afa158015610704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107289190611814565b9050600061073886868685610dbd565b50925050505b9392505050565b600554604051633c7d339760e11b81526001600160a01b038581166004830152838116602483015260009216906378fa672e9060440160206040518083038186803b15801561079357600080fd5b505afa1580156107a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cb9190611814565b90506107d984848484611010565b50505050565b6007546001600160a01b031633146108395760405162461bcd60e51b815260206004820152601760248201527f475265776172642f6f6e6c792d6c697175696461746f7200000000000000000060448201526064016103f5565b83600061084582610c22565b905080600001516001600160a01b0316846001600160a01b03161461093b576001600160a01b038083166000818152600460209081526040808320815180830183528a871680825267ffffffffffffffff4281811684880190815285546001810187559589529690972092519290930180549551909316600160a01b027fffffffff0000000000000000000000000000000000000000000000000000000090951691909716179290921790915551909291907fd38aa1c6709087859dfa9ca795d9441a64c1fa0b1bf23d8ad02c1853b971e33c906109269085815260200190565b60405180910390a361093783610c22565b9150505b600754600090633b9aca009061095e90600160a01b900463ffffffff16866119ae565b610968919061198c565b6005546040517f117d37e60000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301529293506000929091169063117d37e69060240160206040518083038186803b1580156109cc57600080fd5b505afa1580156109e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a049190611814565b610a1683670de0b6b3a76400006119ae565b610a20919061198c565b6001600160a01b038086166000908152600360209081526040808320885190941683529281528282208782015167ffffffffffffffff168352905290812080549293508392909190610a73908490611974565b909155505060408051868152602081018490529081018290526001600160a01b0380881691908616907f1b0006daff5bb99d1383ffc4326984a27347192b77ddb40fe18ec9720d0929a89060600160405180910390a3505050505050505050565b6001600160a01b038316600090815260046020908152604080832054815180830190925283825291810192909252908115610be057815b8015610bda57610b1c6001826119cd565b6001600160a01b038716600090815260046020526040902080549192509082908110610b4a57610b4a611a41565b6000918252602091829020604080518082019091529101546001600160a01b0381168252600160a01b900467ffffffffffffffff16918101919091529150610b9486838787611062565b5081516001600160a01b038087166000908152600260209081526040808320848c168452825280832093909416825291909152204267ffffffffffffffff169055610b0b565b50610c1b565b6001600160a01b03808516600090815260026020908152604080832093891683529281528282208280529052204267ffffffffffffffff1690555b5050505050565b604080518082018252600080825260208083018290526001600160a01b0385168252600481528382208054855181840281018401909652808652939492939091849084015b82821015610cb757600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b900467ffffffffffffffff1681830152825260019092019101610c67565b505082519293505081159050610cf45781610cd36001836119cd565b81518110610ce357610ce3611a41565b602002602001015192505050919050565b5050604080518082019091526000808252602082015292915050565b606061073e8383604051806060016040528060278152602001611a866027913961115c565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526107d9908590611247565b6001600160a01b0382811660008181526001602090815260408083208986168085529083528184208951871685528352818420898401805167ffffffffffffffff908116875291855283862054838752600386528487208c518a1688528652848720915190921686528452828520548a51968652600285528386209286529184528285209590961684529390915281205490928392909180610f95576001600160a01b038916600090815260046020908152604080832080548251818502810185019093528083529192909190849084015b82821015610edf57600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b900467ffffffffffffffff1681830152825260019092019101610e8f565b5050825192935050506001811115610f5c57600082610eff6001846119cd565b81518110610f0f57610f0f611a41565b60200260200101519050610f588a8d83600001516001600160a01b0392831660009081526002602090815260408083209486168352938152838220929094168152925290205490565b9350505b82610f92576001600160a01b03808a166000908152600260209081526040808320938f1683529281528282208280529052205492505b50505b60008082118015610fb3575081896020015167ffffffffffffffff16115b905080158015610fc1575083155b15610fd6576000839550955050505050611007565b670de0b6b3a764000087610fea86866119cd565b610ff491906119ae565b610ffe919061198c565b95509193505050505b94509492505050565b61101c84848484611062565b5082516001600160a01b038084166000908152600260209081526040808320848a168452825280832093909416825291909152204267ffffffffffffffff1690556107d9565b600080600061107387878787610dbd565b6001600160a01b0380881660009081526001602090815260408083208d8516845282528083208c5190941683529281528282208b82015167ffffffffffffffff16835290522081905590925090508115611152576001600160a01b038086166000908152602081815260408083208a51909416835292905290812080548492906110fe908490611974565b9091555050855160408051848152602081018490526001600160a01b0380891693811692908b16917f7e27222c50a5510dfc61468d936b48c880bfbd05c1eb59c5be79b06e582369dd910160405180910390a45b5095945050505050565b6060833b6111d25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016103f5565b600080856001600160a01b0316856040516111ed9190611859565b600060405180830381855af49150503d8060008114611228576040519150601f19603f3d011682016040523d82523d6000602084013e61122d565b606091505b509150915061123d82828661132c565b9695505050505050565b600061129c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113659092919063ffffffff16565b80519091501561040957808060200190518101906112ba9190611797565b6104095760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016103f5565b6060831561133b57508161073e565b82511561134b5782518084602001fd5b8160405162461bcd60e51b81526004016103f591906118f5565b6060611374848460008561137c565b949350505050565b6060824710156113f45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016103f5565b843b6114425760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103f5565b600080866001600160a01b0316858760405161145e9190611859565b60006040518083038185875af1925050503d806000811461149b576040519150601f19603f3d011682016040523d82523d6000602084013e6114a0565b606091505b50915091506114b082828661132c565b979650505050505050565b803567ffffffffffffffff811681146114d357600080fd5b919050565b6000602082840312156114ea57600080fd5b813561073e81611a6d565b6000806040838503121561150857600080fd5b823561151381611a6d565b9150602083013561152381611a6d565b809150509250929050565b60008060006060848603121561154357600080fd5b833561154e81611a6d565b9250602084013561155e81611a6d565b9150604084013561156e81611a6d565b809150509250925092565b6000806000806080858703121561158f57600080fd5b843561159a81611a6d565b935060208501356115aa81611a6d565b925060408501356115ba81611a6d565b91506115c8606086016114bb565b905092959194509250565b6000806000606084860312156115e857600080fd5b83356115f381611a6d565b9250602084013561160381611a6d565b929592945050506040919091013590565b60008060006060848603121561162957600080fd5b833561163481611a6d565b9250602084013561164481611a6d565b9150611652604085016114bb565b90509250925092565b6000806000838503608081121561167157600080fd5b843561167c81611a6d565b93506040601f198201121561169057600080fd5b506040516040810181811067ffffffffffffffff821117156116c257634e487b7160e01b600052604160045260246000fd5b60405260208501356116d381611a6d565b81526116e1604086016114bb565b60208201529150606084013561156e81611a6d565b6000806040838503121561170957600080fd5b823561171481611a6d565b946020939093013593505050565b6000806020838503121561173557600080fd5b823567ffffffffffffffff8082111561174d57600080fd5b818501915085601f83011261176157600080fd5b81358181111561177057600080fd5b8660208260051b850101111561178557600080fd5b60209290920196919550909350505050565b6000602082840312156117a957600080fd5b8151801515811461073e57600080fd5b600080600080600060a086880312156117d157600080fd5b85356117dc81611a6d565b945060208601356117ec81611a6d565b935060408601359250606086013561180381611a6d565b949793965091946080013592915050565b60006020828403121561182657600080fd5b5051919050565b600081518084526118458160208601602086016119e4565b601f01601f19169290920160200192915050565b6000825161186b8184602087016119e4565b9190910192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156118e8577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526118d685835161182d565b9450928501929085019060010161189c565b5092979650505050505050565b60208152600061073e602083018461182d565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261193d57600080fd5b83018035915067ffffffffffffffff82111561195857600080fd5b60200191503681900382131561196d57600080fd5b9250929050565b6000821982111561198757611987611a2b565b500190565b6000826119a957634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156119c8576119c8611a2b565b500290565b6000828210156119df576119df611a2b565b500390565b60005b838110156119ff5781810151838201526020016119e7565b838111156107d95750506000910152565b6000600019821415611a2457611a24611a2b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611a8257600080fd5b5056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f27935551d4c3396dac7e33dad73096cc7ab4ce356d7096b58d2606ad0fa045764736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c8063ac9650d8116100b2578063f00b199711610081578063f741e08f11610066578063f741e08f14610366578063fbfa77cf14610379578063fd4016281461038c57600080fd5b8063f00b199714610322578063f1883e5d1461033557600080fd5b8063ac9650d814610289578063ac9fb71d146102a9578063bba06f27146102d5578063e5f744b8146102e857600080fd5b80635902fc3b1161010957806381d7af2e116100ee57806381d7af2e1461024557806395cebcd41461017657806399eecb3b1461027657600080fd5b80635902fc3b146101c95780636e8fc2d31461020457600080fd5b806306302ef11461013b57806331661930146101765780634046ebae1461018b5780635767bba5146101b6575b600080fd5b6101636101493660046114f5565b600060208181529281526040808220909352908152205481565b6040519081526020015b60405180910390f35b6101896101843660046115d3565b61039f565b005b60075461019e906001600160a01b031681565b6040516001600160a01b03909116815260200161016d565b6101896101c43660046114f5565b61040e565b6101dc6101d73660046116f6565b6104a1565b604080516001600160a01b03909316835267ffffffffffffffff90911660208301520161016d565b6102176102123660046114d8565b6104eb565b6040805182516001600160a01b0316815260209283015167ffffffffffffffff16928101929092520161016d565b61016361025336600461152e565b600260209081526000938452604080852082529284528284209052825290205481565b60055461019e906001600160a01b031681565b61029c610297366004611722565b61050e565b60405161016d9190611875565b6007546102c090600160a01b900463ffffffff1681565b60405163ffffffff909116815260200161016d565b6101636102e33660046114f5565b610603565b6101636102f6366004611579565b600160209081526000948552604080862082529385528385208152918452828420909152825290205481565b61016361033036600461165b565b61069f565b610163610343366004611614565b600360209081526000938452604080852082529284528284209052825290205481565b61018961037436600461165b565b610745565b60065461019e906001600160a01b031681565b61018961039a3660046117b9565b6107df565b6005546001600160a01b031633146103fe5760405162461bcd60e51b815260206004820152601c60248201527f475265776172642f6f6e6c792d4761756765436f6e74726f6c6c65720000000060448201526064015b60405180910390fd5b610409838383610ad4565b505050565b600554604051633c7d339760e11b81526001600160a01b038481166004830152838116602483015260009216906378fa672e9060440160206040518083038186803b15801561045c57600080fd5b505afa158015610470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104949190611814565b9050610409838383610ad4565b600460205281600052604060002081815481106104bd57600080fd5b6000918252602090912001546001600160a01b0381169250600160a01b900467ffffffffffffffff16905082565b604080518082019091526000808252602082015261050882610c22565b92915050565b60608167ffffffffffffffff81111561052957610529611a57565b60405190808252806020026020018201604052801561055c57816020015b60608152602001906001900390816105475790505b50905060005b828110156105fc576105cc3085858481811061058057610580611a41565b90506020028101906105929190611908565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d1092505050565b8282815181106105de576105de611a41565b602002602001018190525080806105f490611a10565b915050610562565b5092915050565b6001600160a01b0382811660009081526020818152604080832085851680855292528220805490839055600654929390926106419291168684610d35565b826001600160a01b0316846001600160a01b0316336001600160a01b03167f8ea6014d5675f425737c93493b7ab355a73eb41cf878f7315ac58f7753bcd7da8460405161069091815260200190565b60405180910390a49392505050565b600554604051633c7d339760e11b81526001600160a01b038581166004830152838116602483015260009283929116906378fa672e9060440160206040518083038186803b1580156106f057600080fd5b505afa158015610704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107289190611814565b9050600061073886868685610dbd565b50925050505b9392505050565b600554604051633c7d339760e11b81526001600160a01b038581166004830152838116602483015260009216906378fa672e9060440160206040518083038186803b15801561079357600080fd5b505afa1580156107a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cb9190611814565b90506107d984848484611010565b50505050565b6007546001600160a01b031633146108395760405162461bcd60e51b815260206004820152601760248201527f475265776172642f6f6e6c792d6c697175696461746f7200000000000000000060448201526064016103f5565b83600061084582610c22565b905080600001516001600160a01b0316846001600160a01b03161461093b576001600160a01b038083166000818152600460209081526040808320815180830183528a871680825267ffffffffffffffff4281811684880190815285546001810187559589529690972092519290930180549551909316600160a01b027fffffffff0000000000000000000000000000000000000000000000000000000090951691909716179290921790915551909291907fd38aa1c6709087859dfa9ca795d9441a64c1fa0b1bf23d8ad02c1853b971e33c906109269085815260200190565b60405180910390a361093783610c22565b9150505b600754600090633b9aca009061095e90600160a01b900463ffffffff16866119ae565b610968919061198c565b6005546040517f117d37e60000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301529293506000929091169063117d37e69060240160206040518083038186803b1580156109cc57600080fd5b505afa1580156109e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a049190611814565b610a1683670de0b6b3a76400006119ae565b610a20919061198c565b6001600160a01b038086166000908152600360209081526040808320885190941683529281528282208782015167ffffffffffffffff168352905290812080549293508392909190610a73908490611974565b909155505060408051868152602081018490529081018290526001600160a01b0380881691908616907f1b0006daff5bb99d1383ffc4326984a27347192b77ddb40fe18ec9720d0929a89060600160405180910390a3505050505050505050565b6001600160a01b038316600090815260046020908152604080832054815180830190925283825291810192909252908115610be057815b8015610bda57610b1c6001826119cd565b6001600160a01b038716600090815260046020526040902080549192509082908110610b4a57610b4a611a41565b6000918252602091829020604080518082019091529101546001600160a01b0381168252600160a01b900467ffffffffffffffff16918101919091529150610b9486838787611062565b5081516001600160a01b038087166000908152600260209081526040808320848c168452825280832093909416825291909152204267ffffffffffffffff169055610b0b565b50610c1b565b6001600160a01b03808516600090815260026020908152604080832093891683529281528282208280529052204267ffffffffffffffff1690555b5050505050565b604080518082018252600080825260208083018290526001600160a01b0385168252600481528382208054855181840281018401909652808652939492939091849084015b82821015610cb757600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b900467ffffffffffffffff1681830152825260019092019101610c67565b505082519293505081159050610cf45781610cd36001836119cd565b81518110610ce357610ce3611a41565b602002602001015192505050919050565b5050604080518082019091526000808252602082015292915050565b606061073e8383604051806060016040528060278152602001611a866027913961115c565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526107d9908590611247565b6001600160a01b0382811660008181526001602090815260408083208986168085529083528184208951871685528352818420898401805167ffffffffffffffff908116875291855283862054838752600386528487208c518a1688528652848720915190921686528452828520548a51968652600285528386209286529184528285209590961684529390915281205490928392909180610f95576001600160a01b038916600090815260046020908152604080832080548251818502810185019093528083529192909190849084015b82821015610edf57600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b900467ffffffffffffffff1681830152825260019092019101610e8f565b5050825192935050506001811115610f5c57600082610eff6001846119cd565b81518110610f0f57610f0f611a41565b60200260200101519050610f588a8d83600001516001600160a01b0392831660009081526002602090815260408083209486168352938152838220929094168152925290205490565b9350505b82610f92576001600160a01b03808a166000908152600260209081526040808320938f1683529281528282208280529052205492505b50505b60008082118015610fb3575081896020015167ffffffffffffffff16115b905080158015610fc1575083155b15610fd6576000839550955050505050611007565b670de0b6b3a764000087610fea86866119cd565b610ff491906119ae565b610ffe919061198c565b95509193505050505b94509492505050565b61101c84848484611062565b5082516001600160a01b038084166000908152600260209081526040808320848a168452825280832093909416825291909152204267ffffffffffffffff1690556107d9565b600080600061107387878787610dbd565b6001600160a01b0380881660009081526001602090815260408083208d8516845282528083208c5190941683529281528282208b82015167ffffffffffffffff16835290522081905590925090508115611152576001600160a01b038086166000908152602081815260408083208a51909416835292905290812080548492906110fe908490611974565b9091555050855160408051848152602081018490526001600160a01b0380891693811692908b16917f7e27222c50a5510dfc61468d936b48c880bfbd05c1eb59c5be79b06e582369dd910160405180910390a45b5095945050505050565b6060833b6111d25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016103f5565b600080856001600160a01b0316856040516111ed9190611859565b600060405180830381855af49150503d8060008114611228576040519150601f19603f3d011682016040523d82523d6000602084013e61122d565b606091505b509150915061123d82828661132c565b9695505050505050565b600061129c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113659092919063ffffffff16565b80519091501561040957808060200190518101906112ba9190611797565b6104095760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016103f5565b6060831561133b57508161073e565b82511561134b5782518084602001fd5b8160405162461bcd60e51b81526004016103f591906118f5565b6060611374848460008561137c565b949350505050565b6060824710156113f45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016103f5565b843b6114425760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103f5565b600080866001600160a01b0316858760405161145e9190611859565b60006040518083038185875af1925050503d806000811461149b576040519150601f19603f3d011682016040523d82523d6000602084013e6114a0565b606091505b50915091506114b082828661132c565b979650505050505050565b803567ffffffffffffffff811681146114d357600080fd5b919050565b6000602082840312156114ea57600080fd5b813561073e81611a6d565b6000806040838503121561150857600080fd5b823561151381611a6d565b9150602083013561152381611a6d565b809150509250929050565b60008060006060848603121561154357600080fd5b833561154e81611a6d565b9250602084013561155e81611a6d565b9150604084013561156e81611a6d565b809150509250925092565b6000806000806080858703121561158f57600080fd5b843561159a81611a6d565b935060208501356115aa81611a6d565b925060408501356115ba81611a6d565b91506115c8606086016114bb565b905092959194509250565b6000806000606084860312156115e857600080fd5b83356115f381611a6d565b9250602084013561160381611a6d565b929592945050506040919091013590565b60008060006060848603121561162957600080fd5b833561163481611a6d565b9250602084013561164481611a6d565b9150611652604085016114bb565b90509250925092565b6000806000838503608081121561167157600080fd5b843561167c81611a6d565b93506040601f198201121561169057600080fd5b506040516040810181811067ffffffffffffffff821117156116c257634e487b7160e01b600052604160045260246000fd5b60405260208501356116d381611a6d565b81526116e1604086016114bb565b60208201529150606084013561156e81611a6d565b6000806040838503121561170957600080fd5b823561171481611a6d565b946020939093013593505050565b6000806020838503121561173557600080fd5b823567ffffffffffffffff8082111561174d57600080fd5b818501915085601f83011261176157600080fd5b81358181111561177057600080fd5b8660208260051b850101111561178557600080fd5b60209290920196919550909350505050565b6000602082840312156117a957600080fd5b8151801515811461073e57600080fd5b600080600080600060a086880312156117d157600080fd5b85356117dc81611a6d565b945060208601356117ec81611a6d565b935060408601359250606086013561180381611a6d565b949793965091946080013592915050565b60006020828403121561182657600080fd5b5051919050565b600081518084526118458160208601602086016119e4565b601f01601f19169290920160200192915050565b6000825161186b8184602087016119e4565b9190910192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156118e8577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526118d685835161182d565b9450928501929085019060010161189c565b5092979650505050505050565b60208152600061073e602083018461182d565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261193d57600080fd5b83018035915067ffffffffffffffff82111561195857600080fd5b60200191503681900382131561196d57600080fd5b9250929050565b6000821982111561198757611987611a2b565b500190565b6000826119a957634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156119c8576119c8611a2b565b500290565b6000828210156119df576119df611a2b565b500390565b60005b838110156119ff5781810151838201526020016119e7565b838111156107d95750506000910152565b6000600019821415611a2457611a24611a2b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611a8257600080fd5b5056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f27935551d4c3396dac7e33dad73096cc7ab4ce356d7096b58d2606ad0fa045764736f6c63430008060033",
  "devdoc": {
    "author": "PoolTogether Inc Team",
    "details": "This contract is only keeping track of the rewards. Reward tokens are actually stored in the TokenVault contract.",
    "events": {
      "Deployed(address,address,address,uint32)": {
        "params": {
          "gaugeController": "Address of the GaugeController",
          "liquidator": "Address of the Liquidator",
          "stakerCut": "Percentage of rewards that goes to stakers",
          "vault": "Address of the Vault"
        }
      },
      "RewardTokenPushed(address,address,uint256)": {
        "params": {
          "gauge": "Address of the gauge for which the reward token is added",
          "timestamp": "Timestamp at which the reward token was pushed",
          "token": "Address of the token being pushed"
        }
      },
      "RewardsAdded(address,address,uint256,uint256,uint256)": {
        "params": {
          "amount": "Amount of tokens sent to the vault",
          "exchangeRate": "New exchange rate for this `token` in this `gauge`",
          "gauge": "Address of the gauge for which tokens were added",
          "stakerRewards": "Amount of rewards allocated to stakers",
          "token": "Address of the token sent to the vault"
        }
      },
      "RewardsClaimed(address,address,address,uint256,uint256)": {
        "params": {
          "amount": "Total amount of rewards claimed",
          "exchangeRate": "Exchange rate at which the rewards were claimed",
          "gauge": "Address of the gauge for which the user claimed rewards",
          "token": "Address of the token for which the user claimed rewards",
          "user": "Address of the user for which the rewards were claimed"
        }
      },
      "RewardsRedeemed(address,address,address,uint256)": {
        "params": {
          "amount": "Total amount of rewards redeemed",
          "caller": "Address who called the redeem function",
          "token": "Address of the token for which the user redeemed rewards",
          "user": "Address of the user for which the rewards were redeemed"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "afterDecreaseGauge(address,address,uint256)": {
        "params": {
          "gauge": "Address of the gauge to decrease stake for",
          "oldStakeBalance": "Old stake balance of the user",
          "user": "Address of the user to decrease stake for"
        }
      },
      "afterIncreaseGauge(address,address,uint256)": {
        "params": {
          "gauge": "Address of the gauge to increase stake for",
          "oldStakeBalance": "Old stake balance of the user",
          "user": "Address of the user to increase stake for"
        }
      },
      "afterSwap(address,address,uint256,address,uint256)": {
        "details": "Called by the liquidator contract anytime tokens are liquidated.Will push `token` to the `gaugeRewardTokens` mapping if different from the current one.",
        "params": {
          "_ticket": "Address of the tickets that were sold",
          "_token": "Address of the token that the tickets were sold for",
          "_tokenAmount": "Amount of tokens that the tickets were sold for"
        }
      },
      "claim(address,(address,uint64),address)": {
        "params": {
          "_gauge": "Address of the gauge to claim rewards for",
          "_rewardToken": "Reward token to claim rewards for",
          "_user": "Address of the user to claim rewards for"
        }
      },
      "claimAll(address,address)": {
        "params": {
          "_gauge": "Address of the gauge to claim rewards for",
          "_user": "Address of the user to claim rewards for"
        }
      },
      "constructor": {
        "params": {
          "_gaugeController": "Address of the GaugeController",
          "_liquidator": "Address of the Liquidator",
          "_stakerCut": "Percentage of rewards that goes to stakers",
          "_vault": "Address of the Vault"
        }
      },
      "currentRewardToken(address)": {
        "params": {
          "_gauge": "Address of the gauge to get current reward token for"
        },
        "returns": {
          "_0": "Current reward token for the given gauge"
        }
      },
      "getRewards(address,(address,uint64),address)": {
        "params": {
          "_gauge": "Address of the gauge to get rewards for",
          "_rewardToken": "Reward token to get rewards for",
          "_user": "Address of the user to get rewards for"
        },
        "returns": {
          "_0": "Amount of rewards for the given gauge and token"
        }
      },
      "multicall(bytes[])": {
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "redeem(address,address)": {
        "details": "Rewards can be redeemed on behalf of a user.",
        "params": {
          "_token": "Address of the token to redeem rewards for",
          "_user": "Address of the user to redeem rewards for"
        },
        "returns": {
          "_0": "Amount of rewards redeemed"
        }
      }
    },
    "stateVariables": {
      "gaugeRewardTokenExchangeRates": {
        "details": "gauge => reward token address => reward token timestamp => exchange rate"
      },
      "gaugeRewardTokens": {
        "details": "gauge => reward tokens array"
      },
      "userGaugeRewardTokenExchangeRates": {
        "details": "user => gauge => reward token address => reward token timestamp => exchange rate"
      },
      "userGaugeRewardTokenLastClaimedTimestamp": {
        "details": "user => gauge => reward token address => timestamp"
      },
      "userRewardTokenBalances": {
        "details": "user => reward token address => balance"
      }
    },
    "title": "PoolTogether V4 GaugeReward",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Deployed(address,address,address,uint32)": {
        "notice": "Emitted when the contract is deployed"
      },
      "RewardTokenPushed(address,address,uint256)": {
        "notice": "Emitted when a new reward token is pushed onto the `gaugeRewardTokens` mapping"
      },
      "RewardsAdded(address,address,uint256,uint256,uint256)": {
        "notice": "Emitted when tickets are swapped for tokens"
      },
      "RewardsClaimed(address,address,address,uint256,uint256)": {
        "notice": "Emitted when a user claimed their rewards for a given gauge and token"
      },
      "RewardsRedeemed(address,address,address,uint256)": {
        "notice": "Emitted when a user redeemed their rewards for a given token"
      }
    },
    "kind": "user",
    "methods": {
      "afterDecreaseGauge(address,address,uint256)": {
        "notice": "Callback function to call in GaugeController after a user has decreased his gauge stake."
      },
      "afterIncreaseGauge(address,address,uint256)": {
        "notice": "Fallback function to call in GaugeController after a user has increased their gauge stake.Callback function to call in GaugeController after a user has increased their gauge stake."
      },
      "afterSwap(address,address,uint256,address,uint256)": {
        "notice": "Records exchange rate after swapping an amount of `ticket` for `token`."
      },
      "claim(address,(address,uint64),address)": {
        "notice": "Claim user rewards for a given gauge and reward token."
      },
      "claimAll(address,address)": {
        "notice": "Claim all user rewards for a given gauge."
      },
      "constructor": {
        "notice": "GaugeReward constructor"
      },
      "currentRewardToken(address)": {
        "notice": "Return the current reward token for the given gauge."
      },
      "gaugeController()": {
        "notice": "GaugeController contract address"
      },
      "gaugeRewardTokenExchangeRates(address,address,uint64)": {
        "notice": "Tracks reward token exchange rates per gauge"
      },
      "gaugeRewardTokens(address,uint256)": {
        "notice": "Tracks reward tokens per gauge"
      },
      "getRewards(address,(address,uint64),address)": {
        "notice": "Get user rewards for a given gauge and token."
      },
      "liquidator()": {
        "notice": "Address of the liquidator that this contract is listening to"
      },
      "redeem(address,address)": {
        "notice": "Redeem user rewards for a given token."
      },
      "stakerCut()": {
        "notice": "Percentage of rewards that goes to stakers. Fixed point 9 number that is less than 1."
      },
      "userGaugeRewardTokenExchangeRates(address,address,address,uint64)": {
        "notice": "Tracks reward token exchange rate per user and gauge"
      },
      "userGaugeRewardTokenLastClaimedTimestamp(address,address,address)": {
        "notice": "Tracks user last claimed timestamp per gauge and reward token"
      },
      "userRewardTokenBalances(address,address)": {
        "notice": "Tracks user token reward balances"
      },
      "vault()": {
        "notice": "Vault contract address"
      }
    },
    "notice": "The GaugeReward contract handles rewards for users who staked in one or several gauges on the GaugeController contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11112,
        "contract": "contracts/GaugeReward.sol:GaugeReward",
        "label": "userRewardTokenBalances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_contract(IERC20)663,t_uint256))"
      },
      {
        "astId": 11124,
        "contract": "contracts/GaugeReward.sol:GaugeReward",
        "label": "userGaugeRewardTokenExchangeRates",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_contract(IERC20)663,t_mapping(t_uint64,t_uint256))))"
      },
      {
        "astId": 11133,
        "contract": "contracts/GaugeReward.sol:GaugeReward",
        "label": "userGaugeRewardTokenLastClaimedTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 11143,
        "contract": "contracts/GaugeReward.sol:GaugeReward",
        "label": "gaugeRewardTokenExchangeRates",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_contract(IERC20)663,t_mapping(t_uint64,t_uint256)))"
      },
      {
        "astId": 11156,
        "contract": "contracts/GaugeReward.sol:GaugeReward",
        "label": "gaugeRewardTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_struct(RewardToken)11149_storage)dyn_storage)"
      },
      {
        "astId": 11160,
        "contract": "contracts/GaugeReward.sol:GaugeReward",
        "label": "gaugeController",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IGaugeController)16455"
      },
      {
        "astId": 11163,
        "contract": "contracts/GaugeReward.sol:GaugeReward",
        "label": "vault",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 11166,
        "contract": "contracts/GaugeReward.sol:GaugeReward",
        "label": "liquidator",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 11169,
        "contract": "contracts/GaugeReward.sol:GaugeReward",
        "label": "stakerCut",
        "offset": 20,
        "slot": "7",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(RewardToken)11149_storage)dyn_storage": {
        "base": "t_struct(RewardToken)11149_storage",
        "encoding": "dynamic_array",
        "label": "struct GaugeReward.RewardToken[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)663": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IGaugeController)16455": {
        "encoding": "inplace",
        "label": "contract IGaugeController",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(RewardToken)11149_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GaugeReward.RewardToken[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(RewardToken)11149_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_contract(IERC20)663,t_mapping(t_uint64,t_uint256))))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(contract IERC20 => mapping(uint64 => uint256))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_contract(IERC20)663,t_mapping(t_uint64,t_uint256)))"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_contract(IERC20)663,t_mapping(t_uint64,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(contract IERC20 => mapping(uint64 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)663,t_mapping(t_uint64,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_contract(IERC20)663,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(contract IERC20 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)663,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)663,t_mapping(t_uint64,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)663",
        "label": "mapping(contract IERC20 => mapping(uint64 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_uint256)"
      },
      "t_mapping(t_contract(IERC20)663,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)663",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint64,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RewardToken)11149_storage": {
        "encoding": "inplace",
        "label": "struct GaugeReward.RewardToken",
        "members": [
          {
            "astId": 11146,
            "contract": "contracts/GaugeReward.sol:GaugeReward",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)663"
          },
          {
            "astId": 11148,
            "contract": "contracts/GaugeReward.sol:GaugeReward",
            "label": "timestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}