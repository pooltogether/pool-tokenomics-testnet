{
  "address": "0xF3666718A247206878D27CC8F5C0c3719D6Cc52d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IGaugeController",
          "name": "_gaugeController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidator",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_stakerCut",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IGaugeController",
          "name": "gaugeController",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "stakerCut",
          "type": "uint32"
        }
      ],
      "name": "Deployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RewardTokenPushed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exchangeRate",
          "type": "uint256"
        }
      ],
      "name": "RewardsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exchangeRate",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_oldStakeBalance",
          "type": "uint256"
        }
      ],
      "name": "afterDecreaseGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_oldStakeBalance",
          "type": "uint256"
        }
      ],
      "name": "afterIncreaseGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPrizePool",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract ITicket",
          "name": "ticket",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "afterSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "currentRewardToken",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            }
          ],
          "internalType": "struct GaugeReward.RewardToken",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gaugeController",
      "outputs": [
        {
          "internalType": "contract IGaugeController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gaugeRewardTokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakerCut",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenGaugeExchangeRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userLastClaimedTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userTokenGaugeExchangeRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userTokenRewardBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa788e2d4c8fc432aa694ef01432d83e47926787d61c3ae81d091ddbe4a45deec",
  "receipt": {
    "to": null,
    "from": "0x3A791e828fDd420fbE16416efDF509E4b9088Dd4",
    "contractAddress": "0xF3666718A247206878D27CC8F5C0c3719D6Cc52d",
    "transactionIndex": 25,
    "gasUsed": "1345653",
    "logsBloom": "0x
    "blockHash": "0xee6f1892081ab93bf2c13e5ff6652851379fb3d7b8f12a38b5e783f556e1c26a",
    "transactionHash": "0xa788e2d4c8fc432aa694ef01432d83e47926787d61c3ae81d091ddbe4a45deec",
    "logs": [
      {
        "transactionIndex": 25,
        "blockNumber": 10709703,
        "transactionHash": "0xa788e2d4c8fc432aa694ef01432d83e47926787d61c3ae81d091ddbe4a45deec",
        "address": "0xF3666718A247206878D27CC8F5C0c3719D6Cc52d",
        "topics": [
          "0x048ccaf1264df58374a01de5614345aa417e2d16af0f2e86b97729dc752e253f",
          "0x000000000000000000000000263886a9f0b07e32f5d9239798042ec41b636dc9",
          "0x00000000000000000000000008551a424a092b9eaeebee2d1a11eab79dc58391",
          "0x000000000000000000000000f12ad182e0990dd894a96b60604477f82ac3c4cd"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000005f5e100",
        "logIndex": 27,
        "blockHash": "0xee6f1892081ab93bf2c13e5ff6652851379fb3d7b8f12a38b5e783f556e1c26a"
      }
    ],
    "blockNumber": 10709703,
    "cumulativeGasUsed": "3938879",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x263886A9f0b07E32f5D9239798042EC41b636Dc9",
    "0x08551a424a092B9eaEEbEe2d1a11EAB79Dc58391",
    "0xf12aD182E0990DD894A96b60604477F82AC3C4cd",
    "100000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "b05209ff2ac583caae27b575ae3779ab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IGaugeController\",\"name\":\"_gaugeController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_stakerCut\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IGaugeController\",\"name\":\"gaugeController\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"stakerCut\",\"type\":\"uint32\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RewardTokenPushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"}],\"name\":\"RewardsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_oldStakeBalance\",\"type\":\"uint256\"}],\"name\":\"afterDecreaseGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_oldStakeBalance\",\"type\":\"uint256\"}],\"name\":\"afterIncreaseGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPrizePool\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract ITicket\",\"name\":\"ticket\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"afterSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"currentRewardToken\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"internalType\":\"struct GaugeReward.RewardToken\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeController\",\"outputs\":[{\"internalType\":\"contract IGaugeController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gaugeRewardTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCut\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenGaugeExchangeRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLastClaimedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTokenGaugeExchangeRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTokenRewardBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"PoolTogether Inc Team\",\"events\":{\"Deployed(address,address,address,uint32)\":{\"params\":{\"gaugeController\":\"Address of the GaugeController\",\"vault\":\"Address of the Vault\"}},\"RewardTokenPushed(address,address,uint256)\":{\"params\":{\"gauge\":\"Address of the gauge for which the reward token is added\",\"timestamp\":\"Timestamp at which the reward token was pushed\",\"token\":\"Address of the token being pushed\"}},\"RewardsAdded(address,address,uint256,uint256)\":{\"params\":{\"amount\":\"Amount of tokens added to the gauge\",\"exchangeRate\":\"New exchange rate for this `token` in this `gauge`\",\"gauge\":\"Address of the gauge for which the rewards are added\",\"token\":\"Address of the token being added\"}},\"RewardsClaimed(address,address,address,uint256,uint256)\":{\"params\":{\"amount\":\"Total amount of rewards claimed\",\"exchangeRate\":\"Exchange rate at which the rewards were claimed\",\"gauge\":\"Address of the gauge for which the user claimed rewards\",\"token\":\"Address of the token for which the user claimed rewards\",\"user\":\"Address of the user who claimed rewards\"}}},\"kind\":\"dev\",\"methods\":{\"afterDecreaseGauge(address,address,uint256)\":{\"params\":{\"gauge\":\"Address of the gauge to decrease stake for\",\"oldStakeBalance\":\"Old stake balance of the user\",\"user\":\"Address of the user to decrease stake for\"}},\"afterIncreaseGauge(address,address,uint256)\":{\"params\":{\"gauge\":\"Address of the gauge to increase stake for\",\"oldStakeBalance\":\"Old stake balance of the user\",\"user\":\"Address of the user to increase stake for\"}},\"afterSwap(address,address,uint256,address,uint256)\":{\"details\":\"Called by the liquidation contract anytime tokens are liquidated.Will push token to the `gaugeRewardTokens` mapping if different from the current one.\",\"params\":{\"ticket\":\"The address of the tickets that were sold\",\"token\":\"The address of the token that the tickets were sold for\",\"tokenAmount\":\"The amount of tokens that the tickets were sold for\"}},\"claim(address,address,address)\":{\"params\":{\"_gauge\":\"Address of the gauge to claim rewards for\",\"_token\":\"Address of the token to claim rewards for\",\"_user\":\"Address of the user to claim rewards for\"}},\"constructor\":{\"params\":{\"_gaugeController\":\"Address of the GaugeController\",\"_vault\":\"Address of the Vault\"}},\"currentRewardToken(address)\":{\"params\":{\"_gauge\":\"Address of the gauge to get current reward token for\"},\"returns\":{\"_0\":\"Current reward token for the given gauge\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\"}},\"stateVariables\":{\"gaugeRewardTokens\":{\"details\":\"gauge => reward tokens array\"},\"tokenGaugeExchangeRates\":{\"details\":\"token => gauge => exchange rate\"},\"userLastClaimedTimestamp\":{\"details\":\"user => timestamp\"},\"userTokenGaugeExchangeRates\":{\"details\":\"user => token => gauge => exchange rate\"}},\"title\":\"PoolTogether V4 GaugeReward\",\"version\":1},\"userdoc\":{\"events\":{\"Deployed(address,address,address,uint32)\":{\"notice\":\"Emitted when the contract is deployed\"},\"RewardTokenPushed(address,address,uint256)\":{\"notice\":\"Emitted when a new reward token is pushed onto the `gaugeRewardTokens` mapping\"},\"RewardsAdded(address,address,uint256,uint256)\":{\"notice\":\"Emitted when rewards token are added to a gauge\"},\"RewardsClaimed(address,address,address,uint256,uint256)\":{\"notice\":\"Emitted when a user claimed their rewards for a given gauge and token\"}},\"kind\":\"user\",\"methods\":{\"afterDecreaseGauge(address,address,uint256)\":{\"notice\":\"Fallback function to call in GaugeController after a user has decreased his gauge stake.\"},\"afterIncreaseGauge(address,address,uint256)\":{\"notice\":\"Fallback function to call in GaugeController after a user has increased their gauge stake.\"},\"afterSwap(address,address,uint256,address,uint256)\":{\"notice\":\"Add rewards denominated in `token` for the given `gauge`.\"},\"claim(address,address,address)\":{\"notice\":\"Claim user rewards for a given gauge and token.\"},\"constructor\":{\"notice\":\"GaugeReward constructor\"},\"currentRewardToken(address)\":{\"notice\":\"Return the current reward token for the given gauge.\"},\"gaugeController()\":{\"notice\":\"GaugeController contract address\"},\"gaugeRewardTokens(address,uint256)\":{\"notice\":\"Tracks reward tokens per gauge\"},\"liquidator()\":{\"notice\":\"Address of the liquidator that this contract is listening to\"},\"stakerCut()\":{\"notice\":\"Percentage of rewards that goes to stakers. Fixed point 9 number this is less than 1.\"},\"tokenGaugeExchangeRates(address,address)\":{\"notice\":\"Tracks token gauge exchange rates\"},\"userLastClaimedTimestamp(address)\":{\"notice\":\"Tracks user last claimed timestamp\"},\"userTokenGaugeExchangeRates(address,address,address)\":{\"notice\":\"Tracks user token gauge exchange rate\"},\"userTokenRewardBalances(address,address)\":{\"notice\":\"Tracks user token reward balances\"},\"vault()\":{\"notice\":\"Vault contract address\"}},\"notice\":\"The GaugeReward contract handles the rewards for users who staked in one or several gauges on the GaugeController contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GaugeReward.sol\":\"GaugeReward\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x88a02b447e0fb6354bebcb4e1e98f2add4352e203d862a484c4947570944bebb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"contracts/GaugeReward.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\n\\nimport \\\"./interfaces/IGaugeReward.sol\\\";\\nimport \\\"./interfaces/IGaugeController.sol\\\";\\nimport \\\"./interfaces/IPrizePoolLiquidatorListener.sol\\\";\\n\\n/**\\n  * @title  PoolTogether V4 GaugeReward\\n  * @author PoolTogether Inc Team\\n  * @notice The GaugeReward contract handles the rewards for users\\n            who staked in one or several gauges on the GaugeController contract.\\n*/\\ncontract GaugeReward is IGaugeReward, IPrizePoolLiquidatorListener, Multicall {\\n    using SafeERC20 for IERC20;\\n\\n    /* ============ Variables ============ */\\n\\n    /**\\n     * @notice Tracks user token reward balances\\n     */\\n    mapping(address => mapping(IERC20 => uint256)) public userTokenRewardBalances;\\n\\n    /**\\n     * @notice Tracks user token gauge exchange rate\\n     * @dev user => token => gauge => exchange rate\\n     */\\n    mapping(address => mapping(IERC20 => mapping(address => uint256)))\\n        public userTokenGaugeExchangeRates;\\n\\n    /**\\n     * @notice Tracks user last claimed timestamp\\n     * @dev user => timestamp\\n     */\\n    mapping(address => uint256) public userLastClaimedTimestamp;\\n\\n    /**\\n     * @notice Tracks token gauge exchange rates\\n     * @dev token => gauge => exchange rate\\n     */\\n    mapping(IERC20 => mapping(address => uint256)) public tokenGaugeExchangeRates;\\n\\n    /**\\n     * @notice RewardToken struct\\n     * @param token Address of the reward token\\n     * @param timestamp Timestamp at which the reward token was added\\n     */\\n    struct RewardToken {\\n        IERC20 token;\\n        uint64 timestamp;\\n    }\\n\\n    /**\\n     * @notice Tracks reward tokens per gauge\\n     * @dev gauge => reward tokens array\\n     */\\n    mapping(address => RewardToken[]) public gaugeRewardTokens;\\n\\n    /// @notice GaugeController contract address\\n    IGaugeController public gaugeController;\\n\\n    /// @notice Vault contract address\\n    address public vault;\\n\\n    /// @notice Address of the liquidator that this contract is listening to\\n    address public liquidator;\\n\\n    /// @notice Percentage of rewards that goes to stakers. Fixed point 9 number this is less than 1.\\n    uint32 public stakerCut;\\n\\n    /* ============ Events ============ */\\n\\n    /**\\n     * @notice Emitted when the contract is deployed\\n     * @param gaugeController Address of the GaugeController\\n     * @param vault Address of the Vault\\n     */\\n    event Deployed(\\n        IGaugeController indexed gaugeController,\\n        address indexed vault,\\n        address indexed liquidator,\\n        uint32 stakerCut\\n    );\\n\\n    /**\\n     * @notice Emitted when rewards token are added to a gauge\\n     * @param gauge Address of the gauge for which the rewards are added\\n     * @param token Address of the token being added\\n     * @param amount Amount of tokens added to the gauge\\n     * @param exchangeRate New exchange rate for this `token` in this `gauge`\\n     */\\n    event RewardsAdded(\\n        address indexed gauge,\\n        IERC20 indexed token,\\n        uint256 amount,\\n        uint256 exchangeRate\\n    );\\n\\n    /**\\n     * @notice Emitted when a user claimed their rewards for a given gauge and token\\n     * @param gauge Address of the gauge for which the user claimed rewards\\n     * @param token Address of the token for which the user claimed rewards\\n     * @param user Address of the user who claimed rewards\\n     * @param amount Total amount of rewards claimed\\n     * @param exchangeRate Exchange rate at which the rewards were claimed\\n     */\\n    event RewardsClaimed(\\n        address indexed gauge,\\n        IERC20 indexed token,\\n        address indexed user,\\n        uint256 amount,\\n        uint256 exchangeRate\\n    );\\n\\n    /**\\n     * @notice Emitted when a new reward token is pushed onto the `gaugeRewardTokens` mapping\\n     * @param gauge Address of the gauge for which the reward token is added\\n     * @param token Address of the token being pushed\\n     * @param timestamp Timestamp at which the reward token was pushed\\n     */\\n    event RewardTokenPushed(address indexed gauge, IERC20 indexed token, uint256 timestamp);\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * @notice GaugeReward constructor\\n     * @param _gaugeController Address of the GaugeController\\n     * @param _vault Address of the Vault\\n     */\\n    constructor(\\n        IGaugeController _gaugeController,\\n        address _vault,\\n        address _liquidator,\\n        uint32 _stakerCut\\n    ) {\\n        require(address(_gaugeController) != address(0), \\\"GReward/GC-not-zero-address\\\");\\n        require(address(_vault) != address(0), \\\"GReward/Vault-not-zero-address\\\");\\n        require(_stakerCut < 1e9, \\\"GReward/staker-cut-lt-1e9\\\");\\n        require(_liquidator != address(0), \\\"GReward/liq-not-zero-address\\\");\\n\\n        gaugeController = _gaugeController;\\n        vault = _vault;\\n        stakerCut = _stakerCut;\\n        liquidator = _liquidator;\\n\\n        emit Deployed(\\n            _gaugeController,\\n            _vault,\\n            _liquidator,\\n            _stakerCut\\n        );\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @notice Return the current reward token for the given gauge.\\n     * @param _gauge Address of the gauge to get current reward token for\\n     * @return Current reward token for the given gauge\\n     */\\n    function currentRewardToken(address _gauge) external view returns (RewardToken memory) {\\n        return _currentRewardToken(_gauge);\\n    }\\n\\n    /**\\n     * @notice Add rewards denominated in `token` for the given `gauge`.\\n     * @dev Called by the liquidation contract anytime tokens are liquidated.\\n     * @dev Will push token to the `gaugeRewardTokens` mapping if different from the current one.\\n     * @param ticket The address of the tickets that were sold\\n     * @param token The address of the token that the tickets were sold for\\n     * @param tokenAmount The amount of tokens that the tickets were sold for\\n     */\\n    function afterSwap(IPrizePool, ITicket ticket, uint256, IERC20 token, uint256 tokenAmount) external override {\\n        require(msg.sender == liquidator, \\\"GReward/only-liquidator\\\");\\n\\n        address gauge = address(ticket);\\n        if (token != _currentRewardToken(gauge).token) {\\n            _pushRewardToken(gauge, token);\\n        }\\n\\n        uint256 stakerRewards = (tokenAmount * stakerCut) / 1e9;\\n\\n        // Exchange rate = amount / current staked amount on gauge\\n        uint256 _exchangeRate = (stakerRewards * 1e18) / gaugeController.getGaugeBalance(gauge);\\n\\n        tokenGaugeExchangeRates[token][gauge] += _exchangeRate;\\n\\n        emit RewardsAdded(gauge, token, stakerRewards, _exchangeRate);\\n    }\\n\\n    /// @inheritdoc IGaugeReward\\n    function afterIncreaseGauge(\\n        address _gauge,\\n        address _user,\\n        uint256 _oldStakeBalance\\n    ) external override onlyGaugeController {\\n        RewardToken memory _rewardToken = _claimPastRewards(_gauge, _user, _oldStakeBalance);\\n\\n        if (address(_rewardToken.token) != address(0)) {\\n            _claim(_gauge, _rewardToken.token, _user, _oldStakeBalance, false);\\n        }\\n\\n        userLastClaimedTimestamp[_user] = block.timestamp;\\n    }\\n\\n    /// @inheritdoc IGaugeReward\\n    function afterDecreaseGauge(\\n        address _gauge,\\n        address _user,\\n        uint256 _oldStakeBalance\\n    ) external override onlyGaugeController {\\n        RewardToken memory _rewardToken = _claimPastRewards(_gauge, _user, _oldStakeBalance);\\n        if (_rewardToken.token != IERC20(address(0))) {\\n            _claim(_gauge, _rewardToken.token, _user, _oldStakeBalance, false);\\n        }\\n        userLastClaimedTimestamp[_user] = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Claim user rewards for a given gauge and token.\\n     * @param _gauge Address of the gauge to claim rewards for\\n     * @param _token Address of the token to claim rewards for\\n     * @param _user Address of the user to claim rewards for\\n     */\\n    function claim(\\n        address _gauge,\\n        IERC20 _token,\\n        address _user\\n    ) external {\\n        uint256 _stakeBalance = gaugeController.getUserGaugeBalance(_gauge, _user);\\n\\n        _claimPastRewards(_gauge, _user, _stakeBalance);\\n\\n        _claim(_gauge, _token, _user, _stakeBalance, false);\\n\\n        userLastClaimedTimestamp[_user] = block.timestamp;\\n    }\\n\\n    // function isPrizePoolLiquidator(address _prizePoolLiquidator) public view returns (bool) {\\n    //     return gaugeScaleTwabs[_prizePoolLiquidator].details.balance > 0;\\n    // }\\n\\n    /* ============ Modifiers ============ */\\n\\n    // modifier requirePrizePoolLiquidator(address _prizePoolLiquidator) {\\n    //     require(isPrizePoolLiquidator(_prizePoolLiquidator), \\\"GReward/caller-not-liquidator\\\");\\n    //     _;\\n    // }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Return the current reward token for the given gauge\\n     * @param _gauge Address of the gauge to get current reward token for\\n     * @return Current reward token for the given gauge\\n     */\\n    function _currentRewardToken(address _gauge) internal view returns (RewardToken memory) {\\n        RewardToken[] memory _gaugeRewardTokens = gaugeRewardTokens[_gauge];\\n        uint256 _gaugeRewardTokensLength = _gaugeRewardTokens.length;\\n\\n        if (_gaugeRewardTokensLength > 0) {\\n            return _gaugeRewardTokens[_gaugeRewardTokensLength - 1];\\n        } else {\\n            return RewardToken(IERC20(address(0)), 0);\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim user rewards for a given gauge and token.\\n     * @param _gauge Address of the gauge to claim rewards for\\n     * @param _token Address of the token to claim rewards for\\n     * @param _user Address of the user to claim rewards for\\n     * @param _stakeBalance User stake balance\\n     * @param _eligibleForPastRewards Whether this function is called in `_eligibleForPastRewards` or not\\n     */\\n    function _claim(\\n        address _gauge,\\n        IERC20 _token,\\n        address _user,\\n        uint256 _stakeBalance,\\n        bool _eligibleForPastRewards\\n    ) internal returns (uint256) {\\n        uint256 _previousExchangeRate = userTokenGaugeExchangeRates[_user][_token][_gauge];\\n        uint256 _currentExchangeRate = tokenGaugeExchangeRates[_token][_gauge];\\n\\n        if (!_eligibleForPastRewards && _previousExchangeRate == 0) {\\n            _previousExchangeRate = _currentExchangeRate;\\n        }\\n\\n        // Rewards = deltaExchangeRate * stakeBalance\\n        uint256 _rewards = ((_currentExchangeRate - _previousExchangeRate) * _stakeBalance) / 1e18;\\n\\n        // Record current exchange rate\\n        userTokenGaugeExchangeRates[_user][_token][_gauge] = _currentExchangeRate;\\n\\n        userTokenRewardBalances[_user][_token] += _rewards;\\n\\n        emit RewardsClaimed(_gauge, _token, _user, _rewards, _currentExchangeRate);\\n\\n        return _rewards;\\n    }\\n\\n    function redeem(address _user, IERC20 _token) external returns (uint256) {\\n        uint256 rewards = userTokenRewardBalances[_user][_token];\\n        userTokenRewardBalances[_user][_token] = 0;\\n        _token.safeTransferFrom(address(vault), _user, rewards);\\n        return rewards;\\n    }\\n\\n    /**\\n     * @notice Claim user past rewards for a given gauge.\\n     * @param _gauge Address of the gauge to claim rewards for\\n     * @param _user Address of the user to claim rewards for\\n     * @param _stakeBalance User stake balance\\n     */\\n    function _claimPastRewards(\\n        address _gauge,\\n        address _user,\\n        uint256 _stakeBalance\\n    ) internal returns (RewardToken memory) {\\n        uint256 _userLastClaimedTimestamp = userLastClaimedTimestamp[_user];\\n        uint256 _gaugeRewardTokensLength = gaugeRewardTokens[_gauge].length;\\n\\n        RewardToken memory _rewardToken;\\n        RewardToken memory _latestRewardToken;\\n\\n        if (_gaugeRewardTokensLength > 0) {\\n            uint256 i = _gaugeRewardTokensLength;\\n\\n            while (i > 0) {\\n                i = i - 1;\\n                _rewardToken = gaugeRewardTokens[_gauge][i];\\n\\n                if (i == _gaugeRewardTokensLength - 1) {\\n                    _latestRewardToken = _rewardToken;\\n                }\\n\\n                if (_userLastClaimedTimestamp > 0 && _rewardToken.timestamp > _userLastClaimedTimestamp) {\\n                    _claim(_gauge, _rewardToken.token, _user, _stakeBalance, true);\\n                } else {\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return _latestRewardToken;\\n    }\\n\\n    /**\\n     * @notice Push a new reward token into the `gaugeRewardTokens` array\\n     * @param _gauge Address of the gauge to push reward token for\\n     * @param _token Address of the reward token to push\\n     */\\n    function _pushRewardToken(address _gauge, IERC20 _token) internal {\\n        uint256 _currentTimestamp = block.timestamp;\\n\\n        gaugeRewardTokens[_gauge].push(\\n            RewardToken({ token: _token, timestamp: uint64(_currentTimestamp) })\\n        );\\n\\n        emit RewardTokenPushed(_gauge, _token, _currentTimestamp);\\n    }\\n\\n    modifier onlyGaugeController() {\\n        require(msg.sender == address(gaugeController), \\\"GReward/only-gc\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x525816609fe8f2f620453425fee019186e1a5e26fdfbb7faef61b5f89b459fdb\",\"license\":\"GPL-3.0\"},\"contracts/external/compound/ICompLike.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICompLike is IERC20 {\\n    function getCurrentVotes(address account) external view returns (uint96);\\n\\n    function delegate(address delegate) external;\\n}\\n\",\"keccak256\":\"0x34d2c8a57ca27b9c58ec07c4bd8d263c71a25d194068ad9403f3895dc99a7122\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IControlledToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/** @title IControlledToken\\n  * @author PoolTogether Inc Team\\n  * @notice ERC20 Tokens with a controller for minting & burning.\\n*/\\ninterface IControlledToken is IERC20 {\\n\\n    /** \\n        @notice Interface to the contract responsible for controlling mint/burn\\n    */\\n    function controller() external view returns (address);\\n\\n    /** \\n      * @notice Allows the controller to mint tokens for a user account\\n      * @dev May be overridden to provide more granular control over minting\\n      * @param user Address of the receiver of the minted tokens\\n      * @param amount Amount of tokens to mint\\n    */\\n    function controllerMint(address user, uint256 amount) external;\\n\\n    /** \\n      * @notice Allows the controller to burn tokens from a user account\\n      * @dev May be overridden to provide more granular control over burning\\n      * @param user Address of the holder account to burn tokens from\\n      * @param amount Amount of tokens to burn\\n    */\\n    function controllerBurn(address user, uint256 amount) external;\\n\\n    /** \\n      * @notice Allows an operator via the controller to burn tokens on behalf of a user account\\n      * @dev May be overridden to provide more granular control over operator-burning\\n      * @param operator Address of the operator performing the burn action via the controller contract\\n      * @param user Address of the holder account to burn tokens from\\n      * @param amount Amount of tokens to burn\\n    */\\n    function controllerBurnFrom(\\n        address operator,\\n        address user,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x90dceeec1eea6e49021e8db88b084f3f0c503c60b6f7e0bbecd2529ffde87ef3\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGaugeController.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\ninterface IGaugeController {\\n    /**\\n     * @notice Get the gauge scaled average balance between two timestamps.\\n     * @param _gauge Address of the gauge to get the average scaled balance for\\n     * @param _startTime Start timestamp at which to get the average scaled balance\\n     * @param _endTime End timestamp at which to get the average scaled balance\\n     * @return The gauge scaled average balance between the two timestamps\\n     */\\n    function getScaledAverageGaugeBetween(\\n        address _gauge,\\n        uint256 _startTime,\\n        uint256 _endTime\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the gauge balance\\n     * @param _gauge Address of the gauge to get balance for\\n     * @return The gauge balance\\n     */\\n    function getGaugeBalance(address _gauge) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the gauge scale balance\\n     * @param _gauge Address of the gauge to get scale balance for\\n     * @return The gauge scale balance\\n     */\\n    function getGaugeScaleBalance(address _gauge) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the user stake balance for a given gauge\\n     * @param _gauge Address of the gauge to get stake balance for\\n     * @param _user Address of the user to get stake balance for\\n     * @return The user gauge balance\\n     */\\n    function getUserGaugeBalance(address _gauge, address _user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd19d91e1a864ab59d135470dd67b8a5877086fb2d9d7849a05e19b32ad4bac4d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGaugeReward.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\n/**\\n * @title  PoolTogether V4 IGaugeReward\\n * @author PoolTogether Inc Team\\n * @notice The GaugeReward interface.\\n */\\ninterface IGaugeReward {\\n    /**\\n     * @notice Fallback function to call in GaugeController after a user has increased their gauge stake.\\n     * @param gauge Address of the gauge to increase stake for\\n     * @param user Address of the user to increase stake for\\n     * @param oldStakeBalance Old stake balance of the user\\n     */\\n    function afterIncreaseGauge(\\n        address gauge,\\n        address user,\\n        uint256 oldStakeBalance\\n    ) external;\\n\\n    /**\\n     * @notice Fallback function to call in GaugeController after a user has decreased his gauge stake.\\n     * @param gauge Address of the gauge to decrease stake for\\n     * @param user Address of the user to decrease stake for\\n     * @param oldStakeBalance Old stake balance of the user\\n     */\\n    function afterDecreaseGauge(\\n        address gauge,\\n        address user,\\n        uint256 oldStakeBalance\\n    ) external;\\n}\\n\",\"keccak256\":\"0x01ee2f08922ddd04ab32a0e9e55f6ece9f17748888fd447ebafa28276bd9e955\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPrizePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"../external/compound/ICompLike.sol\\\";\\nimport \\\"../interfaces/ITicket.sol\\\";\\n\\ninterface IPrizePool {\\n    /// @dev Event emitted when controlled token is added\\n    event ControlledTokenAdded(ITicket indexed token);\\n\\n    event AwardCaptured(uint256 amount);\\n\\n    /// @dev Event emitted when assets are deposited\\n    event Deposited(\\n        address indexed operator,\\n        address indexed to,\\n        ITicket indexed token,\\n        uint256 amount\\n    );\\n\\n    /// @dev Event emitted when interest is awarded to a winner\\n    event Awarded(address indexed winner, ITicket indexed token, uint256 amount);\\n\\n    /// @dev Event emitted when external ERC20s are awarded to a winner\\n    event AwardedExternalERC20(address indexed winner, address indexed token, uint256 amount);\\n\\n    /// @dev Event emitted when external ERC20s are transferred out\\n    event TransferredExternalERC20(address indexed to, address indexed token, uint256 amount);\\n\\n    /// @dev Event emitted when external ERC721s are awarded to a winner\\n    event AwardedExternalERC721(address indexed winner, address indexed token, uint256[] tokenIds);\\n\\n    /// @dev Event emitted when assets are withdrawn\\n    event Withdrawal(\\n        address indexed operator,\\n        address indexed from,\\n        ITicket indexed token,\\n        uint256 amount,\\n        uint256 redeemed\\n    );\\n\\n    /// @dev Event emitted when the Balance Cap is set\\n    event BalanceCapSet(uint256 balanceCap);\\n\\n    /// @dev Event emitted when the Liquidity Cap is set\\n    event LiquidityCapSet(uint256 liquidityCap);\\n\\n    /// @dev Event emitted when the Prize Strategy is set\\n    event PrizeStrategySet(address indexed prizeStrategy);\\n\\n    /// @dev Event emitted when the Ticket is set\\n    event TicketSet(ITicket indexed ticket);\\n\\n    /// @dev Emitted when there was an error thrown awarding an External ERC721\\n    event ErrorAwardingExternalERC721(bytes error);\\n\\n    /// @notice Deposit assets into the Prize Pool in exchange for tokens\\n    /// @param to The address receiving the newly minted tokens\\n    /// @param amount The amount of assets to deposit\\n    function depositTo(address to, uint256 amount) external;\\n\\n    /// @notice Deposit assets into the Prize Pool in exchange for tokens,\\n    /// then sets the delegate on behalf of the caller.\\n    /// @param to The address receiving the newly minted tokens\\n    /// @param amount The amount of assets to deposit\\n    /// @param delegate The address to delegate to for the caller\\n    function depositToAndDelegate(address to, uint256 amount, address delegate) external;\\n\\n    /// @notice Withdraw assets from the Prize Pool instantly.\\n    /// @param from The address to redeem tokens from.\\n    /// @param amount The amount of tokens to redeem for assets.\\n    /// @return The actual amount withdrawn\\n    function withdrawFrom(address from, uint256 amount) external returns (uint256);\\n\\n    /// @notice Called by the prize strategy to award prizes.\\n    /// @dev The amount awarded must be less than the awardBalance()\\n    /// @param to The address of the winner that receives the award\\n    /// @param amount The amount of assets to be awarded\\n    function award(address to, uint256 amount) external;\\n\\n    /// @notice Returns the balance that is available to award.\\n    /// @dev captureAwardBalance() should be called first\\n    /// @return The total amount of assets to be awarded for the current prize\\n    function awardBalance() external view returns (uint256);\\n\\n    /// @notice Captures any available interest as award balance.\\n    /// @dev This function also captures the reserve fees.\\n    /// @return The total amount of assets to be awarded for the current prize\\n    function captureAwardBalance() external returns (uint256);\\n\\n    /// @dev Checks with the Prize Pool if a specific token type may be awarded as an external prize\\n    /// @param externalToken The address of the token to check\\n    /// @return True if the token may be awarded, false otherwise\\n    function canAwardExternal(address externalToken) external view returns (bool);\\n\\n    // @dev Returns the total underlying balance of all assets. This includes both principal and interest.\\n    /// @return The underlying balance of assets\\n    function balance() external returns (uint256);\\n\\n    /**\\n     * @notice Read internal Ticket accounted balance.\\n     * @return uint256 accountBalance\\n     */\\n    function getAccountedBalance() external view returns (uint256);\\n\\n    /**\\n     * @notice Read internal balanceCap variable\\n     */\\n    function getBalanceCap() external view returns (uint256);\\n\\n    /**\\n     * @notice Read internal liquidityCap variable\\n     */\\n    function getLiquidityCap() external view returns (uint256);\\n\\n    /**\\n     * @notice Read ticket variable\\n     */\\n    function getTicket() external view returns (ITicket);\\n\\n    /**\\n     * @notice Read token variable\\n     */\\n    function getToken() external view returns (address);\\n\\n    /**\\n     * @notice Read prizeStrategy variable\\n     */\\n    function getPrizeStrategy() external view returns (address);\\n\\n    /// @dev Checks if a specific token is controlled by the Prize Pool\\n    /// @param controlledToken The address of the token to check\\n    /// @return True if the token is a controlled token, false otherwise\\n    function isControlled(ITicket controlledToken) external view returns (bool);\\n\\n    /// @notice Called by the Prize-Strategy to transfer out external ERC20 tokens\\n    /// @dev Used to transfer out tokens held by the Prize Pool.  Could be liquidated, or anything.\\n    /// @param to The address of the winner that receives the award\\n    /// @param externalToken The address of the external asset token being awarded\\n    /// @param amount The amount of external assets to be awarded\\n    function transferExternalERC20(\\n        address to,\\n        address externalToken,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Called by the Prize-Strategy to award external ERC20 prizes\\n    /// @dev Used to award any arbitrary tokens held by the Prize Pool\\n    /// @param to The address of the winner that receives the award\\n    /// @param amount The amount of external assets to be awarded\\n    /// @param externalToken The address of the external asset token being awarded\\n    function awardExternalERC20(\\n        address to,\\n        address externalToken,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Called by the prize strategy to award external ERC721 prizes\\n    /// @dev Used to award any arbitrary NFTs held by the Prize Pool\\n    /// @param to The address of the winner that receives the award\\n    /// @param externalToken The address of the external NFT token being awarded\\n    /// @param tokenIds An array of NFT Token IDs to be transferred\\n    function awardExternalERC721(\\n        address to,\\n        address externalToken,\\n        uint256[] calldata tokenIds\\n    ) external;\\n\\n    /// @notice Allows the owner to set a balance cap per `token` for the pool.\\n    /// @dev If a user wins, his balance can go over the cap. He will be able to withdraw the excess but not deposit.\\n    /// @dev Needs to be called after deploying a prize pool to be able to deposit into it.\\n    /// @param balanceCap New balance cap.\\n    /// @return True if new balance cap has been successfully set.\\n    function setBalanceCap(uint256 balanceCap) external returns (bool);\\n\\n    /// @notice Allows the Governor to set a cap on the amount of liquidity that he pool can hold\\n    /// @param liquidityCap The new liquidity cap for the prize pool\\n    function setLiquidityCap(uint256 liquidityCap) external;\\n\\n    /// @notice Sets the prize strategy of the prize pool.  Only callable by the owner.\\n    /// @param _prizeStrategy The new prize strategy.\\n    function setPrizeStrategy(address _prizeStrategy) external;\\n\\n    /// @notice Set prize pool ticket.\\n    /// @param ticket Address of the ticket to set.\\n    /// @return True if ticket has been successfully set.\\n    function setTicket(ITicket ticket) external returns (bool);\\n\\n    /// @notice Delegate the votes for a Compound COMP-like token held by the prize pool\\n    /// @param compLike The COMP-like token held by the prize pool that should be delegated\\n    /// @param to The address to delegate to\\n    function compLikeDelegate(ICompLike compLike, address to) external;\\n}\\n\",\"keccak256\":\"0xa3cc6bff882d541d6642bbff0988fc592ff513a682dde6888ab55eaec29df7a9\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPrizePoolLiquidatorListener.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IPrizePool.sol\\\";\\nimport \\\"./ITicket.sol\\\";\\n\\n/**\\n * @author PoolTogether Inc Team\\n */\\ninterface IPrizePoolLiquidatorListener {\\n    function afterSwap(IPrizePool prizePool, ITicket ticket, uint256 ticketAmount, IERC20 token, uint256 tokenAmount) external;\\n}\\n\",\"keccak256\":\"0xccda8a60089647d4e7487011f4b4b581d3b732d4df74fea8930b16d0d98c6bc8\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITicket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"../libraries/TwabLib.sol\\\";\\nimport \\\"./IControlledToken.sol\\\";\\n\\ninterface ITicket is IControlledToken {\\n    /**\\n     * @notice A struct containing details for an Account.\\n     * @param balance The current balance for an Account.\\n     * @param nextTwabIndex The next available index to store a new twab.\\n     * @param cardinality The number of recorded twabs (plus one!).\\n     */\\n    struct AccountDetails {\\n        uint224 balance;\\n        uint16 nextTwabIndex;\\n        uint16 cardinality;\\n    }\\n\\n    /**\\n     * @notice Combines account details with their twab history.\\n     * @param details The account details.\\n     * @param twabs The history of twabs for this account.\\n     */\\n    struct Account {\\n        AccountDetails details;\\n        ObservationLib.Observation[65535] twabs;\\n    }\\n\\n    /**\\n     * @notice Emitted when TWAB balance has been delegated to another user.\\n     * @param delegator Address of the delegator.\\n     * @param delegate Address of the delegate.\\n     */\\n    event Delegated(address indexed delegator, address indexed delegate);\\n\\n    /**\\n     * @notice Emitted when ticket is initialized.\\n     * @param name Ticket name (eg: PoolTogether Dai Ticket (Compound)).\\n     * @param symbol Ticket symbol (eg: PcDAI).\\n     * @param decimals Ticket decimals.\\n     * @param controller Token controller address.\\n     */\\n    event TicketInitialized(string name, string symbol, uint8 decimals, address indexed controller);\\n\\n    /**\\n     * @notice Emitted when a new TWAB has been recorded.\\n     * @param delegate The recipient of the ticket power (may be the same as the user).\\n     * @param newTwab Updated TWAB of a ticket holder after a successful TWAB recording.\\n     */\\n    event NewUserTwab(\\n        address indexed delegate,\\n        ObservationLib.Observation newTwab\\n    );\\n\\n    /**\\n     * @notice Emitted when a new total supply TWAB has been recorded.\\n     * @param newTotalSupplyTwab Updated TWAB of tickets total supply after a successful total supply TWAB recording.\\n     */\\n    event NewTotalSupplyTwab(ObservationLib.Observation newTotalSupplyTwab);\\n\\n    /**\\n     * @notice Retrieves the address of the delegate to whom `user` has delegated their tickets.\\n     * @dev Address of the delegate will be the zero address if `user` has not delegated their tickets.\\n     * @param user Address of the delegator.\\n     * @return Address of the delegate.\\n     */\\n    function delegateOf(address user) external view returns (address);\\n\\n    /**\\n    * @notice Delegate time-weighted average balances to an alternative address.\\n    * @dev    Transfers (including mints) trigger the storage of a TWAB in delegate(s) account, instead of the\\n              targetted sender and/or recipient address(s).\\n    * @dev    To reset the delegate, pass the zero address (0x000.000) as `to` parameter.\\n    * @dev Current delegate address should be different from the new delegate address `to`.\\n    * @param  to Recipient of delegated TWAB.\\n    */\\n    function delegate(address to) external;\\n\\n    /**\\n     * @notice Allows the controller to delegate on a users behalf.\\n     * @param user The user for whom to delegate\\n     * @param delegate The new delegate\\n     */\\n    function controllerDelegateFor(address user, address delegate) external;\\n\\n    /**\\n     * @notice Allows a user to delegate via signature\\n     * @param user The user who is delegating\\n     * @param delegate The new delegate\\n     * @param deadline The timestamp by which this must be submitted\\n     * @param v The v portion of the ECDSA sig\\n     * @param r The r portion of the ECDSA sig\\n     * @param s The s portion of the ECDSA sig\\n     */\\n    function delegateWithSignature(\\n        address user,\\n        address delegate,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @notice Gets a users twab context.  This is a struct with their balance, next twab index, and cardinality.\\n     * @param user The user for whom to fetch the TWAB context.\\n     * @return The TWAB context, which includes { balance, nextTwabIndex, cardinality }\\n     */\\n    function getAccountDetails(address user) external view returns (TwabLib.AccountDetails memory);\\n\\n    /**\\n     * @notice Gets the TWAB at a specific index for a user.\\n     * @param user The user for whom to fetch the TWAB.\\n     * @param index The index of the TWAB to fetch.\\n     * @return The TWAB, which includes the twab amount and the timestamp.\\n     */\\n    function getTwab(address user, uint16 index)\\n        external\\n        view\\n        returns (ObservationLib.Observation memory);\\n\\n    /**\\n     * @notice Retrieves `user` TWAB balance.\\n     * @param user Address of the user whose TWAB is being fetched.\\n     * @param timestamp Timestamp at which we want to retrieve the TWAB balance.\\n     * @return The TWAB balance at the given timestamp.\\n     */\\n    function getBalanceAt(address user, uint64 timestamp) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves `user` TWAB balances.\\n     * @param user Address of the user whose TWABs are being fetched.\\n     * @param timestamps Timestamps range at which we want to retrieve the TWAB balances.\\n     * @return `user` TWAB balances.\\n     */\\n    function getBalancesAt(address user, uint64[] calldata timestamps)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Retrieves the average balance held by a user for a given time frame.\\n     * @param user The user whose balance is checked.\\n     * @param startTime The start time of the time frame.\\n     * @param endTime The end time of the time frame.\\n     * @return The average balance that the user held during the time frame.\\n     */\\n    function getAverageBalanceBetween(\\n        address user,\\n        uint64 startTime,\\n        uint64 endTime\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the average balances held by a user for a given time frame.\\n     * @param user The user whose balance is checked.\\n     * @param startTimes The start time of the time frame.\\n     * @param endTimes The end time of the time frame.\\n     * @return The average balance that the user held during the time frame.\\n     */\\n    function getAverageBalancesBetween(\\n        address user,\\n        uint64[] calldata startTimes,\\n        uint64[] calldata endTimes\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Retrieves the total supply TWAB balance at the given timestamp.\\n     * @param timestamp Timestamp at which we want to retrieve the total supply TWAB balance.\\n     * @return The total supply TWAB balance at the given timestamp.\\n     */\\n    function getTotalSupplyAt(uint64 timestamp) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the total supply TWAB balance between the given timestamps range.\\n     * @param timestamps Timestamps range at which we want to retrieve the total supply TWAB balance.\\n     * @return Total supply TWAB balances.\\n     */\\n    function getTotalSuppliesAt(uint64[] calldata timestamps)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Retrieves the average total supply balance for a set of given time frames.\\n     * @param startTimes Array of start times.\\n     * @param endTimes Array of end times.\\n     * @return The average total supplies held during the time frame.\\n     */\\n    function getAverageTotalSuppliesBetween(\\n        uint64[] calldata startTimes,\\n        uint64[] calldata endTimes\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xb9f6423a8a9c7394941cb84723b82cc66c5f815d689dc0562e612ae4d9f1cc27\",\"license\":\"GPL-3.0\"},\"contracts/libraries/ExtendedSafeCastLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary ExtendedSafeCastLib {\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 _value) internal pure returns (uint104) {\\n        require(_value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(_value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 _value) internal pure returns (uint208) {\\n        require(_value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(_value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 _value) internal pure returns (uint224) {\\n        require(_value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(_value);\\n    }\\n}\\n\",\"keccak256\":\"0x1e8add7802f19dbf5957b4d921b2d7b5277f39c9e44505c0375e52f02134e434\",\"license\":\"GPL-3.0\"},\"contracts/libraries/ObservationLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"./OverflowSafeComparatorLib.sol\\\";\\nimport \\\"./RingBufferLib.sol\\\";\\n\\n/**\\n* @title Observation Library\\n* @notice This library allows one to store an array of timestamped values and efficiently binary search them.\\n* @dev Largely pulled from Uniswap V3 Oracle.sol: https://github.com/Uniswap/v3-core/blob/c05a0e2c8c08c460fb4d05cfdda30b3ad8deeaac/contracts/libraries/Oracle.sol\\n* @author PoolTogether Inc.\\n*/\\nlibrary ObservationLib {\\n    using OverflowSafeComparatorLib for uint32;\\n    using SafeCast for uint256;\\n\\n    /// @notice The maximum number of observations\\n    uint24 public constant MAX_CARDINALITY = 16777215; // 2**24\\n\\n    /**\\n    * @notice Observation, which includes an amount and timestamp.\\n    * @param amount `amount` at `timestamp`.\\n    * @param timestamp Recorded `timestamp`.\\n    */\\n    struct Observation {\\n        uint224 amount;\\n        uint32 timestamp;\\n    }\\n\\n    /**\\n    * @notice Fetches Observations `beforeOrAt` and `atOrAfter` a `_target`, eg: where [`beforeOrAt`, `atOrAfter`] is satisfied.\\n    * The result may be the same Observation, or adjacent Observations.\\n    * @dev The answer must be contained in the array used when the target is located within the stored Observation.\\n    * boundaries: older than the most recent Observation and younger, or the same age as, the oldest Observation.\\n    * @dev  If `_newestObservationIndex` is less than `_oldestObservationIndex`, it means that we've wrapped around the circular buffer.\\n    *       So the most recent observation will be at `_oldestObservationIndex + _cardinality - 1`, at the beginning of the circular buffer.\\n    * @param _observations List of Observations to search through.\\n    * @param _newestObservationIndex Index of the newest Observation. Right side of the circular buffer.\\n    * @param _oldestObservationIndex Index of the oldest Observation. Left side of the circular buffer.\\n    * @param _target Timestamp at which we are searching the Observation.\\n    * @param _cardinality Cardinality of the circular buffer we are searching through.\\n    * @param _time Timestamp at which we perform the binary search.\\n    * @return beforeOrAt Observation recorded before, or at, the target.\\n    * @return atOrAfter Observation recorded at, or after, the target.\\n    */\\n    function binarySearch(\\n        Observation[MAX_CARDINALITY] storage _observations,\\n        uint24 _newestObservationIndex,\\n        uint24 _oldestObservationIndex,\\n        uint32 _target,\\n        uint24 _cardinality,\\n        uint32 _time\\n    ) internal view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n        uint256 leftSide = _oldestObservationIndex;\\n        uint256 rightSide = _newestObservationIndex < leftSide\\n            ? leftSide + _cardinality - 1\\n            : _newestObservationIndex;\\n        uint256 currentIndex;\\n\\n        while (true) {\\n            // We start our search in the middle of the `leftSide` and `rightSide`.\\n            // After each iteration, we narrow down the search to the left or the right side while still starting our search in the middle.\\n            currentIndex = (leftSide + rightSide) / 2;\\n\\n            beforeOrAt = _observations[uint24(RingBufferLib.wrap(currentIndex, _cardinality))];\\n            uint32 beforeOrAtTimestamp = beforeOrAt.timestamp;\\n\\n            // We've landed on an uninitialized timestamp, keep searching higher (more recently).\\n            if (beforeOrAtTimestamp == 0) {\\n                leftSide = currentIndex + 1;\\n                continue;\\n            }\\n\\n            atOrAfter = _observations[uint24(RingBufferLib.nextIndex(currentIndex, _cardinality))];\\n\\n            bool targetAtOrAfter = beforeOrAtTimestamp.lte(_target, _time);\\n\\n            // Check if we've found the corresponding Observation.\\n            if (targetAtOrAfter && _target.lte(atOrAfter.timestamp, _time)) {\\n                break;\\n            }\\n\\n            // If `beforeOrAtTimestamp` is greater than `_target`, then we keep searching lower. To the left of the current index.\\n            if (!targetAtOrAfter) {\\n                rightSide = currentIndex - 1;\\n            } else {\\n                // Otherwise, we keep searching higher. To the left of the current index.\\n                leftSide = currentIndex + 1;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x225592b42013fc0af60822e75bc047d53b42a5fcf15f2173cdc3b50bea334b0a\",\"license\":\"GPL-3.0\"},\"contracts/libraries/OverflowSafeComparatorLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\n/// @title OverflowSafeComparatorLib library to share comparator functions between contracts\\n/// @dev Code taken from Uniswap V3 Oracle.sol: https://github.com/Uniswap/v3-core/blob/3e88af408132fc957e3e406f65a0ce2b1ca06c3d/contracts/libraries/Oracle.sol\\n/// @author PoolTogether Inc.\\nlibrary OverflowSafeComparatorLib {\\n    /// @notice 32-bit timestamps comparator.\\n    /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\\n    /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\\n    /// @param _b Timestamp to compare against `_a`.\\n    /// @param _timestamp A timestamp truncated to 32 bits.\\n    /// @return bool Whether `_a` is chronologically < `_b`.\\n    function lt(\\n        uint32 _a,\\n        uint32 _b,\\n        uint32 _timestamp\\n    ) internal pure returns (bool) {\\n        // No need to adjust if there hasn't been an overflow\\n        if (_a <= _timestamp && _b <= _timestamp) return _a < _b;\\n\\n        uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n        uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n        return aAdjusted < bAdjusted;\\n    }\\n\\n    /// @notice 32-bit timestamps comparator.\\n    /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\\n    /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\\n    /// @param _b Timestamp to compare against `_a`.\\n    /// @param _timestamp A timestamp truncated to 32 bits.\\n    /// @return bool Whether `_a` is chronologically <= `_b`.\\n    function lte(\\n        uint32 _a,\\n        uint32 _b,\\n        uint32 _timestamp\\n    ) internal pure returns (bool) {\\n\\n        // No need to adjust if there hasn't been an overflow\\n        if (_a <= _timestamp && _b <= _timestamp) return _a <= _b;\\n\\n        uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n        uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n        return aAdjusted <= bAdjusted;\\n    }\\n\\n    /// @notice 32-bit timestamp subtractor\\n    /// @dev safe for 0 or 1 overflows, where `_a` and `_b` must be chronologically before or equal to time\\n    /// @param _a The subtraction left operand\\n    /// @param _b The subtraction right operand\\n    /// @param _timestamp The current time.  Expected to be chronologically after both.\\n    /// @return The difference between a and b, adjusted for overflow\\n    function checkedSub(\\n        uint32 _a,\\n        uint32 _b,\\n        uint32 _timestamp\\n    ) internal pure returns (uint32) {\\n        // No need to adjust if there hasn't been an overflow\\n\\n        if (_a <= _timestamp && _b <= _timestamp) return _a - _b;\\n\\n        uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n        uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n        return uint32(aAdjusted - bAdjusted);\\n    }\\n}\\n\",\"keccak256\":\"0x20630cf89e7b92462946defe979fd0e69fa119841d55886121948ad810778c74\",\"license\":\"GPL-3.0\"},\"contracts/libraries/RingBufferLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nlibrary RingBufferLib {\\n    /**\\n    * @notice Returns wrapped TWAB index.\\n    * @dev  In order to navigate the TWAB circular buffer, we need to use the modulo operator.\\n    * @dev  For example, if `_index` is equal to 32 and the TWAB circular buffer is of `_cardinality` 32,\\n    *       it will return 0 and will point to the first element of the array.\\n    * @param _index Index used to navigate through the TWAB circular buffer.\\n    * @param _cardinality TWAB buffer cardinality.\\n    * @return TWAB index.\\n    */\\n    function wrap(uint256 _index, uint256 _cardinality) internal pure returns (uint256) {\\n        return _index % _cardinality;\\n    }\\n\\n    /**\\n    * @notice Computes the negative offset from the given index, wrapped by the cardinality.\\n    * @dev  We add `_cardinality` to `_index` to be able to offset even if `_amount` is superior to `_cardinality`.\\n    * @param _index The index from which to offset\\n    * @param _amount The number of indices to offset.  This is subtracted from the given index.\\n    * @param _cardinality The number of elements in the ring buffer\\n    * @return Offsetted index.\\n     */\\n    function offset(\\n        uint256 _index,\\n        uint256 _amount,\\n        uint256 _cardinality\\n    ) internal pure returns (uint256) {\\n        return wrap(_index + _cardinality - _amount, _cardinality);\\n    }\\n\\n    /// @notice Returns the index of the last recorded TWAB\\n    /// @param _nextIndex The next available twab index.  This will be recorded to next.\\n    /// @param _cardinality The cardinality of the TWAB history.\\n    /// @return The index of the last recorded TWAB\\n    function newestIndex(uint256 _nextIndex, uint256 _cardinality)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_cardinality == 0) {\\n            return 0;\\n        }\\n\\n        return wrap(_nextIndex + _cardinality - 1, _cardinality);\\n    }\\n\\n    /// @notice Computes the ring buffer index that follows the given one, wrapped by cardinality\\n    /// @param _index The index to increment\\n    /// @param _cardinality The number of elements in the Ring Buffer\\n    /// @return The next index relative to the given index.  Will wrap around to 0 if the next index == cardinality\\n    function nextIndex(uint256 _index, uint256 _cardinality)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return wrap(_index + 1, _cardinality);\\n    }\\n}\\n\",\"keccak256\":\"0x052e3bf6bfb30f32950e322c853589a8d153cf34f4b1ee292b17eb46f2ae656c\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TwabLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"./ExtendedSafeCastLib.sol\\\";\\nimport \\\"./OverflowSafeComparatorLib.sol\\\";\\nimport \\\"./RingBufferLib.sol\\\";\\nimport \\\"./ObservationLib.sol\\\";\\n\\n/**\\n  * @title  PoolTogether V4 TwabLib (Library)\\n  * @author PoolTogether Inc Team\\n  * @dev    Time-Weighted Average Balance Library for ERC20 tokens.\\n  * @notice This TwabLib adds on-chain historical lookups to a user(s) time-weighted average balance.\\n            Each user is mapped to an Account struct containing the TWAB history (ring buffer) and\\n            ring buffer parameters. Every token.transfer() creates a new TWAB checkpoint. The new TWAB\\n            checkpoint is stored in the circular ring buffer, as either a new checkpoint or rewriting\\n            a previous checkpoint with new parameters. The TwabLib (using existing blocktimes of 1block/15sec)\\n            guarantees minimum 7.4 years of search history.\\n */\\nlibrary TwabLib {\\n    using OverflowSafeComparatorLib for uint32;\\n    using ExtendedSafeCastLib for uint256;\\n\\n    /**\\n      * @notice Sets max ring buffer length in the Account.twabs Observation list.\\n                As users transfer/mint/burn tickets new Observation checkpoints are\\n                recorded. The current max cardinality guarantees a seven year minimum,\\n                of accurate historical lookups with current estimates of 1 new block\\n                every 15 seconds - assuming each block contains a transfer to trigger an\\n                observation write to storage.\\n      * @dev    The user Account.AccountDetails.cardinality parameter can NOT exceed\\n                the max cardinality variable. Preventing \\\"corrupted\\\" ring buffer lookup\\n                pointers and new observation checkpoints.\\n\\n                The MAX_CARDINALITY in fact guarantees at least 7.4 years of records:\\n                If 14 = block time in seconds\\n                (2**24) * 14 = 234881024 seconds of history\\n                234881024 / (365 * 24 * 60 * 60) ~= 7.44 years\\n    */\\n    uint24 public constant MAX_CARDINALITY = 16777215; // 2**24\\n\\n    /** @notice Struct ring buffer parameters for single user Account\\n      * @param balance       Current balance for an Account\\n      * @param nextTwabIndex Next uninitialized or updatable ring buffer checkpoint storage slot\\n      * @param cardinality   Current total \\\"initialized\\\" ring buffer checkpoints for single user AccountDetails.\\n                             Used to set initial boundary conditions for an efficient binary search.\\n    */\\n    struct AccountDetails {\\n        uint208 balance;\\n        uint24 nextTwabIndex;\\n        uint24 cardinality;\\n    }\\n\\n    /// @notice Combines account details with their twab history\\n    /// @param details The account details\\n    /// @param twabs The history of twabs for this account\\n    struct Account {\\n        AccountDetails details;\\n        ObservationLib.Observation[MAX_CARDINALITY] twabs;\\n    }\\n\\n    /// @notice Increases an account's balance and records a new twab.\\n    /// @param _account The account whose balance will be increased\\n    /// @param _amount The amount to increase the balance by\\n    /// @param _currentTime The current time\\n    /// @return accountDetails The new AccountDetails\\n    /// @return twab The user's latest TWAB\\n    /// @return isNew Whether the TWAB is new\\n    function increaseBalance(\\n        Account storage _account,\\n        uint208 _amount,\\n        uint32 _currentTime\\n    )\\n        internal\\n        returns (\\n            AccountDetails memory accountDetails,\\n            ObservationLib.Observation memory twab,\\n            bool isNew\\n        )\\n    {\\n        AccountDetails memory _accountDetails = _account.details;\\n        (accountDetails, twab, isNew) = _nextTwab(_account.twabs, _accountDetails, _currentTime);\\n        accountDetails.balance = _accountDetails.balance + _amount;\\n    }\\n\\n    /** @notice Calculates the next TWAB checkpoint for an account with a decreasing balance.\\n     * @dev    With Account struct and amount decreasing calculates the next TWAB observable checkpoint.\\n     * @param _account        Account whose balance will be decreased\\n     * @param _amount         Amount to decrease the balance by\\n     * @param _revertMessage  Revert message for insufficient balance\\n     * @return accountDetails Updated Account.details struct\\n     * @return twab           TWAB observation (with decreasing average)\\n     * @return isNew          Whether TWAB is new or calling twice in the same block\\n     */\\n    function decreaseBalance(\\n        Account storage _account,\\n        uint208 _amount,\\n        string memory _revertMessage,\\n        uint32 _currentTime\\n    )\\n        internal\\n        returns (\\n            AccountDetails memory accountDetails,\\n            ObservationLib.Observation memory twab,\\n            bool isNew\\n        )\\n    {\\n        AccountDetails memory _accountDetails = _account.details;\\n\\n        require(_accountDetails.balance >= _amount, _revertMessage);\\n\\n        (accountDetails, twab, isNew) = _nextTwab(_account.twabs, _accountDetails, _currentTime);\\n        unchecked {\\n            accountDetails.balance -= _amount;\\n        }\\n    }\\n\\n    /** @notice Calculates the average balance held by a user for a given time frame.\\n      * @dev    Finds the average balance between start and end timestamp epochs.\\n                Validates the supplied end time is within the range of elapsed time i.e. less then timestamp of now.\\n      * @param _twabs          Individual user Observation recorded checkpoints passed as storage pointer\\n      * @param _accountDetails User AccountDetails struct loaded in memory\\n      * @param _startTime      Start of timestamp range as an epoch\\n      * @param _endTime        End of timestamp range as an epoch\\n      * @param _currentTime    Block.timestamp\\n      * @return Average balance of user held between epoch timestamps start and end\\n    */\\n    function getAverageBalanceBetween(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _startTime,\\n        uint32 _endTime,\\n        uint32 _currentTime\\n    ) internal view returns (uint256) {\\n        uint32 endTime = _endTime > _currentTime ? _currentTime : _endTime;\\n\\n        return\\n            _getAverageBalanceBetween(_twabs, _accountDetails, _startTime, endTime, _currentTime);\\n    }\\n\\n    /// @notice Retrieves the oldest TWAB\\n    /// @param _twabs The storage array of twabs\\n    /// @param _accountDetails The TWAB account details\\n    /// @return index The index of the oldest TWAB in the twabs array\\n    /// @return twab The oldest TWAB\\n    function oldestTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails\\n    ) internal view returns (uint24 index, ObservationLib.Observation memory twab) {\\n        index = _accountDetails.nextTwabIndex;\\n        twab = _twabs[index];\\n\\n        // If the TWAB is not initialized we go to the beginning of the TWAB circular buffer at index 0\\n        if (twab.timestamp == 0) {\\n            index = 0;\\n            twab = _twabs[0];\\n        }\\n    }\\n\\n    /// @notice Retrieves the newest TWAB\\n    /// @param _twabs The storage array of twabs\\n    /// @param _accountDetails The TWAB account details\\n    /// @return index The index of the newest TWAB in the twabs array\\n    /// @return twab The newest TWAB\\n    function newestTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails\\n    ) internal view returns (uint24 index, ObservationLib.Observation memory twab) {\\n        index = uint24(RingBufferLib.newestIndex(_accountDetails.nextTwabIndex, MAX_CARDINALITY));\\n        twab = _twabs[index];\\n    }\\n\\n    /// @notice Retrieves amount at `_targetTime` timestamp\\n    /// @param _twabs List of TWABs to search through.\\n    /// @param _accountDetails Accounts details\\n    /// @param _targetTime Timestamp at which the reserved TWAB should be for.\\n    /// @return uint256 TWAB amount at `_targetTime`.\\n    function getBalanceAt(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _targetTime,\\n        uint32 _currentTime\\n    ) internal view returns (uint256) {\\n        uint32 timeToTarget = _targetTime > _currentTime ? _currentTime : _targetTime;\\n        return _getBalanceAt(_twabs, _accountDetails, timeToTarget, _currentTime);\\n    }\\n\\n    /// @notice Calculates the average balance held by a user for a given time frame.\\n    /// @param _startTime The start time of the time frame.\\n    /// @param _endTime The end time of the time frame.\\n    /// @return The average balance that the user held during the time frame.\\n    function _getAverageBalanceBetween(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _startTime,\\n        uint32 _endTime,\\n        uint32 _currentTime\\n    ) private view returns (uint256) {\\n        (uint24 oldestTwabIndex, ObservationLib.Observation memory oldTwab) = oldestTwab(\\n            _twabs,\\n            _accountDetails\\n        );\\n\\n        (uint24 newestTwabIndex, ObservationLib.Observation memory newTwab) = newestTwab(\\n            _twabs,\\n            _accountDetails\\n        );\\n\\n        ObservationLib.Observation memory startTwab = _calculateTwab(\\n            _twabs,\\n            _accountDetails,\\n            newTwab,\\n            oldTwab,\\n            newestTwabIndex,\\n            oldestTwabIndex,\\n            _startTime,\\n            _currentTime\\n        );\\n\\n        ObservationLib.Observation memory endTwab = _calculateTwab(\\n            _twabs,\\n            _accountDetails,\\n            newTwab,\\n            oldTwab,\\n            newestTwabIndex,\\n            oldestTwabIndex,\\n            _endTime,\\n            _currentTime\\n        );\\n\\n        // Difference in amount / time\\n        return (endTwab.amount - startTwab.amount) / OverflowSafeComparatorLib.checkedSub(endTwab.timestamp, startTwab.timestamp, _currentTime);\\n    }\\n\\n    /** @notice Searches TWAB history and calculate the difference between amount(s)/timestamp(s) to return average balance\\n                between the Observations closes to the supplied targetTime.\\n      * @param _twabs          Individual user Observation recorded checkpoints passed as storage pointer\\n      * @param _accountDetails User AccountDetails struct loaded in memory\\n      * @param _targetTime     Target timestamp to filter Observations in the ring buffer binary search\\n      * @param _currentTime    Block.timestamp\\n      * @return uint256 Time-weighted average amount between two closest observations.\\n    */\\n    function _getBalanceAt(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _targetTime,\\n        uint32 _currentTime\\n    ) private view returns (uint256) {\\n        uint24 newestTwabIndex;\\n        ObservationLib.Observation memory afterOrAt;\\n        ObservationLib.Observation memory beforeOrAt;\\n        (newestTwabIndex, beforeOrAt) = newestTwab(_twabs, _accountDetails);\\n\\n        // If `_targetTime` is chronologically after the newest TWAB, we can simply return the current balance\\n        if (beforeOrAt.timestamp.lte(_targetTime, _currentTime)) {\\n            return _accountDetails.balance;\\n        }\\n\\n        uint24 oldestTwabIndex;\\n        // Now, set before to the oldest TWAB\\n        (oldestTwabIndex, beforeOrAt) = oldestTwab(_twabs, _accountDetails);\\n\\n        // If `_targetTime` is chronologically before the oldest TWAB, we can early return\\n        if (_targetTime.lt(beforeOrAt.timestamp, _currentTime)) {\\n            return 0;\\n        }\\n\\n        // Otherwise, we perform the `binarySearch`\\n        (beforeOrAt, afterOrAt) = ObservationLib.binarySearch(\\n            _twabs,\\n            newestTwabIndex,\\n            oldestTwabIndex,\\n            _targetTime,\\n            _accountDetails.cardinality,\\n            _currentTime\\n        );\\n\\n        // Sum the difference in amounts and divide by the difference in timestamps.\\n        // The time-weighted average balance uses time measured between two epoch timestamps as\\n        // a constaint on the measurement when calculating the time weighted average balance.\\n        return\\n            (afterOrAt.amount - beforeOrAt.amount) / OverflowSafeComparatorLib.checkedSub(afterOrAt.timestamp, beforeOrAt.timestamp, _currentTime);\\n    }\\n\\n    /** @notice Calculates a user TWAB for a target timestamp using the historical TWAB records.\\n                The balance is linearly interpolated: amount differences / timestamp differences\\n                using the simple (after.amount - before.amount / end.timestamp - start.timestamp) formula.\\n    /** @dev    Binary search in _calculateTwab fails when searching out of bounds. Thus, before\\n                searching we exclude target timestamps out of range of newest/oldest TWAB(s).\\n                IF a search is before or after the range we \\\"extrapolate\\\" a Observation from the expected state.\\n      * @param _twabs           Individual user Observation recorded checkpoints passed as storage pointer\\n      * @param _accountDetails  User AccountDetails struct loaded in memory\\n      * @param _newestTwab      Newest TWAB in history (end of ring buffer)\\n      * @param _oldestTwab      Olderst TWAB in history (end of ring buffer)\\n      * @param _newestTwabIndex Pointer in ring buffer to newest TWAB\\n      * @param _oldestTwabIndex Pointer in ring buffer to oldest TWAB\\n      * @param _targetTimestamp Epoch timestamp to calculate for time (T) in the TWAB\\n      * @param _time            Block.timestamp\\n      * @return accountDetails Updated Account.details struct\\n    */\\n    function _calculateTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        ObservationLib.Observation memory _newestTwab,\\n        ObservationLib.Observation memory _oldestTwab,\\n        uint24 _newestTwabIndex,\\n        uint24 _oldestTwabIndex,\\n        uint32 _targetTimestamp,\\n        uint32 _time\\n    ) private view returns (ObservationLib.Observation memory) {\\n        // If `_targetTimestamp` is chronologically after the newest TWAB, we extrapolate a new one\\n        if (_newestTwab.timestamp.lt(_targetTimestamp, _time)) {\\n            return _computeNextTwab(_newestTwab, _accountDetails.balance, _targetTimestamp);\\n        }\\n\\n        if (_newestTwab.timestamp == _targetTimestamp) {\\n            return _newestTwab;\\n        }\\n\\n        if (_oldestTwab.timestamp == _targetTimestamp) {\\n            return _oldestTwab;\\n        }\\n\\n        // If `_targetTimestamp` is chronologically before the oldest TWAB, we create a zero twab\\n        if (_targetTimestamp.lt(_oldestTwab.timestamp, _time)) {\\n            return ObservationLib.Observation({ amount: 0, timestamp: _targetTimestamp });\\n        }\\n\\n        // Otherwise, both timestamps must be surrounded by twabs.\\n        (\\n            ObservationLib.Observation memory beforeOrAtStart,\\n            ObservationLib.Observation memory afterOrAtStart\\n        ) = ObservationLib.binarySearch(\\n                _twabs,\\n                _newestTwabIndex,\\n                _oldestTwabIndex,\\n                _targetTimestamp,\\n                _accountDetails.cardinality,\\n                _time\\n            );\\n\\n        uint224 heldBalance = (afterOrAtStart.amount - beforeOrAtStart.amount) /\\n            OverflowSafeComparatorLib.checkedSub(afterOrAtStart.timestamp, beforeOrAtStart.timestamp, _time);\\n\\n        return _computeNextTwab(beforeOrAtStart, heldBalance, _targetTimestamp);\\n    }\\n\\n    /**\\n     * @notice Calculates the next TWAB using the newestTwab and updated balance.\\n     * @dev    Storage of the TWAB obersation is managed by the calling function and not _computeNextTwab.\\n     * @param _currentTwab    Newest Observation in the Account.twabs list\\n     * @param _currentBalance User balance at time of most recent (newest) checkpoint write\\n     * @param _time           Current block.timestamp\\n     * @return TWAB Observation\\n     */\\n    function _computeNextTwab(\\n        ObservationLib.Observation memory _currentTwab,\\n        uint224 _currentBalance,\\n        uint32 _time\\n    ) private pure returns (ObservationLib.Observation memory) {\\n        // New twab amount = last twab amount (or zero) + (current amount * elapsed seconds)\\n        return\\n            ObservationLib.Observation({\\n                amount: _currentTwab.amount +\\n                    _currentBalance *\\n                    (_time.checkedSub(_currentTwab.timestamp, _time)),\\n                timestamp: _time\\n            });\\n    }\\n\\n    /// @notice Sets a new TWAB Observation at the next available index and returns the new account details.\\n    /// @dev Note that if _currentTime is before the last observation timestamp, it appears as an overflow\\n    /// @param _twabs The twabs array to insert into\\n    /// @param _accountDetails The current account details\\n    /// @param _currentTime The current time\\n    /// @return accountDetails The new account details\\n    /// @return twab The newest twab (may or may not be brand-new)\\n    /// @return isNew Whether the newest twab was created by this call\\n    function _nextTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _currentTime\\n    )\\n        private\\n        returns (\\n            AccountDetails memory accountDetails,\\n            ObservationLib.Observation memory twab,\\n            bool isNew\\n        )\\n    {\\n        (, ObservationLib.Observation memory _newestTwab) = newestTwab(_twabs, _accountDetails);\\n\\n        // if we're in the same block, return\\n        if (_newestTwab.timestamp == _currentTime) {\\n            return (_accountDetails, _newestTwab, false);\\n        }\\n\\n        ObservationLib.Observation memory newTwab = _computeNextTwab(\\n            _newestTwab,\\n            _accountDetails.balance,\\n            _currentTime\\n        );\\n\\n        _twabs[_accountDetails.nextTwabIndex] = newTwab;\\n\\n        AccountDetails memory nextAccountDetails = push(_accountDetails);\\n\\n        return (nextAccountDetails, newTwab, true);\\n    }\\n\\n    /// @notice \\\"Pushes\\\" a new element on the AccountDetails ring buffer, and returns the new AccountDetails\\n    /// @param _accountDetails The account details from which to pull the cardinality and next index\\n    /// @return The new AccountDetails\\n    function push(AccountDetails memory _accountDetails)\\n        internal\\n        pure\\n        returns (AccountDetails memory)\\n    {\\n        _accountDetails.nextTwabIndex = uint24(\\n            RingBufferLib.nextIndex(_accountDetails.nextTwabIndex, MAX_CARDINALITY)\\n        );\\n\\n        // Prevent the Account specific cardinality from exceeding the MAX_CARDINALITY.\\n        // The ring buffer length is limited by MAX_CARDINALITY. IF the account.cardinality\\n        // exceeds the max cardinality, new observations would be incorrectly set or the\\n        // observation would be out of \\\"bounds\\\" of the ring buffer. Once reached the\\n        // AccountDetails.cardinality will continue to be equal to max cardinality.\\n        if (_accountDetails.cardinality < MAX_CARDINALITY) {\\n            _accountDetails.cardinality += 1;\\n        }\\n\\n        return _accountDetails;\\n    }\\n}\\n\",\"keccak256\":\"0x446d8221329601d40464981a50a0e31f3fd48da0ebf0fea646c5a089ccfbdff4\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620018c1380380620018c1833981016040819052620000349162000232565b6001600160a01b038416620000905760405162461bcd60e51b815260206004820152601b60248201527f475265776172642f47432d6e6f742d7a65726f2d61646472657373000000000060448201526064015b60405180910390fd5b6001600160a01b038316620000e85760405162461bcd60e51b815260206004820152601e60248201527f475265776172642f5661756c742d6e6f742d7a65726f2d616464726573730000604482015260640162000087565b633b9aca008163ffffffff1610620001435760405162461bcd60e51b815260206004820152601960248201527f475265776172642f7374616b65722d6375742d6c742d31653900000000000000604482015260640162000087565b6001600160a01b0382166200019b5760405162461bcd60e51b815260206004820152601c60248201527f475265776172642f6c69712d6e6f742d7a65726f2d6164647265737300000000604482015260640162000087565b600580546001600160a01b03199081166001600160a01b03878116918217909355600680548316878516908117909155600780546001600160c01b031916600160a01b63ffffffff8816908102909516179487169485179055604051928352917f048ccaf1264df58374a01de5614345aa417e2d16af0f2e86b97729dc752e253f9060200160405180910390a450505050620002bb565b600080600080608085870312156200024957600080fd5b84516200025681620002a2565b60208601519094506200026981620002a2565b60408601519093506200027c81620002a2565b606086015190925063ffffffff811681146200029757600080fd5b939692955090935050565b6001600160a01b0381168114620002b857600080fd5b50565b6115f680620002cb6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806399eecb3b11610097578063bba06f2711610066578063bba06f27146102b9578063f5e3e905146102cc578063fbfa77cf146102fd578063fd4016281461031057600080fd5b806399eecb3b14610232578063ac9650d814610245578063ac9fb71d14610265578063b90d147b1461029157600080fd5b80635e1c75e1116100d35780635e1c75e1146101b35780636e8fc2d3146101c657806395cebcd41461010557806396abc1961461020757600080fd5b806331661930146101055780634046ebae1461011a5780635902fc3b1461014a5780635d837d7614610185575b600080fd5b610118610113366004611127565b610323565b005b60075461012d906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61015d6101583660046111ec565b6103d5565b604080516001600160a01b03909316835267ffffffffffffffff909116602083015201610141565b6101a561019336600461110a565b60026020526000908152604090205481565b604051908152602001610141565b6101186101c13660046111a1565b61041f565b6101d96101d436600461110a565b6104fa565b6040805182516001600160a01b0316815260209283015167ffffffffffffffff169281019290925201610141565b6101a5610215366004611168565b600360209081526000928352604080842090915290825290205481565b60055461012d906001600160a01b031681565b610258610253366004611218565b61051d565b6040516101419190611389565b60075461027c90600160a01b900463ffffffff1681565b60405163ffffffff9091168152602001610141565b6101a561029f366004611168565b600060208181529281526040808220909352908152205481565b6101a56102c7366004611168565b610612565b6101a56102da3660046111a1565b600160209081526000938452604080852082529284528284209052825290205481565b60065461012d906001600160a01b031681565b61011861031e3660046112af565b610657565b6005546001600160a01b031633146103825760405162461bcd60e51b815260206004820152600f60248201527f475265776172642f6f6e6c792d6763000000000000000000000000000000000060448201526064015b60405180910390fd5b600061038f848484610851565b80519091506001600160a01b0316156103b6576103b48482600001518585600061098f565b505b50506001600160a01b0316600090815260026020526040902042905550565b600460205281600052604060002081815481106103f157600080fd5b6000918252602090912001546001600160a01b0381169250600160a01b900467ffffffffffffffff16905082565b6005546040517f78fa672e0000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152838116602483015260009216906378fa672e9060440160206040518083038186803b15801561048657600080fd5b505afa15801561049a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104be919061130a565b90506104cb848383610851565b506104da84848484600061098f565b50506001600160a01b031660009081526002602052604090204290555050565b604080518082019091526000808252602082015261051782610b41565b92915050565b60608167ffffffffffffffff8111156105385761053861156b565b60405190808252806020026020018201604052801561056b57816020015b60608152602001906001900390816105565790505b50905060005b8281101561060b576105db3085858481811061058f5761058f611555565b90506020028101906105a1919061141c565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610c2f92505050565b8282815181106105ed576105ed611555565b6020026020010181905250808061060390611524565b915050610571565b5092915050565b6001600160a01b0382811660009081526020818152604080832085851680855292528220805490839055600654929390926106509291168684610c54565b9392505050565b6007546001600160a01b031633146106b15760405162461bcd60e51b815260206004820152601760248201527f475265776172642f6f6e6c792d6c697175696461746f720000000000000000006044820152606401610379565b836106bb81610b41565b516001600160a01b038481169116146106d8576106d88184610ce2565b600754600090633b9aca00906106fb90600160a01b900463ffffffff16856114c2565b61070591906114a0565b6005546040517f117d37e60000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529293506000929091169063117d37e69060240160206040518083038186803b15801561076957600080fd5b505afa15801561077d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a1919061130a565b6107b383670de0b6b3a76400006114c2565b6107bd91906114a0565b6001600160a01b0380871660009081526003602090815260408083209388168352929052908120805492935083929091906107f9908490611488565b909155505060408051838152602081018390526001600160a01b0380881692908616917fbdfd07c4944984536c4cb47c9ced23a77b0407b07e5ac1577835d02c1303c8ba910160405180910390a35050505050505050565b604080518082018252600080825260208083018290526001600160a01b038681168352600282528483205490881683526004825284832054855180870187528481528084018590528651808801909752848752928601939093529293821561098457825b8015610982576108c66001826114e1565b6001600160a01b038a166000908152600460205260409020805491925090829081106108f4576108f4611555565b6000918252602091829020604080518082019091529101546001600160a01b0381168252600160a01b900467ffffffffffffffff1691810191909152925061093d6001856114e1565b811415610948578291505b600085118015610965575084836020015167ffffffffffffffff16115b156109825761097c8984600001518a8a600161098f565b506108b5565b505b979650505050505050565b6001600160a01b038084166000908152600160209081526040808320888516808552908352818420948a16808552948352818420549084526003835281842094845293909152812054909190831580156109e7575081155b156109f0578091505b6000670de0b6b3a764000086610a0685856114e1565b610a1091906114c2565b610a1a91906114a0565b90508160016000896001600160a01b03166001600160a01b0316815260200190815260200160002060008a6001600160a01b03166001600160a01b0316815260200190815260200160002060008b6001600160a01b03166001600160a01b031681526020019081526020016000208190555080600080896001600160a01b03166001600160a01b0316815260200190815260200160002060008a6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610ae39190611488565b909155505060408051828152602081018490526001600160a01b03808a16928b821692918d16917f7e27222c50a5510dfc61468d936b48c880bfbd05c1eb59c5be79b06e582369dd910160405180910390a498975050505050505050565b604080518082018252600080825260208083018290526001600160a01b0385168252600481528382208054855181840281018401909652808652939492939091849084015b82821015610bd657600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b900467ffffffffffffffff1681830152825260019092019101610b86565b505082519293505081159050610c135781610bf26001836114e1565b81518110610c0257610c02611555565b602002602001015192505050919050565b5050604080518082019091526000808252602082015292915050565b6060610650838360405180606001604052806027815260200161159a60279139610db1565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052610cdc908590610e9c565b50505050565b6001600160a01b0380831660008181526004602090815260408083208151808301835287871680825267ffffffffffffffff4281811684880190815285546001810187559589529690972092519290930180549551909316600160a01b027fffffffff0000000000000000000000000000000000000000000000000000000090951691909716179290921790915551909291907fd38aa1c6709087859dfa9ca795d9441a64c1fa0b1bf23d8ad02c1853b971e33c90610da49085815260200190565b60405180910390a3505050565b6060833b610e275760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610379565b600080856001600160a01b031685604051610e42919061136d565b600060405180830381855af49150503d8060008114610e7d576040519150601f19603f3d011682016040523d82523d6000602084013e610e82565b606091505b5091509150610e92828286610f86565b9695505050505050565b6000610ef1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610fbf9092919063ffffffff16565b805190915015610f815780806020019051810190610f0f919061128d565b610f815760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610379565b505050565b60608315610f95575081610650565b825115610fa55782518084602001fd5b8160405162461bcd60e51b81526004016103799190611409565b6060610fce8484600085610fd6565b949350505050565b60608247101561104e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610379565b843b61109c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610379565b600080866001600160a01b031685876040516110b8919061136d565b60006040518083038185875af1925050503d80600081146110f5576040519150601f19603f3d011682016040523d82523d6000602084013e6110fa565b606091505b5091509150610984828286610f86565b60006020828403121561111c57600080fd5b813561065081611581565b60008060006060848603121561113c57600080fd5b833561114781611581565b9250602084013561115781611581565b929592945050506040919091013590565b6000806040838503121561117b57600080fd5b823561118681611581565b9150602083013561119681611581565b809150509250929050565b6000806000606084860312156111b657600080fd5b83356111c181611581565b925060208401356111d181611581565b915060408401356111e181611581565b809150509250925092565b600080604083850312156111ff57600080fd5b823561120a81611581565b946020939093013593505050565b6000806020838503121561122b57600080fd5b823567ffffffffffffffff8082111561124357600080fd5b818501915085601f83011261125757600080fd5b81358181111561126657600080fd5b8660208260051b850101111561127b57600080fd5b60209290920196919550909350505050565b60006020828403121561129f57600080fd5b8151801515811461065057600080fd5b600080600080600060a086880312156112c757600080fd5b85356112d281611581565b945060208601356112e281611581565b93506040860135925060608601356112f981611581565b949793965091946080013592915050565b60006020828403121561131c57600080fd5b5051919050565b6000815180845261133b8160208601602086016114f8565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000825161137f8184602087016114f8565b9190910192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156113fc577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526113ea858351611323565b945092850192908501906001016113b0565b5092979650505050505050565b6020815260006106506020830184611323565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261145157600080fd5b83018035915067ffffffffffffffff82111561146c57600080fd5b60200191503681900382131561148157600080fd5b9250929050565b6000821982111561149b5761149b61153f565b500190565b6000826114bd57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156114dc576114dc61153f565b500290565b6000828210156114f3576114f361153f565b500390565b60005b838110156115135781810151838201526020016114fb565b83811115610cdc5750506000910152565b60006000198214156115385761153861153f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461159657600080fd5b5056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ba186f71b2d40936c375780f4314c81905fead19f40dae2177f859dc7b21bd5b64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c806399eecb3b11610097578063bba06f2711610066578063bba06f27146102b9578063f5e3e905146102cc578063fbfa77cf146102fd578063fd4016281461031057600080fd5b806399eecb3b14610232578063ac9650d814610245578063ac9fb71d14610265578063b90d147b1461029157600080fd5b80635e1c75e1116100d35780635e1c75e1146101b35780636e8fc2d3146101c657806395cebcd41461010557806396abc1961461020757600080fd5b806331661930146101055780634046ebae1461011a5780635902fc3b1461014a5780635d837d7614610185575b600080fd5b610118610113366004611127565b610323565b005b60075461012d906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61015d6101583660046111ec565b6103d5565b604080516001600160a01b03909316835267ffffffffffffffff909116602083015201610141565b6101a561019336600461110a565b60026020526000908152604090205481565b604051908152602001610141565b6101186101c13660046111a1565b61041f565b6101d96101d436600461110a565b6104fa565b6040805182516001600160a01b0316815260209283015167ffffffffffffffff169281019290925201610141565b6101a5610215366004611168565b600360209081526000928352604080842090915290825290205481565b60055461012d906001600160a01b031681565b610258610253366004611218565b61051d565b6040516101419190611389565b60075461027c90600160a01b900463ffffffff1681565b60405163ffffffff9091168152602001610141565b6101a561029f366004611168565b600060208181529281526040808220909352908152205481565b6101a56102c7366004611168565b610612565b6101a56102da3660046111a1565b600160209081526000938452604080852082529284528284209052825290205481565b60065461012d906001600160a01b031681565b61011861031e3660046112af565b610657565b6005546001600160a01b031633146103825760405162461bcd60e51b815260206004820152600f60248201527f475265776172642f6f6e6c792d6763000000000000000000000000000000000060448201526064015b60405180910390fd5b600061038f848484610851565b80519091506001600160a01b0316156103b6576103b48482600001518585600061098f565b505b50506001600160a01b0316600090815260026020526040902042905550565b600460205281600052604060002081815481106103f157600080fd5b6000918252602090912001546001600160a01b0381169250600160a01b900467ffffffffffffffff16905082565b6005546040517f78fa672e0000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152838116602483015260009216906378fa672e9060440160206040518083038186803b15801561048657600080fd5b505afa15801561049a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104be919061130a565b90506104cb848383610851565b506104da84848484600061098f565b50506001600160a01b031660009081526002602052604090204290555050565b604080518082019091526000808252602082015261051782610b41565b92915050565b60608167ffffffffffffffff8111156105385761053861156b565b60405190808252806020026020018201604052801561056b57816020015b60608152602001906001900390816105565790505b50905060005b8281101561060b576105db3085858481811061058f5761058f611555565b90506020028101906105a1919061141c565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610c2f92505050565b8282815181106105ed576105ed611555565b6020026020010181905250808061060390611524565b915050610571565b5092915050565b6001600160a01b0382811660009081526020818152604080832085851680855292528220805490839055600654929390926106509291168684610c54565b9392505050565b6007546001600160a01b031633146106b15760405162461bcd60e51b815260206004820152601760248201527f475265776172642f6f6e6c792d6c697175696461746f720000000000000000006044820152606401610379565b836106bb81610b41565b516001600160a01b038481169116146106d8576106d88184610ce2565b600754600090633b9aca00906106fb90600160a01b900463ffffffff16856114c2565b61070591906114a0565b6005546040517f117d37e60000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529293506000929091169063117d37e69060240160206040518083038186803b15801561076957600080fd5b505afa15801561077d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a1919061130a565b6107b383670de0b6b3a76400006114c2565b6107bd91906114a0565b6001600160a01b0380871660009081526003602090815260408083209388168352929052908120805492935083929091906107f9908490611488565b909155505060408051838152602081018390526001600160a01b0380881692908616917fbdfd07c4944984536c4cb47c9ced23a77b0407b07e5ac1577835d02c1303c8ba910160405180910390a35050505050505050565b604080518082018252600080825260208083018290526001600160a01b038681168352600282528483205490881683526004825284832054855180870187528481528084018590528651808801909752848752928601939093529293821561098457825b8015610982576108c66001826114e1565b6001600160a01b038a166000908152600460205260409020805491925090829081106108f4576108f4611555565b6000918252602091829020604080518082019091529101546001600160a01b0381168252600160a01b900467ffffffffffffffff1691810191909152925061093d6001856114e1565b811415610948578291505b600085118015610965575084836020015167ffffffffffffffff16115b156109825761097c8984600001518a8a600161098f565b506108b5565b505b979650505050505050565b6001600160a01b038084166000908152600160209081526040808320888516808552908352818420948a16808552948352818420549084526003835281842094845293909152812054909190831580156109e7575081155b156109f0578091505b6000670de0b6b3a764000086610a0685856114e1565b610a1091906114c2565b610a1a91906114a0565b90508160016000896001600160a01b03166001600160a01b0316815260200190815260200160002060008a6001600160a01b03166001600160a01b0316815260200190815260200160002060008b6001600160a01b03166001600160a01b031681526020019081526020016000208190555080600080896001600160a01b03166001600160a01b0316815260200190815260200160002060008a6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610ae39190611488565b909155505060408051828152602081018490526001600160a01b03808a16928b821692918d16917f7e27222c50a5510dfc61468d936b48c880bfbd05c1eb59c5be79b06e582369dd910160405180910390a498975050505050505050565b604080518082018252600080825260208083018290526001600160a01b0385168252600481528382208054855181840281018401909652808652939492939091849084015b82821015610bd657600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b900467ffffffffffffffff1681830152825260019092019101610b86565b505082519293505081159050610c135781610bf26001836114e1565b81518110610c0257610c02611555565b602002602001015192505050919050565b5050604080518082019091526000808252602082015292915050565b6060610650838360405180606001604052806027815260200161159a60279139610db1565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052610cdc908590610e9c565b50505050565b6001600160a01b0380831660008181526004602090815260408083208151808301835287871680825267ffffffffffffffff4281811684880190815285546001810187559589529690972092519290930180549551909316600160a01b027fffffffff0000000000000000000000000000000000000000000000000000000090951691909716179290921790915551909291907fd38aa1c6709087859dfa9ca795d9441a64c1fa0b1bf23d8ad02c1853b971e33c90610da49085815260200190565b60405180910390a3505050565b6060833b610e275760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610379565b600080856001600160a01b031685604051610e42919061136d565b600060405180830381855af49150503d8060008114610e7d576040519150601f19603f3d011682016040523d82523d6000602084013e610e82565b606091505b5091509150610e92828286610f86565b9695505050505050565b6000610ef1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610fbf9092919063ffffffff16565b805190915015610f815780806020019051810190610f0f919061128d565b610f815760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610379565b505050565b60608315610f95575081610650565b825115610fa55782518084602001fd5b8160405162461bcd60e51b81526004016103799190611409565b6060610fce8484600085610fd6565b949350505050565b60608247101561104e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610379565b843b61109c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610379565b600080866001600160a01b031685876040516110b8919061136d565b60006040518083038185875af1925050503d80600081146110f5576040519150601f19603f3d011682016040523d82523d6000602084013e6110fa565b606091505b5091509150610984828286610f86565b60006020828403121561111c57600080fd5b813561065081611581565b60008060006060848603121561113c57600080fd5b833561114781611581565b9250602084013561115781611581565b929592945050506040919091013590565b6000806040838503121561117b57600080fd5b823561118681611581565b9150602083013561119681611581565b809150509250929050565b6000806000606084860312156111b657600080fd5b83356111c181611581565b925060208401356111d181611581565b915060408401356111e181611581565b809150509250925092565b600080604083850312156111ff57600080fd5b823561120a81611581565b946020939093013593505050565b6000806020838503121561122b57600080fd5b823567ffffffffffffffff8082111561124357600080fd5b818501915085601f83011261125757600080fd5b81358181111561126657600080fd5b8660208260051b850101111561127b57600080fd5b60209290920196919550909350505050565b60006020828403121561129f57600080fd5b8151801515811461065057600080fd5b600080600080600060a086880312156112c757600080fd5b85356112d281611581565b945060208601356112e281611581565b93506040860135925060608601356112f981611581565b949793965091946080013592915050565b60006020828403121561131c57600080fd5b5051919050565b6000815180845261133b8160208601602086016114f8565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000825161137f8184602087016114f8565b9190910192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156113fc577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526113ea858351611323565b945092850192908501906001016113b0565b5092979650505050505050565b6020815260006106506020830184611323565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261145157600080fd5b83018035915067ffffffffffffffff82111561146c57600080fd5b60200191503681900382131561148157600080fd5b9250929050565b6000821982111561149b5761149b61153f565b500190565b6000826114bd57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156114dc576114dc61153f565b500290565b6000828210156114f3576114f361153f565b500390565b60005b838110156115135781810151838201526020016114fb565b83811115610cdc5750506000910152565b60006000198214156115385761153861153f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461159657600080fd5b5056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ba186f71b2d40936c375780f4314c81905fead19f40dae2177f859dc7b21bd5b64736f6c63430008060033",
  "devdoc": {
    "author": "PoolTogether Inc Team",
    "events": {
      "Deployed(address,address,address,uint32)": {
        "params": {
          "gaugeController": "Address of the GaugeController",
          "vault": "Address of the Vault"
        }
      },
      "RewardTokenPushed(address,address,uint256)": {
        "params": {
          "gauge": "Address of the gauge for which the reward token is added",
          "timestamp": "Timestamp at which the reward token was pushed",
          "token": "Address of the token being pushed"
        }
      },
      "RewardsAdded(address,address,uint256,uint256)": {
        "params": {
          "amount": "Amount of tokens added to the gauge",
          "exchangeRate": "New exchange rate for this `token` in this `gauge`",
          "gauge": "Address of the gauge for which the rewards are added",
          "token": "Address of the token being added"
        }
      },
      "RewardsClaimed(address,address,address,uint256,uint256)": {
        "params": {
          "amount": "Total amount of rewards claimed",
          "exchangeRate": "Exchange rate at which the rewards were claimed",
          "gauge": "Address of the gauge for which the user claimed rewards",
          "token": "Address of the token for which the user claimed rewards",
          "user": "Address of the user who claimed rewards"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "afterDecreaseGauge(address,address,uint256)": {
        "params": {
          "gauge": "Address of the gauge to decrease stake for",
          "oldStakeBalance": "Old stake balance of the user",
          "user": "Address of the user to decrease stake for"
        }
      },
      "afterIncreaseGauge(address,address,uint256)": {
        "params": {
          "gauge": "Address of the gauge to increase stake for",
          "oldStakeBalance": "Old stake balance of the user",
          "user": "Address of the user to increase stake for"
        }
      },
      "afterSwap(address,address,uint256,address,uint256)": {
        "details": "Called by the liquidation contract anytime tokens are liquidated.Will push token to the `gaugeRewardTokens` mapping if different from the current one.",
        "params": {
          "ticket": "The address of the tickets that were sold",
          "token": "The address of the token that the tickets were sold for",
          "tokenAmount": "The amount of tokens that the tickets were sold for"
        }
      },
      "claim(address,address,address)": {
        "params": {
          "_gauge": "Address of the gauge to claim rewards for",
          "_token": "Address of the token to claim rewards for",
          "_user": "Address of the user to claim rewards for"
        }
      },
      "constructor": {
        "params": {
          "_gaugeController": "Address of the GaugeController",
          "_vault": "Address of the Vault"
        }
      },
      "currentRewardToken(address)": {
        "params": {
          "_gauge": "Address of the gauge to get current reward token for"
        },
        "returns": {
          "_0": "Current reward token for the given gauge"
        }
      },
      "multicall(bytes[])": {
        "details": "Receives and executes a batch of function calls on this contract."
      }
    },
    "stateVariables": {
      "gaugeRewardTokens": {
        "details": "gauge => reward tokens array"
      },
      "tokenGaugeExchangeRates": {
        "details": "token => gauge => exchange rate"
      },
      "userLastClaimedTimestamp": {
        "details": "user => timestamp"
      },
      "userTokenGaugeExchangeRates": {
        "details": "user => token => gauge => exchange rate"
      }
    },
    "title": "PoolTogether V4 GaugeReward",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Deployed(address,address,address,uint32)": {
        "notice": "Emitted when the contract is deployed"
      },
      "RewardTokenPushed(address,address,uint256)": {
        "notice": "Emitted when a new reward token is pushed onto the `gaugeRewardTokens` mapping"
      },
      "RewardsAdded(address,address,uint256,uint256)": {
        "notice": "Emitted when rewards token are added to a gauge"
      },
      "RewardsClaimed(address,address,address,uint256,uint256)": {
        "notice": "Emitted when a user claimed their rewards for a given gauge and token"
      }
    },
    "kind": "user",
    "methods": {
      "afterDecreaseGauge(address,address,uint256)": {
        "notice": "Fallback function to call in GaugeController after a user has decreased his gauge stake."
      },
      "afterIncreaseGauge(address,address,uint256)": {
        "notice": "Fallback function to call in GaugeController after a user has increased their gauge stake."
      },
      "afterSwap(address,address,uint256,address,uint256)": {
        "notice": "Add rewards denominated in `token` for the given `gauge`."
      },
      "claim(address,address,address)": {
        "notice": "Claim user rewards for a given gauge and token."
      },
      "constructor": {
        "notice": "GaugeReward constructor"
      },
      "currentRewardToken(address)": {
        "notice": "Return the current reward token for the given gauge."
      },
      "gaugeController()": {
        "notice": "GaugeController contract address"
      },
      "gaugeRewardTokens(address,uint256)": {
        "notice": "Tracks reward tokens per gauge"
      },
      "liquidator()": {
        "notice": "Address of the liquidator that this contract is listening to"
      },
      "stakerCut()": {
        "notice": "Percentage of rewards that goes to stakers. Fixed point 9 number this is less than 1."
      },
      "tokenGaugeExchangeRates(address,address)": {
        "notice": "Tracks token gauge exchange rates"
      },
      "userLastClaimedTimestamp(address)": {
        "notice": "Tracks user last claimed timestamp"
      },
      "userTokenGaugeExchangeRates(address,address,address)": {
        "notice": "Tracks user token gauge exchange rate"
      },
      "userTokenRewardBalances(address,address)": {
        "notice": "Tracks user token reward balances"
      },
      "vault()": {
        "notice": "Vault contract address"
      }
    },
    "notice": "The GaugeReward contract handles the rewards for users who staked in one or several gauges on the GaugeController contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15367,
        "contract": "contracts/GaugeReward.sol:GaugeReward",
        "label": "userTokenRewardBalances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_contract(IERC20)663,t_uint256))"
      },
      {
        "astId": 15377,
        "contract": "contracts/GaugeReward.sol:GaugeReward",
        "label": "userTokenGaugeExchangeRates",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_contract(IERC20)663,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 15382,
        "contract": "contracts/GaugeReward.sol:GaugeReward",
        "label": "userLastClaimedTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15390,
        "contract": "contracts/GaugeReward.sol:GaugeReward",
        "label": "tokenGaugeExchangeRates",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_contract(IERC20)663,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 15403,
        "contract": "contracts/GaugeReward.sol:GaugeReward",
        "label": "gaugeRewardTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_struct(RewardToken)15396_storage)dyn_storage)"
      },
      {
        "astId": 15407,
        "contract": "contracts/GaugeReward.sol:GaugeReward",
        "label": "gaugeController",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IGaugeController)20455"
      },
      {
        "astId": 15410,
        "contract": "contracts/GaugeReward.sol:GaugeReward",
        "label": "vault",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 15413,
        "contract": "contracts/GaugeReward.sol:GaugeReward",
        "label": "liquidator",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 15416,
        "contract": "contracts/GaugeReward.sol:GaugeReward",
        "label": "stakerCut",
        "offset": 20,
        "slot": "7",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(RewardToken)15396_storage)dyn_storage": {
        "base": "t_struct(RewardToken)15396_storage",
        "encoding": "dynamic_array",
        "label": "struct GaugeReward.RewardToken[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)663": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IGaugeController)20455": {
        "encoding": "inplace",
        "label": "contract IGaugeController",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(RewardToken)15396_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GaugeReward.RewardToken[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(RewardToken)15396_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_contract(IERC20)663,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(contract IERC20 => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)663,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_contract(IERC20)663,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(contract IERC20 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)663,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)663,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)663",
        "label": "mapping(contract IERC20 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_contract(IERC20)663,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)663",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RewardToken)15396_storage": {
        "encoding": "inplace",
        "label": "struct GaugeReward.RewardToken",
        "members": [
          {
            "astId": 15393,
            "contract": "contracts/GaugeReward.sol:GaugeReward",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)663"
          },
          {
            "astId": 15395,
            "contract": "contracts/GaugeReward.sol:GaugeReward",
            "label": "timestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}